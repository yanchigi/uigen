{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/lib/auth.ts"],"sourcesContent":["import \"server-only\";\nimport { SignJWT, jwtVerify } from \"jose\";\nimport { cookies } from \"next/headers\";\nimport { NextRequest } from \"next/server\";\n\nconst JWT_SECRET = new TextEncoder().encode(\n  process.env.JWT_SECRET || \"development-secret-key\"\n);\n\nconst COOKIE_NAME = \"auth-token\";\n\nexport interface SessionPayload {\n  userId: string;\n  email: string;\n  expiresAt: Date;\n}\n\nexport async function createSession(userId: string, email: string) {\n  const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000); // 7 days\n  const session: SessionPayload = { userId, email, expiresAt };\n\n  const token = await new SignJWT({ ...session })\n    .setProtectedHeader({ alg: \"HS256\" })\n    .setExpirationTime(\"7d\")\n    .setIssuedAt()\n    .sign(JWT_SECRET);\n\n  const cookieStore = await cookies();\n  cookieStore.set(COOKIE_NAME, token, {\n    httpOnly: true,\n    secure: process.env.NODE_ENV === \"production\",\n    sameSite: \"lax\",\n    expires: expiresAt,\n    path: \"/\",\n  });\n}\n\nexport async function getSession(): Promise<SessionPayload | null> {\n  const cookieStore = await cookies();\n  const token = cookieStore.get(COOKIE_NAME)?.value;\n\n  if (!token) {\n    return null;\n  }\n\n  try {\n    const { payload } = await jwtVerify(token, JWT_SECRET);\n    return payload as unknown as SessionPayload;\n  } catch (error) {\n    return null;\n  }\n}\n\nexport async function deleteSession() {\n  const cookieStore = await cookies();\n  cookieStore.delete(COOKIE_NAME);\n}\n\nexport async function verifySession(\n  request: NextRequest\n): Promise<SessionPayload | null> {\n  const token = request.cookies.get(COOKIE_NAME)?.value;\n\n  if (!token) {\n    return null;\n  }\n\n  try {\n    const { payload } = await jwtVerify(token, JWT_SECRET);\n    return payload as unknown as SessionPayload;\n  } catch (error) {\n    return null;\n  }\n}\n"],"names":[],"mappings":";;;;;;AAAA;AACA;AAAA;AACA;AAAA;;;;AAGA,MAAM,aAAa,IAAI,cAAc,MAAM,CACzC,QAAQ,GAAG,CAAC,UAAU,IAAI;AAG5B,MAAM,cAAc;AAQb,eAAe,cAAc,MAAc,EAAE,KAAa;IAC/D,MAAM,YAAY,IAAI,KAAK,KAAK,GAAG,KAAK,IAAI,KAAK,KAAK,KAAK,OAAO,SAAS;IAC3E,MAAM,UAA0B;QAAE;QAAQ;QAAO;IAAU;IAE3D,MAAM,QAAQ,MAAM,IAAI,6JAAA,CAAA,UAAO,CAAC;QAAE,GAAG,OAAO;IAAC,GAC1C,kBAAkB,CAAC;QAAE,KAAK;IAAQ,GAClC,iBAAiB,CAAC,MAClB,WAAW,GACX,IAAI,CAAC;IAER,MAAM,cAAc,MAAM,CAAA,GAAA,2KAAA,CAAA,UAAO,AAAD;IAChC,YAAY,GAAG,CAAC,aAAa,OAAO;QAClC,UAAU;QACV,QAAQ,oDAAyB;QACjC,UAAU;QACV,SAAS;QACT,MAAM;IACR;AACF;AAEO,eAAe;IACpB,MAAM,cAAc,MAAM,CAAA,GAAA,2KAAA,CAAA,UAAO,AAAD;IAChC,MAAM,QAAQ,YAAY,GAAG,CAAC,cAAc;IAE5C,IAAI,CAAC,OAAO;QACV,OAAO;IACT;IAEA,IAAI;QACF,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,CAAA,GAAA,+JAAA,CAAA,YAAS,AAAD,EAAE,OAAO;QAC3C,OAAO;IACT,EAAE,OAAO,OAAO;QACd,OAAO;IACT;AACF;AAEO,eAAe;IACpB,MAAM,cAAc,MAAM,CAAA,GAAA,2KAAA,CAAA,UAAO,AAAD;IAChC,YAAY,MAAM,CAAC;AACrB;AAEO,eAAe,cACpB,OAAoB;IAEpB,MAAM,QAAQ,QAAQ,OAAO,CAAC,GAAG,CAAC,cAAc;IAEhD,IAAI,CAAC,OAAO;QACV,OAAO;IACT;IAEA,IAAI;QACF,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,CAAA,GAAA,+JAAA,CAAA,YAAS,AAAD,EAAE,OAAO;QAC3C,OAAO;IACT,EAAE,OAAO,OAAO;QACd,OAAO;IACT;AACF"}},
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport type { NextRequest } from \"next/server\";\nimport { verifySession } from \"@/lib/auth\";\n\nexport async function middleware(request: NextRequest) {\n  const session = await verifySession(request);\n\n  // Protected routes that require authentication\n  const protectedPaths = [\"/api/projects\", \"/api/filesystem\"];\n  const isProtectedPath = protectedPaths.some((path) =>\n    request.nextUrl.pathname.startsWith(path)\n  );\n\n  if (isProtectedPath && !session) {\n    return NextResponse.json(\n      { error: \"Authentication required\" },\n      { status: 401 }\n    );\n  }\n\n  return NextResponse.next();\n}\n\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     * - public folder\n     */\n    \"/((?!_next/static|_next/image|favicon.ico|.*\\\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)\",\n  ],\n};"],"names":[],"mappings":";;;;AAAA;AAAA;AAEA;;;AAEO,eAAe,WAAW,OAAoB;IACnD,MAAM,UAAU,MAAM,CAAA,GAAA,0HAAA,CAAA,gBAAa,AAAD,EAAE;IAEpC,+CAA+C;IAC/C,MAAM,iBAAiB;QAAC;QAAiB;KAAkB;IAC3D,MAAM,kBAAkB,eAAe,IAAI,CAAC,CAAC,OAC3C,QAAQ,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC;IAGtC,IAAI,mBAAmB,CAAC,SAAS;QAC/B,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA0B,GACnC;YAAE,QAAQ;QAAI;IAElB;IAEA,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;AAC1B;AAEO,MAAM,SAAS;IACpB,SAAS;QACP;;;;;;KAMC,GACD;KACD;AACH"}}]
}