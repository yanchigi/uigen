{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/index.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/data-stream/create-data-stream.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/util/prepare-response-headers.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/data-stream/create-data-stream-response.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/util/prepare-outgoing-http-headers.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/util/write-to-server-response.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/data-stream/pipe-data-stream-to-response.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/errors/invalid-argument-error.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/util/retry-with-exponential-backoff.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/util/retry-error.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/prompt/prepare-retries.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/telemetry/assemble-operation-name.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/telemetry/get-base-telemetry-attributes.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/telemetry/get-tracer.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/telemetry/noop-tracer.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/telemetry/record-span.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/telemetry/select-telemetry-attributes.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/embed/embed.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/util/split-array.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/embed/embed-many.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/errors/no-image-generated-error.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/generate-text/generated-file.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/util/detect-mimetype.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/generate-image/generate-image.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/generate-object/generate-object.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/errors/no-object-generated-error.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/util/download-error.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/util/download.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/prompt/data-content.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/prompt/invalid-data-content-error.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/prompt/invalid-message-role-error.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/prompt/split-data-url.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/prompt/convert-to-language-model-prompt.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/prompt/prepare-call-settings.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/prompt/standardize-prompt.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/prompt/attachments-to-parts.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/prompt/message-conversion-error.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/prompt/convert-to-core-messages.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/prompt/message.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/types/provider-metadata.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/types/json-value.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/prompt/content-part.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/prompt/tool-result-content.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/types/usage.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/generate-object/inject-json-instruction.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/generate-object/output-strategy.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/util/async-iterable-stream.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/generate-object/validate-object-generation-input.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/prompt/stringify-for-telemetry.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/generate-object/stream-object.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/util/delayed-promise.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/util/create-resolvable-promise.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/util/create-stitchable-stream.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/util/now.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/generate-text/generate-text.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/errors/no-output-specified-error.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/errors/tool-execution-error.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/prompt/prepare-tools-and-tool-choice.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/util/is-non-empty-object.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/util/split-on-last-whitespace.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/util/remove-text-after-last-whitespace.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/generate-text/parse-tool-call.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/errors/invalid-tool-arguments-error.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/errors/no-such-tool-error.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/errors/tool-call-repair-error.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/generate-text/reasoning-detail.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/generate-text/to-response-messages.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/generate-text/output.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/errors/index.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/errors/invalid-stream-part-error.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/errors/mcp-client-error.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/generate-text/smooth-stream.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/generate-text/stream-text.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/util/as-array.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/util/consume-stream.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/util/merge-streams.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/generate-text/run-tools-transformation.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/errors/no-speech-generated-error.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/generate-speech/generated-audio-file.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/generate-speech/generate-speech.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/errors/no-transcript-generated-error.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/transcribe/transcribe.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/util/merge-objects.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/middleware/default-settings-middleware.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/util/get-potential-start-index.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/middleware/extract-reasoning-middleware.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/middleware/simulate-streaming-middleware.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/middleware/wrap-language-model.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/prompt/append-client-message.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/prompt/append-response-messages.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/registry/custom-provider.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/registry/no-such-provider-error.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/registry/provider-registry.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/tool/mcp/mcp-client.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/tool/tool.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/tool/mcp/mcp-sse-transport.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/tool/mcp/json-rpc-message.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/tool/mcp/types.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/tool/mcp/mcp-transport.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/util/cosine-similarity.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/core/util/simulate-readable-stream.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/streams/assistant-response.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/streams/langchain-adapter.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/streams/stream-callbacks.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/streams/llamaindex-adapter.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/streams/stream-data.ts","file:///Users/hyejinlee/francis/uigen/node_modules/ai/util/constants.ts"],"sourcesContent":["// re-exports:\nexport { createIdGenerator, generateId } from '@ai-sdk/provider-utils';\nexport type { IDGenerator } from '@ai-sdk/provider-utils';\nexport {\n  formatAssistantStreamPart,\n  formatDataStreamPart,\n  jsonSchema,\n  parseAssistantStreamPart,\n  parseDataStreamPart,\n  processDataStream,\n  processTextStream,\n  zodSchema,\n} from '@ai-sdk/ui-utils';\nexport type {\n  AssistantMessage,\n  AssistantStatus,\n  Attachment,\n  ChatRequest,\n  ChatRequestOptions,\n  CreateMessage,\n  DataMessage,\n  DataStreamPart,\n  DeepPartial,\n  IdGenerator,\n  JSONValue,\n  Message,\n  UIMessage,\n  RequestOptions,\n  Schema,\n  ToolInvocation,\n  UseAssistantOptions,\n} from '@ai-sdk/ui-utils';\n\n// directory exports:\nexport * from './data-stream';\nexport * from './embed';\nexport * from './generate-image';\nexport * from './generate-object';\nexport * from './generate-text';\nexport * from './generate-speech';\nexport * from './transcribe';\nexport * from './middleware';\nexport * from './prompt';\nexport * from './registry';\nexport * from './tool';\nexport * from './types';\n\n// telemetry types:\nexport type { TelemetrySettings } from './telemetry/telemetry-settings';\n\n// util exports:\nexport { cosineSimilarity } from './util/cosine-similarity';\nexport { simulateReadableStream } from './util/simulate-readable-stream';\n","import { DataStreamString, formatDataStreamPart } from '@ai-sdk/ui-utils';\nimport { DataStreamWriter } from './data-stream-writer';\n\nexport function createDataStream({\n  execute,\n  onError = () => 'An error occurred.', // mask error messages for safety by default\n}: {\n  execute: (dataStream: DataStreamWriter) => Promise<void> | void;\n  onError?: (error: unknown) => string;\n}): ReadableStream<DataStreamString> {\n  let controller!: ReadableStreamDefaultController<string>;\n\n  const ongoingStreamPromises: Promise<void>[] = [];\n\n  const stream = new ReadableStream({\n    start(controllerArg) {\n      controller = controllerArg;\n    },\n  });\n\n  function safeEnqueue(data: DataStreamString) {\n    try {\n      controller.enqueue(data);\n    } catch (error) {\n      // suppress errors when the stream has been closed\n    }\n  }\n\n  try {\n    const result = execute({\n      write(data: DataStreamString) {\n        safeEnqueue(data);\n      },\n      writeData(data) {\n        safeEnqueue(formatDataStreamPart('data', [data]));\n      },\n      writeMessageAnnotation(annotation) {\n        safeEnqueue(formatDataStreamPart('message_annotations', [annotation]));\n      },\n      writeSource(source) {\n        safeEnqueue(formatDataStreamPart('source', source));\n      },\n      merge(streamArg) {\n        ongoingStreamPromises.push(\n          (async () => {\n            const reader = streamArg.getReader();\n            while (true) {\n              const { done, value } = await reader.read();\n              if (done) break;\n              safeEnqueue(value);\n            }\n          })().catch(error => {\n            safeEnqueue(formatDataStreamPart('error', onError(error)));\n          }),\n        );\n      },\n      onError,\n    });\n\n    if (result) {\n      ongoingStreamPromises.push(\n        result.catch(error => {\n          safeEnqueue(formatDataStreamPart('error', onError(error)));\n        }),\n      );\n    }\n  } catch (error) {\n    safeEnqueue(formatDataStreamPart('error', onError(error)));\n  }\n\n  // Wait until all ongoing streams are done. This approach enables merging\n  // streams even after execute has returned, as long as there is still an\n  // open merged stream. This is important to e.g. forward new streams and\n  // from callbacks.\n  const waitForStreams: Promise<void> = new Promise(async resolve => {\n    while (ongoingStreamPromises.length > 0) {\n      await ongoingStreamPromises.shift();\n    }\n    resolve();\n  });\n\n  waitForStreams.finally(() => {\n    try {\n      controller.close();\n    } catch (error) {\n      // suppress errors when the stream has been closed\n    }\n  });\n\n  return stream;\n}\n","export function prepareResponseHeaders(\n  headers: HeadersInit | undefined,\n  {\n    contentType,\n    dataStreamVersion,\n  }: { contentType: string; dataStreamVersion?: 'v1' | undefined },\n) {\n  const responseHeaders = new Headers(headers ?? {});\n\n  if (!responseHeaders.has('Content-Type')) {\n    responseHeaders.set('Content-Type', contentType);\n  }\n\n  if (dataStreamVersion !== undefined) {\n    responseHeaders.set('X-Vercel-AI-Data-Stream', dataStreamVersion);\n  }\n\n  return responseHeaders;\n}\n","import { prepareResponseHeaders } from '../util/prepare-response-headers';\nimport { createDataStream } from './create-data-stream';\nimport { DataStreamWriter } from './data-stream-writer';\n\nexport function createDataStreamResponse({\n  status,\n  statusText,\n  headers,\n  execute,\n  onError,\n}: ResponseInit & {\n  execute: (dataStream: DataStreamWriter) => Promise<void> | void;\n  onError?: (error: unknown) => string;\n}): Response {\n  return new Response(\n    createDataStream({ execute, onError }).pipeThrough(new TextEncoderStream()),\n    {\n      status,\n      statusText,\n      headers: prepareResponseHeaders(headers, {\n        contentType: 'text/plain; charset=utf-8',\n        dataStreamVersion: 'v1',\n      }),\n    },\n  );\n}\n","export function prepareOutgoingHttpHeaders(\n  headers: HeadersInit | undefined,\n  {\n    contentType,\n    dataStreamVersion,\n  }: { contentType: string; dataStreamVersion?: 'v1' | undefined },\n) {\n  const outgoingHeaders: Record<string, string | number | string[]> = {};\n\n  if (headers != null) {\n    for (const [key, value] of Object.entries(headers)) {\n      outgoingHeaders[key] = value;\n    }\n  }\n\n  if (outgoingHeaders['Content-Type'] == null) {\n    outgoingHeaders['Content-Type'] = contentType;\n  }\n\n  if (dataStreamVersion !== undefined) {\n    outgoingHeaders['X-Vercel-AI-Data-Stream'] = dataStreamVersion;\n  }\n\n  return outgoingHeaders;\n}\n","import { ServerResponse } from 'node:http';\n\n/**\n * Writes the content of a stream to a server response.\n */\nexport function writeToServerResponse({\n  response,\n  status,\n  statusText,\n  headers,\n  stream,\n}: {\n  response: ServerResponse;\n  status?: number;\n  statusText?: string;\n  headers?: Record<string, string | number | string[]>;\n  stream: ReadableStream<Uint8Array>;\n}): void {\n  response.writeHead(status ?? 200, statusText, headers);\n\n  const reader = stream.getReader();\n  const read = async () => {\n    try {\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) break;\n        response.write(value);\n      }\n    } catch (error) {\n      throw error;\n    } finally {\n      response.end();\n    }\n  };\n\n  read();\n}\n","import { ServerResponse } from 'node:http';\nimport { prepareOutgoingHttpHeaders } from '../util/prepare-outgoing-http-headers';\nimport { writeToServerResponse } from '../util/write-to-server-response';\nimport { createDataStream } from './create-data-stream';\nimport { DataStreamWriter } from './data-stream-writer';\n\nexport function pipeDataStreamToResponse(\n  response: ServerResponse,\n  {\n    status,\n    statusText,\n    headers,\n    execute,\n    onError,\n  }: ResponseInit & {\n    execute: (writer: DataStreamWriter) => Promise<void> | void;\n    onError?: (error: unknown) => string;\n  },\n): void {\n  writeToServerResponse({\n    response,\n    status,\n    statusText,\n    headers: prepareOutgoingHttpHeaders(headers, {\n      contentType: 'text/plain; charset=utf-8',\n      dataStreamVersion: 'v1',\n    }),\n    stream: createDataStream({ execute, onError }).pipeThrough(\n      new TextEncoderStream(),\n    ),\n  });\n}\n","import { AISDKError } from '@ai-sdk/provider';\n\nconst name = 'AI_InvalidArgumentError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\nexport class InvalidArgumentError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  readonly parameter: string;\n  readonly value: unknown;\n\n  constructor({\n    parameter,\n    value,\n    message,\n  }: {\n    parameter: string;\n    value: unknown;\n    message: string;\n  }) {\n    super({\n      name,\n      message: `Invalid argument for parameter ${parameter}: ${message}`,\n    });\n\n    this.parameter = parameter;\n    this.value = value;\n  }\n\n  static isInstance(error: unknown): error is InvalidArgumentError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","import { APICallError } from '@ai-sdk/provider';\nimport { delay, getErrorMessage, isAbortError } from '@ai-sdk/provider-utils';\nimport { RetryError } from './retry-error';\n\nexport type RetryFunction = <OUTPUT>(\n  fn: () => PromiseLike<OUTPUT>,\n) => PromiseLike<OUTPUT>;\n\n/**\nThe `retryWithExponentialBackoff` strategy retries a failed API call with an exponential backoff.\nYou can configure the maximum number of retries, the initial delay, and the backoff factor.\n */\nexport const retryWithExponentialBackoff =\n  ({\n    maxRetries = 2,\n    initialDelayInMs = 2000,\n    backoffFactor = 2,\n  } = {}): RetryFunction =>\n  async <OUTPUT>(f: () => PromiseLike<OUTPUT>) =>\n    _retryWithExponentialBackoff(f, {\n      maxRetries,\n      delayInMs: initialDelayInMs,\n      backoffFactor,\n    });\n\nasync function _retryWithExponentialBackoff<OUTPUT>(\n  f: () => PromiseLike<OUTPUT>,\n  {\n    maxRetries,\n    delayInMs,\n    backoffFactor,\n  }: { maxRetries: number; delayInMs: number; backoffFactor: number },\n  errors: unknown[] = [],\n): Promise<OUTPUT> {\n  try {\n    return await f();\n  } catch (error) {\n    if (isAbortError(error)) {\n      throw error; // don't retry when the request was aborted\n    }\n\n    if (maxRetries === 0) {\n      throw error; // don't wrap the error when retries are disabled\n    }\n\n    const errorMessage = getErrorMessage(error);\n    const newErrors = [...errors, error];\n    const tryNumber = newErrors.length;\n\n    if (tryNumber > maxRetries) {\n      throw new RetryError({\n        message: `Failed after ${tryNumber} attempts. Last error: ${errorMessage}`,\n        reason: 'maxRetriesExceeded',\n        errors: newErrors,\n      });\n    }\n\n    if (\n      error instanceof Error &&\n      APICallError.isInstance(error) &&\n      error.isRetryable === true &&\n      tryNumber <= maxRetries\n    ) {\n      await delay(delayInMs);\n      return _retryWithExponentialBackoff(\n        f,\n        { maxRetries, delayInMs: backoffFactor * delayInMs, backoffFactor },\n        newErrors,\n      );\n    }\n\n    if (tryNumber === 1) {\n      throw error; // don't wrap the error when a non-retryable error occurs on the first try\n    }\n\n    throw new RetryError({\n      message: `Failed after ${tryNumber} attempts with non-retryable error: '${errorMessage}'`,\n      reason: 'errorNotRetryable',\n      errors: newErrors,\n    });\n  }\n}\n","import { AISDKError } from '@ai-sdk/provider';\n\nconst name = 'AI_RetryError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\nexport type RetryErrorReason =\n  | 'maxRetriesExceeded'\n  | 'errorNotRetryable'\n  | 'abort';\n\nexport class RetryError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  // note: property order determines debugging output\n  readonly reason: RetryErrorReason;\n  readonly lastError: unknown;\n  readonly errors: Array<unknown>;\n\n  constructor({\n    message,\n    reason,\n    errors,\n  }: {\n    message: string;\n    reason: RetryErrorReason;\n    errors: Array<unknown>;\n  }) {\n    super({ name, message });\n\n    this.reason = reason;\n    this.errors = errors;\n\n    // separate our last error to make debugging via log easier:\n    this.lastError = errors[errors.length - 1];\n  }\n\n  static isInstance(error: unknown): error is RetryError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","import { InvalidArgumentError } from '../../errors/invalid-argument-error';\nimport {\n  RetryFunction,\n  retryWithExponentialBackoff,\n} from '../../util/retry-with-exponential-backoff';\n\n/**\n * Validate and prepare retries.\n */\nexport function prepareRetries({\n  maxRetries,\n}: {\n  maxRetries: number | undefined;\n}): {\n  maxRetries: number;\n  retry: RetryFunction;\n} {\n  if (maxRetries != null) {\n    if (!Number.isInteger(maxRetries)) {\n      throw new InvalidArgumentError({\n        parameter: 'maxRetries',\n        value: maxRetries,\n        message: 'maxRetries must be an integer',\n      });\n    }\n\n    if (maxRetries < 0) {\n      throw new InvalidArgumentError({\n        parameter: 'maxRetries',\n        value: maxRetries,\n        message: 'maxRetries must be >= 0',\n      });\n    }\n  }\n\n  const maxRetriesResult = maxRetries ?? 2;\n\n  return {\n    maxRetries: maxRetriesResult,\n    retry: retryWithExponentialBackoff({ maxRetries: maxRetriesResult }),\n  };\n}\n","import { TelemetrySettings } from './telemetry-settings';\n\nexport function assembleOperationName({\n  operationId,\n  telemetry,\n}: {\n  operationId: string;\n  telemetry?: TelemetrySettings;\n}) {\n  return {\n    // standardized operation and resource name:\n    'operation.name': `${operationId}${\n      telemetry?.functionId != null ? ` ${telemetry.functionId}` : ''\n    }`,\n    'resource.name': telemetry?.functionId,\n\n    // detailed, AI SDK specific data:\n    'ai.operationId': operationId,\n    'ai.telemetry.functionId': telemetry?.functionId,\n  };\n}\n","import { Attributes } from '@opentelemetry/api';\nimport { CallSettings } from '../prompt/call-settings';\nimport { TelemetrySettings } from './telemetry-settings';\n\nexport function getBaseTelemetryAttributes({\n  model,\n  settings,\n  telemetry,\n  headers,\n}: {\n  model: { modelId: string; provider: string };\n  settings: Omit<CallSettings, 'abortSignal' | 'headers'>;\n  telemetry: TelemetrySettings | undefined;\n  headers: Record<string, string | undefined> | undefined;\n}): Attributes {\n  return {\n    'ai.model.provider': model.provider,\n    'ai.model.id': model.modelId,\n\n    // settings:\n    ...Object.entries(settings).reduce((attributes, [key, value]) => {\n      attributes[`ai.settings.${key}`] = value;\n      return attributes;\n    }, {} as Attributes),\n\n    // add metadata as attributes:\n    ...Object.entries(telemetry?.metadata ?? {}).reduce(\n      (attributes, [key, value]) => {\n        attributes[`ai.telemetry.metadata.${key}`] = value;\n        return attributes;\n      },\n      {} as Attributes,\n    ),\n\n    // request headers\n    ...Object.entries(headers ?? {}).reduce((attributes, [key, value]) => {\n      if (value !== undefined) {\n        attributes[`ai.request.headers.${key}`] = value;\n      }\n      return attributes;\n    }, {} as Attributes),\n  };\n}\n","import { Tracer, trace } from '@opentelemetry/api';\nimport { noopTracer } from './noop-tracer';\n\nexport function getTracer({\n  isEnabled = false,\n  tracer,\n}: {\n  isEnabled?: boolean;\n  tracer?: Tracer;\n} = {}): Tracer {\n  if (!isEnabled) {\n    return noopTracer;\n  }\n\n  if (tracer) {\n    return tracer;\n  }\n\n  return trace.getTracer('ai');\n}\n","import { Span, SpanContext, Tracer } from '@opentelemetry/api';\n\n/**\n * Tracer implementation that does nothing (null object).\n */\nexport const noopTracer: Tracer = {\n  startSpan(): Span {\n    return noopSpan;\n  },\n\n  startActiveSpan<F extends (span: Span) => unknown>(\n    name: unknown,\n    arg1: unknown,\n    arg2?: unknown,\n    arg3?: F,\n  ): ReturnType<any> {\n    if (typeof arg1 === 'function') {\n      return arg1(noopSpan);\n    }\n    if (typeof arg2 === 'function') {\n      return arg2(noopSpan);\n    }\n    if (typeof arg3 === 'function') {\n      return arg3(noopSpan);\n    }\n  },\n};\n\nconst noopSpan: Span = {\n  spanContext() {\n    return noopSpanContext;\n  },\n  setAttribute() {\n    return this;\n  },\n  setAttributes() {\n    return this;\n  },\n  addEvent() {\n    return this;\n  },\n  addLink() {\n    return this;\n  },\n  addLinks() {\n    return this;\n  },\n  setStatus() {\n    return this;\n  },\n  updateName() {\n    return this;\n  },\n  end() {\n    return this;\n  },\n  isRecording() {\n    return false;\n  },\n  recordException() {\n    return this;\n  },\n};\n\nconst noopSpanContext: SpanContext = {\n  traceId: '',\n  spanId: '',\n  traceFlags: 0,\n};\n","import { Attributes, Span, Tracer, SpanStatusCode } from '@opentelemetry/api';\n\nexport function recordSpan<T>({\n  name,\n  tracer,\n  attributes,\n  fn,\n  endWhenDone = true,\n}: {\n  name: string;\n  tracer: Tracer;\n  attributes: Attributes;\n  fn: (span: Span) => Promise<T>;\n  endWhenDone?: boolean;\n}) {\n  return tracer.startActiveSpan(name, { attributes }, async span => {\n    try {\n      const result = await fn(span);\n\n      if (endWhenDone) {\n        span.end();\n      }\n\n      return result;\n    } catch (error) {\n      try {\n        if (error instanceof Error) {\n          span.recordException({\n            name: error.name,\n            message: error.message,\n            stack: error.stack,\n          });\n          span.setStatus({\n            code: SpanStatusCode.ERROR,\n            message: error.message,\n          });\n        } else {\n          span.setStatus({ code: SpanStatusCode.ERROR });\n        }\n      } finally {\n        // always stop the span when there is an error:\n        span.end();\n      }\n\n      throw error;\n    }\n  });\n}\n","import type { Attributes, AttributeValue } from '@opentelemetry/api';\nimport type { TelemetrySettings } from './telemetry-settings';\n\nexport function selectTelemetryAttributes({\n  telemetry,\n  attributes,\n}: {\n  telemetry?: TelemetrySettings;\n  attributes: {\n    [attributeKey: string]:\n      | AttributeValue\n      | { input: () => AttributeValue | undefined }\n      | { output: () => AttributeValue | undefined }\n      | undefined;\n  };\n}): Attributes {\n  // when telemetry is disabled, return an empty object to avoid serialization overhead:\n  if (telemetry?.isEnabled !== true) {\n    return {};\n  }\n\n  return Object.entries(attributes).reduce((attributes, [key, value]) => {\n    if (value === undefined) {\n      return attributes;\n    }\n\n    // input value, check if it should be recorded:\n    if (\n      typeof value === 'object' &&\n      'input' in value &&\n      typeof value.input === 'function'\n    ) {\n      // default to true:\n      if (telemetry?.recordInputs === false) {\n        return attributes;\n      }\n\n      const result = value.input();\n\n      return result === undefined\n        ? attributes\n        : { ...attributes, [key]: result };\n    }\n\n    // output value, check if it should be recorded:\n    if (\n      typeof value === 'object' &&\n      'output' in value &&\n      typeof value.output === 'function'\n    ) {\n      // default to true:\n      if (telemetry?.recordOutputs === false) {\n        return attributes;\n      }\n\n      const result = value.output();\n\n      return result === undefined\n        ? attributes\n        : { ...attributes, [key]: result };\n    }\n\n    // value is an attribute value already:\n    return { ...attributes, [key]: value };\n  }, {});\n}\n","import { prepareRetries } from '../prompt/prepare-retries';\nimport { assembleOperationName } from '../telemetry/assemble-operation-name';\nimport { getBaseTelemetryAttributes } from '../telemetry/get-base-telemetry-attributes';\nimport { getTracer } from '../telemetry/get-tracer';\nimport { recordSpan } from '../telemetry/record-span';\nimport { selectTelemetryAttributes } from '../telemetry/select-telemetry-attributes';\nimport { TelemetrySettings } from '../telemetry/telemetry-settings';\nimport { EmbeddingModel } from '../types';\nimport { EmbedResult } from './embed-result';\n\n/**\nEmbed a value using an embedding model. The type of the value is defined by the embedding model.\n\n@param model - The embedding model to use.\n@param value - The value that should be embedded.\n\n@param maxRetries - Maximum number of retries. Set to 0 to disable retries. Default: 2.\n@param abortSignal - An optional abort signal that can be used to cancel the call.\n@param headers - Additional HTTP headers to be sent with the request. Only applicable for HTTP-based providers.\n\n@returns A result object that contains the embedding, the value, and additional information.\n */\nexport async function embed<VALUE>({\n  model,\n  value,\n  maxRetries: maxRetriesArg,\n  abortSignal,\n  headers,\n  experimental_telemetry: telemetry,\n}: {\n  /**\nThe embedding model to use.\n     */\n  model: EmbeddingModel<VALUE>;\n\n  /**\nThe value that should be embedded.\n   */\n  value: VALUE;\n\n  /**\nMaximum number of retries per embedding model call. Set to 0 to disable retries.\n\n@default 2\n   */\n  maxRetries?: number;\n\n  /**\nAbort signal.\n */\n  abortSignal?: AbortSignal;\n\n  /**\nAdditional headers to include in the request.\nOnly applicable for HTTP-based providers.\n */\n  headers?: Record<string, string>;\n\n  /**\n   * Optional telemetry configuration (experimental).\n   */\n  experimental_telemetry?: TelemetrySettings;\n}): Promise<EmbedResult<VALUE>> {\n  const { maxRetries, retry } = prepareRetries({ maxRetries: maxRetriesArg });\n\n  const baseTelemetryAttributes = getBaseTelemetryAttributes({\n    model,\n    telemetry,\n    headers,\n    settings: { maxRetries },\n  });\n\n  const tracer = getTracer(telemetry);\n\n  return recordSpan({\n    name: 'ai.embed',\n    attributes: selectTelemetryAttributes({\n      telemetry,\n      attributes: {\n        ...assembleOperationName({ operationId: 'ai.embed', telemetry }),\n        ...baseTelemetryAttributes,\n        'ai.value': { input: () => JSON.stringify(value) },\n      },\n    }),\n    tracer,\n    fn: async span => {\n      const { embedding, usage, rawResponse } = await retry(() =>\n        // nested spans to align with the embedMany telemetry data:\n        recordSpan({\n          name: 'ai.embed.doEmbed',\n          attributes: selectTelemetryAttributes({\n            telemetry,\n            attributes: {\n              ...assembleOperationName({\n                operationId: 'ai.embed.doEmbed',\n                telemetry,\n              }),\n              ...baseTelemetryAttributes,\n              // specific settings that only make sense on the outer level:\n              'ai.values': { input: () => [JSON.stringify(value)] },\n            },\n          }),\n          tracer,\n          fn: async doEmbedSpan => {\n            const modelResponse = await model.doEmbed({\n              values: [value],\n              abortSignal,\n              headers,\n            });\n\n            const embedding = modelResponse.embeddings[0];\n            const usage = modelResponse.usage ?? { tokens: NaN };\n\n            doEmbedSpan.setAttributes(\n              selectTelemetryAttributes({\n                telemetry,\n                attributes: {\n                  'ai.embeddings': {\n                    output: () =>\n                      modelResponse.embeddings.map(embedding =>\n                        JSON.stringify(embedding),\n                      ),\n                  },\n                  'ai.usage.tokens': usage.tokens,\n                },\n              }),\n            );\n\n            return {\n              embedding,\n              usage,\n              rawResponse: modelResponse.rawResponse,\n            };\n          },\n        }),\n      );\n\n      span.setAttributes(\n        selectTelemetryAttributes({\n          telemetry,\n          attributes: {\n            'ai.embedding': { output: () => JSON.stringify(embedding) },\n            'ai.usage.tokens': usage.tokens,\n          },\n        }),\n      );\n\n      return new DefaultEmbedResult({ value, embedding, usage, rawResponse });\n    },\n  });\n}\n\nclass DefaultEmbedResult<VALUE> implements EmbedResult<VALUE> {\n  readonly value: EmbedResult<VALUE>['value'];\n  readonly embedding: EmbedResult<VALUE>['embedding'];\n  readonly usage: EmbedResult<VALUE>['usage'];\n  readonly rawResponse: EmbedResult<VALUE>['rawResponse'];\n\n  constructor(options: {\n    value: EmbedResult<VALUE>['value'];\n    embedding: EmbedResult<VALUE>['embedding'];\n    usage: EmbedResult<VALUE>['usage'];\n    rawResponse?: EmbedResult<VALUE>['rawResponse'];\n  }) {\n    this.value = options.value;\n    this.embedding = options.embedding;\n    this.usage = options.usage;\n    this.rawResponse = options.rawResponse;\n  }\n}\n","/**\n * Splits an array into chunks of a specified size.\n *\n * @template T - The type of elements in the array.\n * @param {T[]} array - The array to split.\n * @param {number} chunkSize - The size of each chunk.\n * @returns {T[][]} - A new array containing the chunks.\n */\nexport function splitArray<T>(array: T[], chunkSize: number): T[][] {\n  if (chunkSize <= 0) {\n    throw new Error('chunkSize must be greater than 0');\n  }\n\n  const result = [];\n  for (let i = 0; i < array.length; i += chunkSize) {\n    result.push(array.slice(i, i + chunkSize));\n  }\n\n  return result;\n}\n","import { prepareRetries } from '../prompt/prepare-retries';\nimport { assembleOperationName } from '../telemetry/assemble-operation-name';\nimport { getBaseTelemetryAttributes } from '../telemetry/get-base-telemetry-attributes';\nimport { getTracer } from '../telemetry/get-tracer';\nimport { recordSpan } from '../telemetry/record-span';\nimport { selectTelemetryAttributes } from '../telemetry/select-telemetry-attributes';\nimport { TelemetrySettings } from '../telemetry/telemetry-settings';\nimport { Embedding, EmbeddingModel } from '../types';\nimport { splitArray } from '../util/split-array';\nimport { EmbedManyResult } from './embed-many-result';\n\n/**\nEmbed several values using an embedding model. The type of the value is defined\nby the embedding model.\n\n`embedMany` automatically splits large requests into smaller chunks if the model\nhas a limit on how many embeddings can be generated in a single call.\n\n@param model - The embedding model to use.\n@param values - The values that should be embedded.\n\n@param maxRetries - Maximum number of retries. Set to 0 to disable retries. Default: 2.\n@param abortSignal - An optional abort signal that can be used to cancel the call.\n@param headers - Additional HTTP headers to be sent with the request. Only applicable for HTTP-based providers.\n\n@returns A result object that contains the embeddings, the value, and additional information.\n */\nexport async function embedMany<VALUE>({\n  model,\n  values,\n  maxRetries: maxRetriesArg,\n  abortSignal,\n  headers,\n  experimental_telemetry: telemetry,\n}: {\n  /**\nThe embedding model to use.\n     */\n  model: EmbeddingModel<VALUE>;\n\n  /**\nThe values that should be embedded.\n   */\n  values: Array<VALUE>;\n\n  /**\nMaximum number of retries per embedding model call. Set to 0 to disable retries.\n\n@default 2\n   */\n  maxRetries?: number;\n\n  /**\nAbort signal.\n */\n  abortSignal?: AbortSignal;\n\n  /**\nAdditional headers to include in the request.\nOnly applicable for HTTP-based providers.\n */\n  headers?: Record<string, string>;\n\n  /**\n   * Optional telemetry configuration (experimental).\n   */\n  experimental_telemetry?: TelemetrySettings;\n}): Promise<EmbedManyResult<VALUE>> {\n  const { maxRetries, retry } = prepareRetries({ maxRetries: maxRetriesArg });\n\n  const baseTelemetryAttributes = getBaseTelemetryAttributes({\n    model,\n    telemetry,\n    headers,\n    settings: { maxRetries },\n  });\n\n  const tracer = getTracer(telemetry);\n\n  return recordSpan({\n    name: 'ai.embedMany',\n    attributes: selectTelemetryAttributes({\n      telemetry,\n      attributes: {\n        ...assembleOperationName({ operationId: 'ai.embedMany', telemetry }),\n        ...baseTelemetryAttributes,\n        // specific settings that only make sense on the outer level:\n        'ai.values': {\n          input: () => values.map(value => JSON.stringify(value)),\n        },\n      },\n    }),\n    tracer,\n    fn: async span => {\n      const maxEmbeddingsPerCall = model.maxEmbeddingsPerCall;\n\n      // the model has not specified limits on\n      // how many embeddings can be generated in a single call\n      if (maxEmbeddingsPerCall == null) {\n        const { embeddings, usage } = await retry(() => {\n          // nested spans to align with the embedMany telemetry data:\n          return recordSpan({\n            name: 'ai.embedMany.doEmbed',\n            attributes: selectTelemetryAttributes({\n              telemetry,\n              attributes: {\n                ...assembleOperationName({\n                  operationId: 'ai.embedMany.doEmbed',\n                  telemetry,\n                }),\n                ...baseTelemetryAttributes,\n                // specific settings that only make sense on the outer level:\n                'ai.values': {\n                  input: () => values.map(value => JSON.stringify(value)),\n                },\n              },\n            }),\n            tracer,\n            fn: async doEmbedSpan => {\n              const modelResponse = await model.doEmbed({\n                values,\n                abortSignal,\n                headers,\n              });\n\n              const embeddings = modelResponse.embeddings;\n              const usage = modelResponse.usage ?? { tokens: NaN };\n\n              doEmbedSpan.setAttributes(\n                selectTelemetryAttributes({\n                  telemetry,\n                  attributes: {\n                    'ai.embeddings': {\n                      output: () =>\n                        embeddings.map(embedding => JSON.stringify(embedding)),\n                    },\n                    'ai.usage.tokens': usage.tokens,\n                  },\n                }),\n              );\n\n              return { embeddings, usage };\n            },\n          });\n        });\n\n        span.setAttributes(\n          selectTelemetryAttributes({\n            telemetry,\n            attributes: {\n              'ai.embeddings': {\n                output: () =>\n                  embeddings.map(embedding => JSON.stringify(embedding)),\n              },\n              'ai.usage.tokens': usage.tokens,\n            },\n          }),\n        );\n\n        return new DefaultEmbedManyResult({ values, embeddings, usage });\n      }\n\n      // split the values into chunks that are small enough for the model:\n      const valueChunks = splitArray(values, maxEmbeddingsPerCall);\n\n      // serially embed the chunks:\n      const embeddings: Array<Embedding> = [];\n      let tokens = 0;\n\n      for (const chunk of valueChunks) {\n        const { embeddings: responseEmbeddings, usage } = await retry(() => {\n          // nested spans to align with the embedMany telemetry data:\n          return recordSpan({\n            name: 'ai.embedMany.doEmbed',\n            attributes: selectTelemetryAttributes({\n              telemetry,\n              attributes: {\n                ...assembleOperationName({\n                  operationId: 'ai.embedMany.doEmbed',\n                  telemetry,\n                }),\n                ...baseTelemetryAttributes,\n                // specific settings that only make sense on the outer level:\n                'ai.values': {\n                  input: () => chunk.map(value => JSON.stringify(value)),\n                },\n              },\n            }),\n            tracer,\n            fn: async doEmbedSpan => {\n              const modelResponse = await model.doEmbed({\n                values: chunk,\n                abortSignal,\n                headers,\n              });\n\n              const embeddings = modelResponse.embeddings;\n              const usage = modelResponse.usage ?? { tokens: NaN };\n\n              doEmbedSpan.setAttributes(\n                selectTelemetryAttributes({\n                  telemetry,\n                  attributes: {\n                    'ai.embeddings': {\n                      output: () =>\n                        embeddings.map(embedding => JSON.stringify(embedding)),\n                    },\n                    'ai.usage.tokens': usage.tokens,\n                  },\n                }),\n              );\n\n              return { embeddings, usage };\n            },\n          });\n        });\n\n        embeddings.push(...responseEmbeddings);\n        tokens += usage.tokens;\n      }\n\n      span.setAttributes(\n        selectTelemetryAttributes({\n          telemetry,\n          attributes: {\n            'ai.embeddings': {\n              output: () =>\n                embeddings.map(embedding => JSON.stringify(embedding)),\n            },\n            'ai.usage.tokens': tokens,\n          },\n        }),\n      );\n\n      return new DefaultEmbedManyResult({\n        values,\n        embeddings,\n        usage: { tokens },\n      });\n    },\n  });\n}\n\nclass DefaultEmbedManyResult<VALUE> implements EmbedManyResult<VALUE> {\n  readonly values: EmbedManyResult<VALUE>['values'];\n  readonly embeddings: EmbedManyResult<VALUE>['embeddings'];\n  readonly usage: EmbedManyResult<VALUE>['usage'];\n\n  constructor(options: {\n    values: EmbedManyResult<VALUE>['values'];\n    embeddings: EmbedManyResult<VALUE>['embeddings'];\n    usage: EmbedManyResult<VALUE>['usage'];\n  }) {\n    this.values = options.values;\n    this.embeddings = options.embeddings;\n    this.usage = options.usage;\n  }\n}\n","import { AISDKError } from '@ai-sdk/provider';\nimport { ImageModelResponseMetadata } from '../core/types/image-model-response-metadata';\n\nconst name = 'AI_NoImageGeneratedError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\n/**\nThrown when no image could be generated. This can have multiple causes:\n\n- The model failed to generate a response.\n- The model generated a response that could not be parsed.\n */\nexport class NoImageGeneratedError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  /**\nThe response metadata for each call.\n   */\n  readonly responses: Array<ImageModelResponseMetadata> | undefined;\n\n  constructor({\n    message = 'No image generated.',\n    cause,\n    responses,\n  }: {\n    message?: string;\n    cause?: Error;\n    responses?: Array<ImageModelResponseMetadata>;\n  }) {\n    super({ name, message, cause });\n\n    this.responses = responses;\n  }\n\n  static isInstance(error: unknown): error is NoImageGeneratedError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","import {\n  convertBase64ToUint8Array,\n  convertUint8ArrayToBase64,\n} from '@ai-sdk/provider-utils';\n\n/**\n * A generated file.\n */\nexport interface GeneratedFile {\n  /**\nFile as a base64 encoded string.\n     */\n  readonly base64: string;\n\n  /**\nFile as a Uint8Array.\n     */\n  readonly uint8Array: Uint8Array;\n\n  /**\nMIME type of the file\n   */\n  readonly mimeType: string;\n}\n\nexport class DefaultGeneratedFile implements GeneratedFile {\n  private base64Data: string | undefined;\n  private uint8ArrayData: Uint8Array | undefined;\n\n  readonly mimeType: string;\n\n  constructor({\n    data,\n    mimeType,\n  }: {\n    data: string | Uint8Array;\n    mimeType: string;\n  }) {\n    const isUint8Array = data instanceof Uint8Array;\n    this.base64Data = isUint8Array ? undefined : data;\n    this.uint8ArrayData = isUint8Array ? data : undefined;\n    this.mimeType = mimeType;\n  }\n\n  // lazy conversion with caching to avoid unnecessary conversion overhead:\n  get base64() {\n    if (this.base64Data == null) {\n      this.base64Data = convertUint8ArrayToBase64(this.uint8ArrayData!);\n    }\n    return this.base64Data;\n  }\n\n  // lazy conversion with caching to avoid unnecessary conversion overhead:\n  get uint8Array() {\n    if (this.uint8ArrayData == null) {\n      this.uint8ArrayData = convertBase64ToUint8Array(this.base64Data!);\n    }\n    return this.uint8ArrayData;\n  }\n}\n\nexport class DefaultGeneratedFileWithType extends DefaultGeneratedFile {\n  readonly type = 'file';\n\n  constructor(options: { data: string | Uint8Array; mimeType: string }) {\n    super(options);\n  }\n}\n","import { convertBase64ToUint8Array } from '@ai-sdk/provider-utils';\n\nexport const imageMimeTypeSignatures = [\n  {\n    mimeType: 'image/gif' as const,\n    bytesPrefix: [0x47, 0x49, 0x46],\n    base64Prefix: 'R0lG',\n  },\n  {\n    mimeType: 'image/png' as const,\n    bytesPrefix: [0x89, 0x50, 0x4e, 0x47],\n    base64Prefix: 'iVBORw',\n  },\n  {\n    mimeType: 'image/jpeg' as const,\n    bytesPrefix: [0xff, 0xd8],\n    base64Prefix: '/9j/',\n  },\n  {\n    mimeType: 'image/webp' as const,\n    bytesPrefix: [0x52, 0x49, 0x46, 0x46],\n    base64Prefix: 'UklGRg',\n  },\n  {\n    mimeType: 'image/bmp' as const,\n    bytesPrefix: [0x42, 0x4d],\n    base64Prefix: 'Qk',\n  },\n  {\n    mimeType: 'image/tiff' as const,\n    bytesPrefix: [0x49, 0x49, 0x2a, 0x00],\n    base64Prefix: 'SUkqAA',\n  },\n  {\n    mimeType: 'image/tiff' as const,\n    bytesPrefix: [0x4d, 0x4d, 0x00, 0x2a],\n    base64Prefix: 'TU0AKg',\n  },\n  {\n    mimeType: 'image/avif' as const,\n    bytesPrefix: [\n      0x00, 0x00, 0x00, 0x20, 0x66, 0x74, 0x79, 0x70, 0x61, 0x76, 0x69, 0x66,\n    ],\n    base64Prefix: 'AAAAIGZ0eXBhdmlm',\n  },\n  {\n    mimeType: 'image/heic' as const,\n    bytesPrefix: [\n      0x00, 0x00, 0x00, 0x20, 0x66, 0x74, 0x79, 0x70, 0x68, 0x65, 0x69, 0x63,\n    ],\n    base64Prefix: 'AAAAIGZ0eXBoZWlj',\n  },\n] as const;\n\nexport const audioMimeTypeSignatures = [\n  {\n    mimeType: 'audio/mpeg' as const,\n    bytesPrefix: [0xff, 0xfb],\n    base64Prefix: '//s=',\n  },\n  {\n    mimeType: 'audio/wav' as const,\n    bytesPrefix: [0x52, 0x49, 0x46, 0x46],\n    base64Prefix: 'UklGR',\n  },\n  {\n    mimeType: 'audio/ogg' as const,\n    bytesPrefix: [0x4f, 0x67, 0x67, 0x53],\n    base64Prefix: 'T2dnUw',\n  },\n  {\n    mimeType: 'audio/flac' as const,\n    bytesPrefix: [0x66, 0x4c, 0x61, 0x43],\n    base64Prefix: 'ZkxhQw',\n  },\n  {\n    mimeType: 'audio/aac' as const,\n    bytesPrefix: [0x40, 0x15, 0x00, 0x00],\n    base64Prefix: 'QBUA',\n  },\n  {\n    mimeType: 'audio/mp4' as const,\n    bytesPrefix: [0x66, 0x74, 0x79, 0x70],\n    base64Prefix: 'ZnR5cA',\n  },\n] as const;\n\nconst stripID3 = (data: Uint8Array | string) => {\n  const bytes =\n    typeof data === 'string' ? convertBase64ToUint8Array(data) : data;\n  const id3Size =\n    ((bytes[6] & 0x7f) << 21) |\n    ((bytes[7] & 0x7f) << 14) |\n    ((bytes[8] & 0x7f) << 7) |\n    (bytes[9] & 0x7f);\n\n  // The raw MP3 starts here\n  return bytes.slice(id3Size + 10);\n};\n\nfunction stripID3TagsIfPresent(data: Uint8Array | string): Uint8Array | string {\n  const hasId3 =\n    (typeof data === 'string' && data.startsWith('SUQz')) ||\n    (typeof data !== 'string' &&\n      data.length > 10 &&\n      data[0] === 0x49 && // 'I'\n      data[1] === 0x44 && // 'D'\n      data[2] === 0x33); // '3'\n\n  return hasId3 ? stripID3(data) : data;\n}\n\nexport function detectMimeType({\n  data,\n  signatures,\n}: {\n  data: Uint8Array | string;\n  signatures: typeof audioMimeTypeSignatures | typeof imageMimeTypeSignatures;\n}): (typeof signatures)[number]['mimeType'] | undefined {\n  const processedData = stripID3TagsIfPresent(data);\n\n  for (const signature of signatures) {\n    if (\n      typeof processedData === 'string'\n        ? processedData.startsWith(signature.base64Prefix)\n        : processedData.length >= signature.bytesPrefix.length &&\n          signature.bytesPrefix.every(\n            (byte, index) => processedData[index] === byte,\n          )\n    ) {\n      return signature.mimeType;\n    }\n  }\n\n  return undefined;\n}\n","import { AISDKError, ImageModelV1, JSONValue } from '@ai-sdk/provider';\nimport { NoImageGeneratedError } from '../../errors/no-image-generated-error';\nimport {\n  DefaultGeneratedFile,\n  GeneratedFile,\n} from '../generate-text/generated-file';\nimport { prepareRetries } from '../prompt/prepare-retries';\nimport { ImageGenerationWarning } from '../types/image-model';\nimport { ImageModelResponseMetadata } from '../types/image-model-response-metadata';\nimport { GenerateImageResult } from './generate-image-result';\nimport {\n  detectMimeType,\n  imageMimeTypeSignatures,\n} from '../util/detect-mimetype';\n\n/**\nGenerates images using an image model.\n\n@param model - The image model to use.\n@param prompt - The prompt that should be used to generate the image.\n@param n - Number of images to generate. Default: 1.\n@param size - Size of the images to generate. Must have the format `{width}x{height}`.\n@param aspectRatio - Aspect ratio of the images to generate. Must have the format `{width}:{height}`.\n@param seed - Seed for the image generation.\n@param providerOptions - Additional provider-specific options that are passed through to the provider\nas body parameters.\n@param maxRetries - Maximum number of retries. Set to 0 to disable retries. Default: 2.\n@param abortSignal - An optional abort signal that can be used to cancel the call.\n@param headers - Additional HTTP headers to be sent with the request. Only applicable for HTTP-based providers.\n\n@returns A result object that contains the generated images.\n */\nexport async function generateImage({\n  model,\n  prompt,\n  n = 1,\n  size,\n  aspectRatio,\n  seed,\n  providerOptions,\n  maxRetries: maxRetriesArg,\n  abortSignal,\n  headers,\n}: {\n  /**\nThe image model to use.\n     */\n  model: ImageModelV1;\n\n  /**\nThe prompt that should be used to generate the image.\n   */\n  prompt: string;\n\n  /**\nNumber of images to generate.\n   */\n  n?: number;\n\n  /**\nSize of the images to generate. Must have the format `{width}x{height}`. If not provided, the default size will be used.\n   */\n  size?: `${number}x${number}`;\n\n  /**\nAspect ratio of the images to generate. Must have the format `{width}:{height}`. If not provided, the default aspect ratio will be used.\n   */\n  aspectRatio?: `${number}:${number}`;\n\n  /**\nSeed for the image generation. If not provided, the default seed will be used.\n   */\n  seed?: number;\n\n  /**\nAdditional provider-specific options that are passed through to the provider\nas body parameters.\n\nThe outer record is keyed by the provider name, and the inner\nrecord is keyed by the provider-specific metadata key.\n```ts\n{\n  \"openai\": {\n    \"style\": \"vivid\"\n  }\n}\n```\n     */\n  providerOptions?: Record<string, Record<string, JSONValue>>;\n\n  /**\nMaximum number of retries per embedding model call. Set to 0 to disable retries.\n\n@default 2\n   */\n  maxRetries?: number;\n\n  /**\nAbort signal.\n */\n  abortSignal?: AbortSignal;\n\n  /**\nAdditional headers to include in the request.\nOnly applicable for HTTP-based providers.\n */\n  headers?: Record<string, string>;\n}): Promise<GenerateImageResult> {\n  const { retry } = prepareRetries({ maxRetries: maxRetriesArg });\n\n  // default to 1 if the model has not specified limits on\n  // how many images can be generated in a single call\n  const maxImagesPerCall = model.maxImagesPerCall ?? 1;\n\n  // parallelize calls to the model:\n  const callCount = Math.ceil(n / maxImagesPerCall);\n  const callImageCounts = Array.from({ length: callCount }, (_, i) => {\n    if (i < callCount - 1) {\n      return maxImagesPerCall;\n    }\n\n    const remainder = n % maxImagesPerCall;\n    return remainder === 0 ? maxImagesPerCall : remainder;\n  });\n  const results = await Promise.all(\n    callImageCounts.map(async callImageCount =>\n      retry(() =>\n        model.doGenerate({\n          prompt,\n          n: callImageCount,\n          abortSignal,\n          headers,\n          size,\n          aspectRatio,\n          seed,\n          providerOptions: providerOptions ?? {},\n        }),\n      ),\n    ),\n  );\n\n  // collect result images, warnings, and response metadata\n  const images: Array<DefaultGeneratedFile> = [];\n  const warnings: Array<ImageGenerationWarning> = [];\n  const responses: Array<ImageModelResponseMetadata> = [];\n  for (const result of results) {\n    images.push(\n      ...result.images.map(\n        image =>\n          new DefaultGeneratedFile({\n            data: image,\n            mimeType:\n              detectMimeType({\n                data: image,\n                signatures: imageMimeTypeSignatures,\n              }) ?? 'image/png',\n          }),\n      ),\n    );\n    warnings.push(...result.warnings);\n    responses.push(result.response);\n  }\n\n  if (!images.length) {\n    throw new NoImageGeneratedError({ responses });\n  }\n\n  return new DefaultGenerateImageResult({ images, warnings, responses });\n}\n\nclass DefaultGenerateImageResult implements GenerateImageResult {\n  readonly images: Array<GeneratedFile>;\n  readonly warnings: Array<ImageGenerationWarning>;\n  readonly responses: Array<ImageModelResponseMetadata>;\n\n  constructor(options: {\n    images: Array<GeneratedFile>;\n    warnings: Array<ImageGenerationWarning>;\n    responses: Array<ImageModelResponseMetadata>;\n  }) {\n    this.images = options.images;\n    this.warnings = options.warnings;\n    this.responses = options.responses;\n  }\n\n  get image() {\n    return this.images[0];\n  }\n}\n","import {\n  JSONParseError,\n  JSONValue,\n  TypeValidationError,\n} from '@ai-sdk/provider';\nimport { createIdGenerator, safeParseJSON } from '@ai-sdk/provider-utils';\nimport { Schema } from '@ai-sdk/ui-utils';\nimport { z } from 'zod';\nimport { NoObjectGeneratedError } from '../../errors/no-object-generated-error';\nimport { CallSettings } from '../prompt/call-settings';\nimport { convertToLanguageModelPrompt } from '../prompt/convert-to-language-model-prompt';\nimport { prepareCallSettings } from '../prompt/prepare-call-settings';\nimport { prepareRetries } from '../prompt/prepare-retries';\nimport { Prompt } from '../prompt/prompt';\nimport { standardizePrompt } from '../prompt/standardize-prompt';\nimport { assembleOperationName } from '../telemetry/assemble-operation-name';\nimport { getBaseTelemetryAttributes } from '../telemetry/get-base-telemetry-attributes';\nimport { getTracer } from '../telemetry/get-tracer';\nimport { recordSpan } from '../telemetry/record-span';\nimport { selectTelemetryAttributes } from '../telemetry/select-telemetry-attributes';\nimport { TelemetrySettings } from '../telemetry/telemetry-settings';\nimport {\n  CallWarning,\n  FinishReason,\n  LanguageModel,\n  LogProbs,\n  ProviderMetadata,\n} from '../types';\nimport { LanguageModelRequestMetadata } from '../types/language-model-request-metadata';\nimport { LanguageModelResponseMetadata } from '../types/language-model-response-metadata';\nimport { ProviderOptions } from '../types/provider-metadata';\nimport { calculateLanguageModelUsage } from '../types/usage';\nimport { prepareResponseHeaders } from '../util/prepare-response-headers';\nimport { GenerateObjectResult } from './generate-object-result';\nimport { injectJsonInstruction } from './inject-json-instruction';\nimport { getOutputStrategy } from './output-strategy';\nimport { validateObjectGenerationInput } from './validate-object-generation-input';\nimport { stringifyForTelemetry } from '../prompt/stringify-for-telemetry';\n\nconst originalGenerateId = createIdGenerator({ prefix: 'aiobj', size: 24 });\n\n/**\nA function that attempts to repair the raw output of the mode\nto enable JSON parsing.\n\nShould return the repaired text or null if the text cannot be repaired.\n     */\nexport type RepairTextFunction = (options: {\n  text: string;\n  error: JSONParseError | TypeValidationError;\n}) => Promise<string | null>;\n\n/**\nGenerate a structured, typed object for a given prompt and schema using a language model.\n\nThis function does not stream the output. If you want to stream the output, use `streamObject` instead.\n\n@returns\nA result object that contains the generated object, the finish reason, the token usage, and additional information.\n */\nexport async function generateObject<OBJECT>(\n  options: Omit<CallSettings, 'stopSequences'> &\n    Prompt & {\n      output?: 'object' | undefined;\n\n      /**\nThe language model to use.\n     */\n      model: LanguageModel;\n\n      /**\nThe schema of the object that the model should generate.\n     */\n      schema: z.Schema<OBJECT, z.ZodTypeDef, any> | Schema<OBJECT>;\n\n      /**\nOptional name of the output that should be generated.\nUsed by some providers for additional LLM guidance, e.g.\nvia tool or schema name.\n     */\n      schemaName?: string;\n\n      /**\nOptional description of the output that should be generated.\nUsed by some providers for additional LLM guidance, e.g.\nvia tool or schema description.\n     */\n      schemaDescription?: string;\n\n      /**\nThe mode to use for object generation.\n\nThe schema is converted into a JSON schema and used in one of the following ways\n\n- 'auto': The provider will choose the best mode for the model.\n- 'tool': A tool with the JSON schema as parameters is provided and the provider is instructed to use it.\n- 'json': The JSON schema and an instruction are injected into the prompt. If the provider supports JSON mode, it is enabled. If the provider supports JSON grammars, the grammar is used.\n\nPlease note that most providers do not support all modes.\n\nDefault and recommended: 'auto' (best mode for the model).\n     */\n      mode?: 'auto' | 'json' | 'tool';\n\n      /**\nA function that attempts to repair the raw output of the mode\nto enable JSON parsing.\n     */\n      experimental_repairText?: RepairTextFunction;\n\n      /**\nOptional telemetry configuration (experimental).\n       */\n\n      experimental_telemetry?: TelemetrySettings;\n\n      /**\nAdditional provider-specific options. They are passed through\nto the provider from the AI SDK and enable provider-specific\nfunctionality that can be fully encapsulated in the provider.\n */\n      providerOptions?: ProviderOptions;\n\n      /**\n@deprecated Use `providerOptions` instead.\n*/\n      experimental_providerMetadata?: ProviderMetadata;\n\n      /**\n       * Internal. For test use only. May change without notice.\n       */\n      _internal?: {\n        generateId?: () => string;\n        currentDate?: () => Date;\n      };\n    },\n): Promise<GenerateObjectResult<OBJECT>>;\n/**\nGenerate an array with structured, typed elements for a given prompt and element schema using a language model.\n\nThis function does not stream the output. If you want to stream the output, use `streamObject` instead.\n\n@return\nA result object that contains the generated object, the finish reason, the token usage, and additional information.\n */\nexport async function generateObject<ELEMENT>(\n  options: Omit<CallSettings, 'stopSequences'> &\n    Prompt & {\n      output: 'array';\n\n      /**\nThe language model to use.\n     */\n      model: LanguageModel;\n\n      /**\nThe element schema of the array that the model should generate.\n */\n      schema: z.Schema<ELEMENT, z.ZodTypeDef, any> | Schema<ELEMENT>;\n\n      /**\nOptional name of the array that should be generated.\nUsed by some providers for additional LLM guidance, e.g.\nvia tool or schema name.\n     */\n      schemaName?: string;\n\n      /**\nOptional description of the array that should be generated.\nUsed by some providers for additional LLM guidance, e.g.\nvia tool or schema description.\n */\n      schemaDescription?: string;\n\n      /**\nThe mode to use for object generation.\n\nThe schema is converted into a JSON schema and used in one of the following ways\n\n- 'auto': The provider will choose the best mode for the model.\n- 'tool': A tool with the JSON schema as parameters is provided and the provider is instructed to use it.\n- 'json': The JSON schema and an instruction are injected into the prompt. If the provider supports JSON mode, it is enabled. If the provider supports JSON grammars, the grammar is used.\n\nPlease note that most providers do not support all modes.\n\nDefault and recommended: 'auto' (best mode for the model).\n     */\n      mode?: 'auto' | 'json' | 'tool';\n\n      /**\nA function that attempts to repair the raw output of the mode\nto enable JSON parsing.\n     */\n      experimental_repairText?: RepairTextFunction;\n\n      /**\nOptional telemetry configuration (experimental).\n     */\n      experimental_telemetry?: TelemetrySettings;\n\n      /**\nAdditional provider-specific options. They are passed through\nto the provider from the AI SDK and enable provider-specific\nfunctionality that can be fully encapsulated in the provider.\n */\n      providerOptions?: ProviderOptions;\n\n      /**\n@deprecated Use `providerOptions` instead.\n*/\n      experimental_providerMetadata?: ProviderMetadata;\n\n      /**\n       * Internal. For test use only. May change without notice.\n       */\n      _internal?: {\n        generateId?: () => string;\n        currentDate?: () => Date;\n      };\n    },\n): Promise<GenerateObjectResult<Array<ELEMENT>>>;\n/**\nGenerate a value from an enum (limited list of string values) using a language model.\n\nThis function does not stream the output.\n\n@return\nA result object that contains the generated value, the finish reason, the token usage, and additional information.\n */\nexport async function generateObject<ENUM extends string>(\n  options: Omit<CallSettings, 'stopSequences'> &\n    Prompt & {\n      output: 'enum';\n\n      /**\nThe language model to use.\n     */\n      model: LanguageModel;\n\n      /**\nThe enum values that the model should use.\n     */\n      enum: Array<ENUM>;\n\n      /**\nThe mode to use for object generation.\n\nThe schema is converted into a JSON schema and used in one of the following ways\n\n- 'auto': The provider will choose the best mode for the model.\n- 'tool': A tool with the JSON schema as parameters is provided and the provider is instructed to use it.\n- 'json': The JSON schema and an instruction are injected into the prompt. If the provider supports JSON mode, it is enabled. If the provider supports JSON grammars, the grammar is used.\n\nPlease note that most providers do not support all modes.\n\nDefault and recommended: 'auto' (best mode for the model).\n     */\n      mode?: 'auto' | 'json' | 'tool';\n\n      /**\nA function that attempts to repair the raw output of the mode\nto enable JSON parsing.\n     */\n      experimental_repairText?: RepairTextFunction;\n\n      /**\nOptional telemetry configuration (experimental).\n     */\n      experimental_telemetry?: TelemetrySettings;\n\n      /**\nAdditional provider-specific options. They are passed through\nto the provider from the AI SDK and enable provider-specific\nfunctionality that can be fully encapsulated in the provider.\n */\n      providerOptions?: ProviderOptions;\n\n      /**\n@deprecated Use `providerOptions` instead.\n*/\n      experimental_providerMetadata?: ProviderMetadata;\n\n      /**\n       * Internal. For test use only. May change without notice.\n       */\n      _internal?: {\n        generateId?: () => string;\n        currentDate?: () => Date;\n      };\n    },\n): Promise<GenerateObjectResult<ENUM>>;\n/**\nGenerate JSON with any schema for a given prompt using a language model.\n\nThis function does not stream the output. If you want to stream the output, use `streamObject` instead.\n\n@returns\nA result object that contains the generated object, the finish reason, the token usage, and additional information.\n */\nexport async function generateObject(\n  options: Omit<CallSettings, 'stopSequences'> &\n    Prompt & {\n      output: 'no-schema';\n\n      /**\nThe language model to use.\n     */\n      model: LanguageModel;\n\n      /**\nThe mode to use for object generation. Must be \"json\" for no-schema output.\n     */\n      mode?: 'json';\n\n      /**\nA function that attempts to repair the raw output of the mode\nto enable JSON parsing.\n     */\n      experimental_repairText?: RepairTextFunction;\n\n      /**\nOptional telemetry configuration (experimental).\n       */\n      experimental_telemetry?: TelemetrySettings;\n\n      /**\nAdditional provider-specific options. They are passed through\nto the provider from the AI SDK and enable provider-specific\nfunctionality that can be fully encapsulated in the provider.\n */\n      providerOptions?: ProviderOptions;\n\n      /**\n@deprecated Use `providerOptions` instead.\n*/\n      experimental_providerMetadata?: ProviderMetadata;\n\n      /**\n       * Internal. For test use only. May change without notice.\n       */\n      _internal?: {\n        generateId?: () => string;\n        currentDate?: () => Date;\n      };\n    },\n): Promise<GenerateObjectResult<JSONValue>>;\nexport async function generateObject<SCHEMA, RESULT>({\n  model,\n  enum: enumValues, // rename bc enum is reserved by typescript\n  schema: inputSchema,\n  schemaName,\n  schemaDescription,\n  mode,\n  output = 'object',\n  system,\n  prompt,\n  messages,\n  maxRetries: maxRetriesArg,\n  abortSignal,\n  headers,\n  experimental_repairText: repairText,\n  experimental_telemetry: telemetry,\n  experimental_providerMetadata,\n  providerOptions = experimental_providerMetadata,\n  _internal: {\n    generateId = originalGenerateId,\n    currentDate = () => new Date(),\n  } = {},\n  ...settings\n}: Omit<CallSettings, 'stopSequences'> &\n  Prompt & {\n    /**\n     * The expected structure of the output.\n     *\n     * - 'object': Generate a single object that conforms to the schema.\n     * - 'array': Generate an array of objects that conform to the schema.\n     * - 'no-schema': Generate any JSON object. No schema is specified.\n     *\n     * Default is 'object' if not specified.\n     */\n    output?: 'object' | 'array' | 'enum' | 'no-schema';\n\n    model: LanguageModel;\n    enum?: Array<SCHEMA>;\n    schema?: z.Schema<SCHEMA, z.ZodTypeDef, any> | Schema<SCHEMA>;\n    schemaName?: string;\n    schemaDescription?: string;\n    mode?: 'auto' | 'json' | 'tool';\n    experimental_repairText?: RepairTextFunction;\n    experimental_telemetry?: TelemetrySettings;\n    experimental_providerMetadata?: ProviderMetadata;\n    providerOptions?: ProviderOptions;\n\n    /**\n     * Internal. For test use only. May change without notice.\n     */\n    _internal?: {\n      generateId?: () => string;\n      currentDate?: () => Date;\n    };\n  }): Promise<GenerateObjectResult<RESULT>> {\n  validateObjectGenerationInput({\n    output,\n    mode,\n    schema: inputSchema,\n    schemaName,\n    schemaDescription,\n    enumValues,\n  });\n\n  const { maxRetries, retry } = prepareRetries({ maxRetries: maxRetriesArg });\n\n  const outputStrategy = getOutputStrategy({\n    output,\n    schema: inputSchema,\n    enumValues,\n  });\n\n  // automatically set mode to 'json' for no-schema output\n  if (outputStrategy.type === 'no-schema' && mode === undefined) {\n    mode = 'json';\n  }\n\n  const baseTelemetryAttributes = getBaseTelemetryAttributes({\n    model,\n    telemetry,\n    headers,\n    settings: { ...settings, maxRetries },\n  });\n\n  const tracer = getTracer(telemetry);\n\n  return recordSpan({\n    name: 'ai.generateObject',\n    attributes: selectTelemetryAttributes({\n      telemetry,\n      attributes: {\n        ...assembleOperationName({\n          operationId: 'ai.generateObject',\n          telemetry,\n        }),\n        ...baseTelemetryAttributes,\n        // specific settings that only make sense on the outer level:\n        'ai.prompt': {\n          input: () => JSON.stringify({ system, prompt, messages }),\n        },\n        'ai.schema':\n          outputStrategy.jsonSchema != null\n            ? { input: () => JSON.stringify(outputStrategy.jsonSchema) }\n            : undefined,\n        'ai.schema.name': schemaName,\n        'ai.schema.description': schemaDescription,\n        'ai.settings.output': outputStrategy.type,\n        'ai.settings.mode': mode,\n      },\n    }),\n    tracer,\n    fn: async span => {\n      // use the default provider mode when the mode is set to 'auto' or unspecified\n      if (mode === 'auto' || mode == null) {\n        mode = model.defaultObjectGenerationMode;\n      }\n\n      let result: string;\n      let finishReason: FinishReason;\n      let usage: Parameters<typeof calculateLanguageModelUsage>[0];\n      let warnings: CallWarning[] | undefined;\n      let rawResponse:\n        | { headers?: Record<string, string>; body?: unknown }\n        | undefined;\n      let response: LanguageModelResponseMetadata;\n      let request: LanguageModelRequestMetadata;\n      let logprobs: LogProbs | undefined;\n      let resultProviderMetadata: ProviderMetadata | undefined;\n\n      switch (mode) {\n        case 'json': {\n          const standardizedPrompt = standardizePrompt({\n            prompt: {\n              system:\n                outputStrategy.jsonSchema == null\n                  ? injectJsonInstruction({ prompt: system })\n                  : model.supportsStructuredOutputs\n                    ? system\n                    : injectJsonInstruction({\n                        prompt: system,\n                        schema: outputStrategy.jsonSchema,\n                      }),\n              prompt,\n              messages,\n            },\n            tools: undefined,\n          });\n\n          const promptMessages = await convertToLanguageModelPrompt({\n            prompt: standardizedPrompt,\n            modelSupportsImageUrls: model.supportsImageUrls,\n            modelSupportsUrl: model.supportsUrl?.bind(model), // support 'this' context\n          });\n\n          const generateResult = await retry(() =>\n            recordSpan({\n              name: 'ai.generateObject.doGenerate',\n              attributes: selectTelemetryAttributes({\n                telemetry,\n                attributes: {\n                  ...assembleOperationName({\n                    operationId: 'ai.generateObject.doGenerate',\n                    telemetry,\n                  }),\n                  ...baseTelemetryAttributes,\n                  'ai.prompt.format': {\n                    input: () => standardizedPrompt.type,\n                  },\n                  'ai.prompt.messages': {\n                    input: () => JSON.stringify(promptMessages),\n                  },\n                  'ai.settings.mode': mode,\n\n                  // standardized gen-ai llm span attributes:\n                  'gen_ai.system': model.provider,\n                  'gen_ai.request.model': model.modelId,\n                  'gen_ai.request.frequency_penalty': settings.frequencyPenalty,\n                  'gen_ai.request.max_tokens': settings.maxTokens,\n                  'gen_ai.request.presence_penalty': settings.presencePenalty,\n                  'gen_ai.request.temperature': settings.temperature,\n                  'gen_ai.request.top_k': settings.topK,\n                  'gen_ai.request.top_p': settings.topP,\n                },\n              }),\n              tracer,\n              fn: async span => {\n                const result = await model.doGenerate({\n                  mode: {\n                    type: 'object-json',\n                    schema: outputStrategy.jsonSchema,\n                    name: schemaName,\n                    description: schemaDescription,\n                  },\n                  ...prepareCallSettings(settings),\n                  inputFormat: standardizedPrompt.type,\n                  prompt: promptMessages,\n                  providerMetadata: providerOptions,\n                  abortSignal,\n                  headers,\n                });\n\n                const responseData = {\n                  id: result.response?.id ?? generateId(),\n                  timestamp: result.response?.timestamp ?? currentDate(),\n                  modelId: result.response?.modelId ?? model.modelId,\n                };\n\n                if (result.text === undefined) {\n                  throw new NoObjectGeneratedError({\n                    message:\n                      'No object generated: the model did not return a response.',\n                    response: responseData,\n                    usage: calculateLanguageModelUsage(result.usage),\n                    finishReason: result.finishReason,\n                  });\n                }\n\n                // Add response information to the span:\n                span.setAttributes(\n                  selectTelemetryAttributes({\n                    telemetry,\n                    attributes: {\n                      'ai.response.finishReason': result.finishReason,\n                      'ai.response.object': { output: () => result.text },\n                      'ai.response.id': responseData.id,\n                      'ai.response.model': responseData.modelId,\n                      'ai.response.timestamp':\n                        responseData.timestamp.toISOString(),\n\n                      'ai.usage.promptTokens': result.usage.promptTokens,\n                      'ai.usage.completionTokens':\n                        result.usage.completionTokens,\n\n                      // standardized gen-ai llm span attributes:\n                      'gen_ai.response.finish_reasons': [result.finishReason],\n                      'gen_ai.response.id': responseData.id,\n                      'gen_ai.response.model': responseData.modelId,\n                      'gen_ai.usage.prompt_tokens': result.usage.promptTokens,\n                      'gen_ai.usage.completion_tokens':\n                        result.usage.completionTokens,\n                    },\n                  }),\n                );\n\n                return { ...result, objectText: result.text, responseData };\n              },\n            }),\n          );\n\n          result = generateResult.objectText;\n          finishReason = generateResult.finishReason;\n          usage = generateResult.usage;\n          warnings = generateResult.warnings;\n          rawResponse = generateResult.rawResponse;\n          logprobs = generateResult.logprobs;\n          resultProviderMetadata = generateResult.providerMetadata;\n          request = generateResult.request ?? {};\n          response = generateResult.responseData;\n\n          break;\n        }\n\n        case 'tool': {\n          const standardizedPrompt = standardizePrompt({\n            prompt: { system, prompt, messages },\n            tools: undefined,\n          });\n\n          const promptMessages = await convertToLanguageModelPrompt({\n            prompt: standardizedPrompt,\n            modelSupportsImageUrls: model.supportsImageUrls,\n            modelSupportsUrl: model.supportsUrl?.bind(model), // support 'this' context,\n          });\n          const inputFormat = standardizedPrompt.type;\n\n          const generateResult = await retry(() =>\n            recordSpan({\n              name: 'ai.generateObject.doGenerate',\n              attributes: selectTelemetryAttributes({\n                telemetry,\n                attributes: {\n                  ...assembleOperationName({\n                    operationId: 'ai.generateObject.doGenerate',\n                    telemetry,\n                  }),\n                  ...baseTelemetryAttributes,\n                  'ai.prompt.format': {\n                    input: () => inputFormat,\n                  },\n                  'ai.prompt.messages': {\n                    input: () => stringifyForTelemetry(promptMessages),\n                  },\n                  'ai.settings.mode': mode,\n\n                  // standardized gen-ai llm span attributes:\n                  'gen_ai.system': model.provider,\n                  'gen_ai.request.model': model.modelId,\n                  'gen_ai.request.frequency_penalty': settings.frequencyPenalty,\n                  'gen_ai.request.max_tokens': settings.maxTokens,\n                  'gen_ai.request.presence_penalty': settings.presencePenalty,\n                  'gen_ai.request.temperature': settings.temperature,\n                  'gen_ai.request.top_k': settings.topK,\n                  'gen_ai.request.top_p': settings.topP,\n                },\n              }),\n              tracer,\n              fn: async span => {\n                const result = await model.doGenerate({\n                  mode: {\n                    type: 'object-tool',\n                    tool: {\n                      type: 'function',\n                      name: schemaName ?? 'json',\n                      description:\n                        schemaDescription ?? 'Respond with a JSON object.',\n                      parameters: outputStrategy.jsonSchema!,\n                    },\n                  },\n                  ...prepareCallSettings(settings),\n                  inputFormat,\n                  prompt: promptMessages,\n                  providerMetadata: providerOptions,\n                  abortSignal,\n                  headers,\n                });\n\n                const objectText = result.toolCalls?.[0]?.args;\n\n                const responseData = {\n                  id: result.response?.id ?? generateId(),\n                  timestamp: result.response?.timestamp ?? currentDate(),\n                  modelId: result.response?.modelId ?? model.modelId,\n                };\n\n                if (objectText === undefined) {\n                  throw new NoObjectGeneratedError({\n                    message: 'No object generated: the tool was not called.',\n                    response: responseData,\n                    usage: calculateLanguageModelUsage(result.usage),\n                    finishReason: result.finishReason,\n                  });\n                }\n\n                // Add response information to the span:\n                span.setAttributes(\n                  selectTelemetryAttributes({\n                    telemetry,\n                    attributes: {\n                      'ai.response.finishReason': result.finishReason,\n                      'ai.response.object': { output: () => objectText },\n                      'ai.response.id': responseData.id,\n                      'ai.response.model': responseData.modelId,\n                      'ai.response.timestamp':\n                        responseData.timestamp.toISOString(),\n\n                      'ai.usage.promptTokens': result.usage.promptTokens,\n                      'ai.usage.completionTokens':\n                        result.usage.completionTokens,\n\n                      // standardized gen-ai llm span attributes:\n                      'gen_ai.response.finish_reasons': [result.finishReason],\n                      'gen_ai.response.id': responseData.id,\n                      'gen_ai.response.model': responseData.modelId,\n                      'gen_ai.usage.input_tokens': result.usage.promptTokens,\n                      'gen_ai.usage.output_tokens':\n                        result.usage.completionTokens,\n                    },\n                  }),\n                );\n\n                return { ...result, objectText, responseData };\n              },\n            }),\n          );\n\n          result = generateResult.objectText;\n          finishReason = generateResult.finishReason;\n          usage = generateResult.usage;\n          warnings = generateResult.warnings;\n          rawResponse = generateResult.rawResponse;\n          logprobs = generateResult.logprobs;\n          resultProviderMetadata = generateResult.providerMetadata;\n          request = generateResult.request ?? {};\n          response = generateResult.responseData;\n\n          break;\n        }\n\n        case undefined: {\n          throw new Error(\n            'Model does not have a default object generation mode.',\n          );\n        }\n\n        default: {\n          const _exhaustiveCheck: never = mode;\n          throw new Error(`Unsupported mode: ${_exhaustiveCheck}`);\n        }\n      }\n\n      function processResult(result: string): RESULT {\n        const parseResult = safeParseJSON({ text: result });\n\n        if (!parseResult.success) {\n          throw new NoObjectGeneratedError({\n            message: 'No object generated: could not parse the response.',\n            cause: parseResult.error,\n            text: result,\n            response,\n            usage: calculateLanguageModelUsage(usage),\n            finishReason: finishReason,\n          });\n        }\n\n        const validationResult = outputStrategy.validateFinalResult(\n          parseResult.value,\n          {\n            text: result,\n            response,\n            usage: calculateLanguageModelUsage(usage),\n          },\n        );\n\n        if (!validationResult.success) {\n          throw new NoObjectGeneratedError({\n            message: 'No object generated: response did not match schema.',\n            cause: validationResult.error,\n            text: result,\n            response,\n            usage: calculateLanguageModelUsage(usage),\n            finishReason: finishReason,\n          });\n        }\n\n        return validationResult.value;\n      }\n\n      let object: RESULT;\n      try {\n        object = processResult(result);\n      } catch (error) {\n        if (\n          repairText != null &&\n          NoObjectGeneratedError.isInstance(error) &&\n          (JSONParseError.isInstance(error.cause) ||\n            TypeValidationError.isInstance(error.cause))\n        ) {\n          const repairedText = await repairText({\n            text: result,\n            error: error.cause,\n          });\n\n          if (repairedText === null) {\n            throw error;\n          }\n\n          object = processResult(repairedText);\n        } else {\n          throw error;\n        }\n      }\n\n      // Add response information to the span:\n      span.setAttributes(\n        selectTelemetryAttributes({\n          telemetry,\n          attributes: {\n            'ai.response.finishReason': finishReason,\n            'ai.response.object': {\n              output: () => JSON.stringify(object),\n            },\n\n            'ai.usage.promptTokens': usage.promptTokens,\n            'ai.usage.completionTokens': usage.completionTokens,\n          },\n        }),\n      );\n\n      return new DefaultGenerateObjectResult({\n        object,\n        finishReason,\n        usage: calculateLanguageModelUsage(usage),\n        warnings,\n        request,\n        response: {\n          ...response,\n          headers: rawResponse?.headers,\n          body: rawResponse?.body,\n        },\n        logprobs,\n        providerMetadata: resultProviderMetadata,\n      });\n    },\n  });\n}\n\nclass DefaultGenerateObjectResult<T> implements GenerateObjectResult<T> {\n  readonly object: GenerateObjectResult<T>['object'];\n  readonly finishReason: GenerateObjectResult<T>['finishReason'];\n  readonly usage: GenerateObjectResult<T>['usage'];\n  readonly warnings: GenerateObjectResult<T>['warnings'];\n  readonly logprobs: GenerateObjectResult<T>['logprobs'];\n  readonly experimental_providerMetadata: GenerateObjectResult<T>['experimental_providerMetadata'];\n  readonly providerMetadata: GenerateObjectResult<T>['providerMetadata'];\n  readonly response: GenerateObjectResult<T>['response'];\n  readonly request: GenerateObjectResult<T>['request'];\n\n  constructor(options: {\n    object: GenerateObjectResult<T>['object'];\n    finishReason: GenerateObjectResult<T>['finishReason'];\n    usage: GenerateObjectResult<T>['usage'];\n    warnings: GenerateObjectResult<T>['warnings'];\n    logprobs: GenerateObjectResult<T>['logprobs'];\n    providerMetadata: GenerateObjectResult<T>['providerMetadata'];\n    response: GenerateObjectResult<T>['response'];\n    request: GenerateObjectResult<T>['request'];\n  }) {\n    this.object = options.object;\n    this.finishReason = options.finishReason;\n    this.usage = options.usage;\n    this.warnings = options.warnings;\n    this.providerMetadata = options.providerMetadata;\n    this.experimental_providerMetadata = options.providerMetadata;\n    this.response = options.response;\n    this.request = options.request;\n    this.logprobs = options.logprobs;\n  }\n\n  toJsonResponse(init?: ResponseInit): Response {\n    return new Response(JSON.stringify(this.object), {\n      status: init?.status ?? 200,\n      headers: prepareResponseHeaders(init?.headers, {\n        contentType: 'application/json; charset=utf-8',\n      }),\n    });\n  }\n}\n","import { AISDKError } from '@ai-sdk/provider';\nimport { LanguageModelResponseMetadata } from '../core/types/language-model-response-metadata';\nimport { LanguageModelUsage } from '../core/types/usage';\nimport { FinishReason } from '../core';\n\nconst name = 'AI_NoObjectGeneratedError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\n/**\nThrown when no object could be generated. This can have several causes:\n\n- The model failed to generate a response.\n- The model generated a response that could not be parsed.\n- The model generated a response that could not be validated against the schema.\n\nThe error contains the following properties:\n\n- `text`: The text that was generated by the model. This can be the raw text or the tool call text, depending on the model.\n */\nexport class NoObjectGeneratedError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  /**\n  The text that was generated by the model. This can be the raw text or the tool call text, depending on the model.\n   */\n  readonly text: string | undefined;\n\n  /**\n  The response metadata.\n   */\n  readonly response: LanguageModelResponseMetadata | undefined;\n\n  /**\n  The usage of the model.\n   */\n  readonly usage: LanguageModelUsage | undefined;\n\n  /**\n  Reason why the model finished generating a response.\n   */\n  readonly finishReason: FinishReason | undefined;\n\n  constructor({\n    message = 'No object generated.',\n    cause,\n    text,\n    response,\n    usage,\n    finishReason,\n  }: {\n    message?: string;\n    cause?: Error;\n    text?: string;\n    response: LanguageModelResponseMetadata;\n    usage: LanguageModelUsage;\n    finishReason: FinishReason;\n  }) {\n    super({ name, message, cause });\n\n    this.text = text;\n    this.response = response;\n    this.usage = usage;\n    this.finishReason = finishReason;\n  }\n\n  static isInstance(error: unknown): error is NoObjectGeneratedError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n\nexport function verifyNoObjectGeneratedError(\n  error: unknown,\n  expected: {\n    message: string;\n    response: LanguageModelResponseMetadata;\n    usage: LanguageModelUsage;\n    finishReason: FinishReason;\n  },\n) {\n  expect(NoObjectGeneratedError.isInstance(error)).toBeTruthy();\n  const noObjectGeneratedError = error as NoObjectGeneratedError;\n  expect(noObjectGeneratedError.message).toStrictEqual(expected.message);\n  expect(noObjectGeneratedError.response).toStrictEqual(expected.response);\n  expect(noObjectGeneratedError.usage).toStrictEqual(expected.usage);\n  expect(noObjectGeneratedError.finishReason).toStrictEqual(\n    expected.finishReason,\n  );\n}\n","import { AISDKError } from '@ai-sdk/provider';\n\nconst name = 'AI_DownloadError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\nexport class DownloadError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  readonly url: string;\n  readonly statusCode?: number;\n  readonly statusText?: string;\n\n  constructor({\n    url,\n    statusCode,\n    statusText,\n    cause,\n    message = cause == null\n      ? `Failed to download ${url}: ${statusCode} ${statusText}`\n      : `Failed to download ${url}: ${cause}`,\n  }: {\n    url: string;\n    statusCode?: number;\n    statusText?: string;\n    message?: string;\n    cause?: unknown;\n  }) {\n    super({ name, message, cause });\n\n    this.url = url;\n    this.statusCode = statusCode;\n    this.statusText = statusText;\n  }\n\n  static isInstance(error: unknown): error is DownloadError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","import { DownloadError } from './download-error';\n\nexport async function download({ url }: { url: URL }): Promise<{\n  data: Uint8Array;\n  mimeType: string | undefined;\n}> {\n  const urlText = url.toString();\n  try {\n    const response = await fetch(urlText);\n\n    if (!response.ok) {\n      throw new DownloadError({\n        url: urlText,\n        statusCode: response.status,\n        statusText: response.statusText,\n      });\n    }\n\n    return {\n      data: new Uint8Array(await response.arrayBuffer()),\n      mimeType: response.headers.get('content-type') ?? undefined,\n    };\n  } catch (error) {\n    if (DownloadError.isInstance(error)) {\n      throw error;\n    }\n\n    throw new DownloadError({ url: urlText, cause: error });\n  }\n}\n","import {\n  convertBase64ToUint8Array,\n  convertUint8ArrayToBase64,\n} from '@ai-sdk/provider-utils';\nimport { InvalidDataContentError } from './invalid-data-content-error';\nimport { z } from 'zod';\n\n/**\nData content. Can either be a base64-encoded string, a Uint8Array, an ArrayBuffer, or a Buffer.\n */\nexport type DataContent = string | Uint8Array | ArrayBuffer | Buffer;\n\n/**\n@internal\n */\nexport const dataContentSchema: z.ZodType<DataContent> = z.union([\n  z.string(),\n  z.instanceof(Uint8Array),\n  z.instanceof(ArrayBuffer),\n  z.custom(\n    // Buffer might not be available in some environments such as CloudFlare:\n    (value: unknown): value is Buffer =>\n      globalThis.Buffer?.isBuffer(value) ?? false,\n    { message: 'Must be a Buffer' },\n  ),\n]);\n\n/**\nConverts data content to a base64-encoded string.\n\n@param content - Data content to convert.\n@returns Base64-encoded string.\n*/\nexport function convertDataContentToBase64String(content: DataContent): string {\n  if (typeof content === 'string') {\n    return content;\n  }\n\n  if (content instanceof ArrayBuffer) {\n    return convertUint8ArrayToBase64(new Uint8Array(content));\n  }\n\n  return convertUint8ArrayToBase64(content);\n}\n\n/**\nConverts data content to a Uint8Array.\n\n@param content - Data content to convert.\n@returns Uint8Array.\n */\nexport function convertDataContentToUint8Array(\n  content: DataContent,\n): Uint8Array {\n  if (content instanceof Uint8Array) {\n    return content;\n  }\n\n  if (typeof content === 'string') {\n    try {\n      return convertBase64ToUint8Array(content);\n    } catch (error) {\n      throw new InvalidDataContentError({\n        message:\n          'Invalid data content. Content string is not a base64-encoded media.',\n        content,\n        cause: error,\n      });\n    }\n  }\n\n  if (content instanceof ArrayBuffer) {\n    return new Uint8Array(content);\n  }\n\n  throw new InvalidDataContentError({ content });\n}\n\n/**\n * Converts a Uint8Array to a string of text.\n *\n * @param uint8Array - The Uint8Array to convert.\n * @returns The converted string.\n */\nexport function convertUint8ArrayToText(uint8Array: Uint8Array): string {\n  try {\n    return new TextDecoder().decode(uint8Array);\n  } catch (error) {\n    throw new Error('Error decoding Uint8Array to text');\n  }\n}\n","import { AISDKError } from '@ai-sdk/provider';\n\nconst name = 'AI_InvalidDataContentError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\nexport class InvalidDataContentError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  readonly content: unknown;\n\n  constructor({\n    content,\n    cause,\n    message = `Invalid data content. Expected a base64 string, Uint8Array, ArrayBuffer, or Buffer, but got ${typeof content}.`,\n  }: {\n    content: unknown;\n    cause?: unknown;\n    message?: string;\n  }) {\n    super({ name, message, cause });\n\n    this.content = content;\n  }\n\n  static isInstance(error: unknown): error is InvalidDataContentError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","import { AISDKError } from '@ai-sdk/provider';\n\nconst name = 'AI_InvalidMessageRoleError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\nexport class InvalidMessageRoleError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  readonly role: string;\n\n  constructor({\n    role,\n    message = `Invalid message role: '${role}'. Must be one of: \"system\", \"user\", \"assistant\", \"tool\".`,\n  }: {\n    role: string;\n    message?: string;\n  }) {\n    super({ name, message });\n\n    this.role = role;\n  }\n\n  static isInstance(error: unknown): error is InvalidMessageRoleError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","export function splitDataUrl(dataUrl: string): {\n  mimeType: string | undefined;\n  base64Content: string | undefined;\n} {\n  try {\n    const [header, base64Content] = dataUrl.split(',');\n    return {\n      mimeType: header.split(';')[0].split(':')[1],\n      base64Content,\n    };\n  } catch (error) {\n    return {\n      mimeType: undefined,\n      base64Content: undefined,\n    };\n  }\n}\n","import {\n  LanguageModelV1FilePart,\n  LanguageModelV1ImagePart,\n  LanguageModelV1Message,\n  LanguageModelV1Prompt,\n  LanguageModelV1TextPart,\n} from '@ai-sdk/provider';\nimport { download } from '../../util/download';\nimport { CoreMessage } from '../prompt/message';\nimport {\n  detectMimeType,\n  imageMimeTypeSignatures,\n} from '../util/detect-mimetype';\nimport { FilePart, ImagePart, TextPart } from './content-part';\nimport {\n  convertDataContentToBase64String,\n  convertDataContentToUint8Array,\n  DataContent,\n} from './data-content';\nimport { InvalidMessageRoleError } from './invalid-message-role-error';\nimport { splitDataUrl } from './split-data-url';\nimport { StandardizedPrompt } from './standardize-prompt';\n\nexport async function convertToLanguageModelPrompt({\n  prompt,\n  modelSupportsImageUrls = true,\n  modelSupportsUrl = () => false,\n  downloadImplementation = download,\n}: {\n  prompt: StandardizedPrompt;\n  modelSupportsImageUrls: boolean | undefined;\n  modelSupportsUrl: undefined | ((url: URL) => boolean);\n  downloadImplementation?: typeof download;\n}): Promise<LanguageModelV1Prompt> {\n  const downloadedAssets = await downloadAssets(\n    prompt.messages,\n    downloadImplementation,\n    modelSupportsImageUrls,\n    modelSupportsUrl,\n  );\n\n  return [\n    ...(prompt.system != null\n      ? [{ role: 'system' as const, content: prompt.system }]\n      : []),\n    ...prompt.messages.map(message =>\n      convertToLanguageModelMessage(message, downloadedAssets),\n    ),\n  ];\n}\n\n/**\n * Convert a CoreMessage to a LanguageModelV1Message.\n *\n * @param message The CoreMessage to convert.\n * @param downloadedAssets A map of URLs to their downloaded data. Only\n *   available if the model does not support URLs, null otherwise.\n */\nexport function convertToLanguageModelMessage(\n  message: CoreMessage,\n  downloadedAssets: Record<\n    string,\n    { mimeType: string | undefined; data: Uint8Array }\n  >,\n): LanguageModelV1Message {\n  const role = message.role;\n  switch (role) {\n    case 'system': {\n      return {\n        role: 'system',\n        content: message.content,\n        providerMetadata:\n          message.providerOptions ?? message.experimental_providerMetadata,\n      };\n    }\n\n    case 'user': {\n      if (typeof message.content === 'string') {\n        return {\n          role: 'user',\n          content: [{ type: 'text', text: message.content }],\n          providerMetadata:\n            message.providerOptions ?? message.experimental_providerMetadata,\n        };\n      }\n\n      return {\n        role: 'user',\n        content: message.content\n          .map(part => convertPartToLanguageModelPart(part, downloadedAssets))\n          // remove empty text parts:\n          .filter(part => part.type !== 'text' || part.text !== ''),\n        providerMetadata:\n          message.providerOptions ?? message.experimental_providerMetadata,\n      };\n    }\n\n    case 'assistant': {\n      if (typeof message.content === 'string') {\n        return {\n          role: 'assistant',\n          content: [{ type: 'text', text: message.content }],\n          providerMetadata:\n            message.providerOptions ?? message.experimental_providerMetadata,\n        };\n      }\n\n      return {\n        role: 'assistant',\n        content: message.content\n          .filter(\n            // remove empty text parts:\n            part => part.type !== 'text' || part.text !== '',\n          )\n          .map(part => {\n            const providerOptions =\n              part.providerOptions ?? part.experimental_providerMetadata;\n\n            switch (part.type) {\n              case 'file': {\n                return {\n                  type: 'file',\n                  data:\n                    part.data instanceof URL\n                      ? part.data\n                      : convertDataContentToBase64String(part.data),\n                  filename: part.filename,\n                  mimeType: part.mimeType,\n                  providerMetadata: providerOptions,\n                };\n              }\n              case 'reasoning': {\n                return {\n                  type: 'reasoning',\n                  text: part.text,\n                  signature: part.signature,\n                  providerMetadata: providerOptions,\n                };\n              }\n              case 'redacted-reasoning': {\n                return {\n                  type: 'redacted-reasoning',\n                  data: part.data,\n                  providerMetadata: providerOptions,\n                };\n              }\n              case 'text': {\n                return {\n                  type: 'text' as const,\n                  text: part.text,\n                  providerMetadata: providerOptions,\n                };\n              }\n              case 'tool-call': {\n                return {\n                  type: 'tool-call' as const,\n                  toolCallId: part.toolCallId,\n                  toolName: part.toolName,\n                  args: part.args,\n                  providerMetadata: providerOptions,\n                };\n              }\n            }\n          }),\n        providerMetadata:\n          message.providerOptions ?? message.experimental_providerMetadata,\n      };\n    }\n\n    case 'tool': {\n      return {\n        role: 'tool',\n        content: message.content.map(part => ({\n          type: 'tool-result',\n          toolCallId: part.toolCallId,\n          toolName: part.toolName,\n          result: part.result,\n          content: part.experimental_content,\n          isError: part.isError,\n          providerMetadata:\n            part.providerOptions ?? part.experimental_providerMetadata,\n        })),\n        providerMetadata:\n          message.providerOptions ?? message.experimental_providerMetadata,\n      };\n    }\n\n    default: {\n      const _exhaustiveCheck: never = role;\n      throw new InvalidMessageRoleError({ role: _exhaustiveCheck });\n    }\n  }\n}\n\n/**\n * Downloads images and files from URLs in the messages.\n */\nasync function downloadAssets(\n  messages: CoreMessage[],\n  downloadImplementation: typeof download,\n  modelSupportsImageUrls: boolean | undefined,\n  modelSupportsUrl: (url: URL) => boolean,\n): Promise<Record<string, { mimeType: string | undefined; data: Uint8Array }>> {\n  const urls = messages\n    .filter(message => message.role === 'user')\n    .map(message => message.content)\n    .filter((content): content is Array<TextPart | ImagePart | FilePart> =>\n      Array.isArray(content),\n    )\n    .flat()\n    .filter(\n      (part): part is ImagePart | FilePart =>\n        part.type === 'image' || part.type === 'file',\n    )\n    /**\n     * Filter out image parts if the model supports image URLs, before letting it\n     * decide if it supports a particular URL.\n     */\n    .filter(\n      (part): part is ImagePart | FilePart =>\n        !(part.type === 'image' && modelSupportsImageUrls === true),\n    )\n    .map(part => (part.type === 'image' ? part.image : part.data))\n    .map(part =>\n      // support string urls:\n      typeof part === 'string' &&\n      (part.startsWith('http:') || part.startsWith('https:'))\n        ? new URL(part)\n        : part,\n    )\n    .filter((image): image is URL => image instanceof URL)\n    /**\n     * Filter out URLs that the model supports natively, so we don't download them.\n     */\n    .filter(url => !modelSupportsUrl(url));\n\n  // download in parallel:\n  const downloadedImages = await Promise.all(\n    urls.map(async url => ({\n      url,\n      data: await downloadImplementation({ url }),\n    })),\n  );\n\n  return Object.fromEntries(\n    downloadedImages.map(({ url, data }) => [url.toString(), data]),\n  );\n}\n\n/**\n * Convert part of a message to a LanguageModelV1Part.\n * @param part The part to convert.\n * @param downloadedAssets A map of URLs to their downloaded data. Only\n *  available if the model does not support URLs, null otherwise.\n *\n * @returns The converted part.\n */\nfunction convertPartToLanguageModelPart(\n  part: TextPart | ImagePart | FilePart,\n  downloadedAssets: Record<\n    string,\n    { mimeType: string | undefined; data: Uint8Array }\n  >,\n):\n  | LanguageModelV1TextPart\n  | LanguageModelV1ImagePart\n  | LanguageModelV1FilePart {\n  if (part.type === 'text') {\n    return {\n      type: 'text',\n      text: part.text,\n      providerMetadata:\n        part.providerOptions ?? part.experimental_providerMetadata,\n    };\n  }\n\n  let mimeType: string | undefined = part.mimeType;\n  let data: DataContent | URL;\n  let content: URL | ArrayBuffer | string;\n  let normalizedData: Uint8Array | URL;\n\n  const type = part.type;\n  switch (type) {\n    case 'image':\n      data = part.image;\n      break;\n    case 'file':\n      data = part.data;\n      break;\n    default:\n      throw new Error(`Unsupported part type: ${type}`);\n  }\n\n  // Attempt to create a URL from the data. If it fails, we can assume the data\n  // is not a URL and likely some other sort of data.\n  try {\n    content = typeof data === 'string' ? new URL(data) : data;\n  } catch (error) {\n    content = data;\n  }\n\n  // If we successfully created a URL, we can use that to normalize the data\n  // either by passing it through or converting normalizing the base64 content\n  // to a Uint8Array.\n  if (content instanceof URL) {\n    // If the content is a data URL, we want to convert that to a Uint8Array\n    if (content.protocol === 'data:') {\n      const { mimeType: dataUrlMimeType, base64Content } = splitDataUrl(\n        content.toString(),\n      );\n\n      if (dataUrlMimeType == null || base64Content == null) {\n        throw new Error(`Invalid data URL format in part ${type}`);\n      }\n\n      mimeType = dataUrlMimeType;\n      normalizedData = convertDataContentToUint8Array(base64Content);\n    } else {\n      /**\n       * If the content is a URL, we should first see if it was downloaded. And if not,\n       * we can let the model decide if it wants to support the URL. This also allows\n       * for non-HTTP URLs to be passed through (e.g. gs://).\n       */\n      const downloadedFile = downloadedAssets[content.toString()];\n      if (downloadedFile) {\n        normalizedData = downloadedFile.data;\n        mimeType ??= downloadedFile.mimeType;\n      } else {\n        normalizedData = content;\n      }\n    }\n  } else {\n    // Since we know now the content is not a URL, we can attempt to normalize\n    // the data assuming it is some sort of data.\n    normalizedData = convertDataContentToUint8Array(content);\n  }\n\n  // Now that we have the normalized data either as a URL or a Uint8Array,\n  // we can create the LanguageModelV1Part.\n  switch (type) {\n    case 'image': {\n      // When possible, try to detect the mimetype automatically\n      // to deal with incorrect mimetype inputs.\n      // When detection fails, use provided mimetype.\n\n      if (normalizedData instanceof Uint8Array) {\n        mimeType =\n          detectMimeType({\n            data: normalizedData,\n            signatures: imageMimeTypeSignatures,\n          }) ?? mimeType;\n      }\n      return {\n        type: 'image',\n        image: normalizedData,\n        mimeType,\n        providerMetadata:\n          part.providerOptions ?? part.experimental_providerMetadata,\n      };\n    }\n\n    case 'file': {\n      // We should have a mimeType at this point, if not, throw an error.\n      if (mimeType == null) {\n        throw new Error(`Mime type is missing for file part`);\n      }\n\n      return {\n        type: 'file',\n        data:\n          normalizedData instanceof Uint8Array\n            ? convertDataContentToBase64String(normalizedData)\n            : normalizedData,\n        filename: part.filename,\n        mimeType,\n        providerMetadata:\n          part.providerOptions ?? part.experimental_providerMetadata,\n      };\n    }\n  }\n}\n","import { InvalidArgumentError } from '../../errors/invalid-argument-error';\nimport { CallSettings } from './call-settings';\n\n/**\n * Validates call settings and sets default values.\n */\nexport function prepareCallSettings({\n  maxTokens,\n  temperature,\n  topP,\n  topK,\n  presencePenalty,\n  frequencyPenalty,\n  stopSequences,\n  seed,\n}: Omit<CallSettings, 'abortSignal' | 'headers' | 'maxRetries'>): Omit<\n  CallSettings,\n  'abortSignal' | 'headers' | 'maxRetries'\n> {\n  if (maxTokens != null) {\n    if (!Number.isInteger(maxTokens)) {\n      throw new InvalidArgumentError({\n        parameter: 'maxTokens',\n        value: maxTokens,\n        message: 'maxTokens must be an integer',\n      });\n    }\n\n    if (maxTokens < 1) {\n      throw new InvalidArgumentError({\n        parameter: 'maxTokens',\n        value: maxTokens,\n        message: 'maxTokens must be >= 1',\n      });\n    }\n  }\n\n  if (temperature != null) {\n    if (typeof temperature !== 'number') {\n      throw new InvalidArgumentError({\n        parameter: 'temperature',\n        value: temperature,\n        message: 'temperature must be a number',\n      });\n    }\n  }\n\n  if (topP != null) {\n    if (typeof topP !== 'number') {\n      throw new InvalidArgumentError({\n        parameter: 'topP',\n        value: topP,\n        message: 'topP must be a number',\n      });\n    }\n  }\n\n  if (topK != null) {\n    if (typeof topK !== 'number') {\n      throw new InvalidArgumentError({\n        parameter: 'topK',\n        value: topK,\n        message: 'topK must be a number',\n      });\n    }\n  }\n\n  if (presencePenalty != null) {\n    if (typeof presencePenalty !== 'number') {\n      throw new InvalidArgumentError({\n        parameter: 'presencePenalty',\n        value: presencePenalty,\n        message: 'presencePenalty must be a number',\n      });\n    }\n  }\n\n  if (frequencyPenalty != null) {\n    if (typeof frequencyPenalty !== 'number') {\n      throw new InvalidArgumentError({\n        parameter: 'frequencyPenalty',\n        value: frequencyPenalty,\n        message: 'frequencyPenalty must be a number',\n      });\n    }\n  }\n\n  if (seed != null) {\n    if (!Number.isInteger(seed)) {\n      throw new InvalidArgumentError({\n        parameter: 'seed',\n        value: seed,\n        message: 'seed must be an integer',\n      });\n    }\n  }\n\n  return {\n    maxTokens,\n    // TODO v5 remove default 0 for temperature\n    temperature: temperature ?? 0,\n    topP,\n    topK,\n    presencePenalty,\n    frequencyPenalty,\n    stopSequences:\n      stopSequences != null && stopSequences.length > 0\n        ? stopSequences\n        : undefined,\n    seed,\n  };\n}\n","import { InvalidPromptError } from '@ai-sdk/provider';\nimport { safeValidateTypes } from '@ai-sdk/provider-utils';\nimport { Message } from '@ai-sdk/ui-utils';\nimport { z } from 'zod';\nimport { ToolSet } from '../generate-text/tool-set';\nimport { convertToCoreMessages } from './convert-to-core-messages';\nimport { CoreMessage, coreMessageSchema } from './message';\nimport { Prompt } from './prompt';\n\nexport type StandardizedPrompt = {\n  /**\n   * Original prompt type. This is forwarded to the providers and can be used\n   * to write send raw text to providers that support it.\n   */\n  type: 'prompt' | 'messages';\n\n  /**\n   * System message.\n   */\n  system?: string;\n\n  /**\n   * Messages.\n   */\n  messages: CoreMessage[];\n};\n\nexport function standardizePrompt<TOOLS extends ToolSet>({\n  prompt,\n  tools,\n}: {\n  prompt: Prompt;\n  tools: undefined | TOOLS;\n}): StandardizedPrompt {\n  if (prompt.prompt == null && prompt.messages == null) {\n    throw new InvalidPromptError({\n      prompt,\n      message: 'prompt or messages must be defined',\n    });\n  }\n\n  if (prompt.prompt != null && prompt.messages != null) {\n    throw new InvalidPromptError({\n      prompt,\n      message: 'prompt and messages cannot be defined at the same time',\n    });\n  }\n\n  // validate that system is a string\n  if (prompt.system != null && typeof prompt.system !== 'string') {\n    throw new InvalidPromptError({\n      prompt,\n      message: 'system must be a string',\n    });\n  }\n\n  // type: prompt\n  if (prompt.prompt != null) {\n    // validate that prompt is a string\n    if (typeof prompt.prompt !== 'string') {\n      throw new InvalidPromptError({\n        prompt,\n        message: 'prompt must be a string',\n      });\n    }\n\n    return {\n      type: 'prompt',\n      system: prompt.system,\n      messages: [\n        {\n          role: 'user',\n          content: prompt.prompt,\n        },\n      ],\n    };\n  }\n\n  // type: messages\n  if (prompt.messages != null) {\n    const promptType = detectPromptType(prompt.messages);\n\n    const messages: CoreMessage[] =\n      promptType === 'ui-messages'\n        ? convertToCoreMessages(prompt.messages as Omit<Message, 'id'>[], {\n            tools,\n          })\n        : (prompt.messages as CoreMessage[]);\n\n    if (messages.length === 0) {\n      throw new InvalidPromptError({\n        prompt,\n        message: 'messages must not be empty',\n      });\n    }\n\n    const validationResult = safeValidateTypes({\n      value: messages,\n      schema: z.array(coreMessageSchema),\n    });\n\n    if (!validationResult.success) {\n      throw new InvalidPromptError({\n        prompt,\n        message: [\n          'message must be a CoreMessage or a UI message',\n          `Validation error: ${validationResult.error.message}`,\n        ].join('\\n'),\n        cause: validationResult.error,\n      });\n    }\n\n    return {\n      type: 'messages',\n      messages,\n      system: prompt.system,\n    };\n  }\n\n  throw new Error('unreachable');\n}\n\nfunction detectPromptType(\n  prompt: Array<any>,\n): 'ui-messages' | 'messages' | 'other' {\n  if (!Array.isArray(prompt)) {\n    throw new InvalidPromptError({\n      prompt,\n      message: [\n        'messages must be an array of CoreMessage or UIMessage',\n        `Received non-array value: ${JSON.stringify(prompt)}`,\n      ].join('\\n'),\n      cause: prompt,\n    });\n  }\n\n  if (prompt.length === 0) {\n    return 'messages';\n  }\n\n  const characteristics = prompt.map(detectSingleMessageCharacteristics);\n\n  if (characteristics.some(c => c === 'has-ui-specific-parts')) {\n    return 'ui-messages';\n  }\n\n  const nonMessageIndex = characteristics.findIndex(\n    c => c !== 'has-core-specific-parts' && c !== 'message',\n  );\n\n  if (nonMessageIndex === -1) {\n    return 'messages';\n  }\n\n  throw new InvalidPromptError({\n    prompt,\n    message: [\n      'messages must be an array of CoreMessage or UIMessage',\n      `Received message of type: \"${characteristics[nonMessageIndex]}\" at index ${nonMessageIndex}`,\n      `messages[${nonMessageIndex}]: ${JSON.stringify(prompt[nonMessageIndex])}`,\n    ].join('\\n'),\n    cause: prompt,\n  });\n}\n\nfunction detectSingleMessageCharacteristics(\n  message: any,\n): 'has-ui-specific-parts' | 'has-core-specific-parts' | 'message' | 'other' {\n  if (\n    typeof message === 'object' &&\n    message !== null &&\n    (message.role === 'function' || // UI-only role\n      message.role === 'data' || // UI-only role\n      'toolInvocations' in message || // UI-specific field\n      'parts' in message || // UI-specific field\n      'experimental_attachments' in message)\n  ) {\n    return 'has-ui-specific-parts';\n  } else if (\n    typeof message === 'object' &&\n    message !== null &&\n    'content' in message &&\n    (Array.isArray(message.content) || // Core messages can have array content\n      'experimental_providerMetadata' in message ||\n      'providerOptions' in message)\n  ) {\n    return 'has-core-specific-parts';\n  } else if (\n    typeof message === 'object' &&\n    message !== null &&\n    'role' in message &&\n    'content' in message &&\n    typeof message.content === 'string' &&\n    ['system', 'user', 'assistant', 'tool'].includes(message.role)\n  ) {\n    return 'message';\n  } else {\n    return 'other';\n  }\n}\n","import { Attachment } from '@ai-sdk/ui-utils';\nimport { FilePart, ImagePart, TextPart } from './content-part';\nimport {\n  convertDataContentToUint8Array,\n  convertUint8ArrayToText,\n} from './data-content';\n\ntype ContentPart = TextPart | ImagePart | FilePart;\n\n/**\n * Converts a list of attachments to a list of content parts\n * for consumption by `ai/core` functions.\n * Currently only supports images and text attachments.\n */\nexport function attachmentsToParts(attachments: Attachment[]): ContentPart[] {\n  const parts: ContentPart[] = [];\n\n  for (const attachment of attachments) {\n    let url;\n\n    try {\n      url = new URL(attachment.url);\n    } catch (error) {\n      throw new Error(`Invalid URL: ${attachment.url}`);\n    }\n\n    switch (url.protocol) {\n      case 'http:':\n      case 'https:': {\n        if (attachment.contentType?.startsWith('image/')) {\n          parts.push({ type: 'image', image: url });\n        } else {\n          if (!attachment.contentType) {\n            throw new Error(\n              'If the attachment is not an image, it must specify a content type',\n            );\n          }\n\n          parts.push({\n            type: 'file',\n            data: url,\n            mimeType: attachment.contentType,\n          });\n        }\n        break;\n      }\n\n      case 'data:': {\n        let header;\n        let base64Content;\n        let mimeType;\n\n        try {\n          [header, base64Content] = attachment.url.split(',');\n          mimeType = header.split(';')[0].split(':')[1];\n        } catch (error) {\n          throw new Error(`Error processing data URL: ${attachment.url}`);\n        }\n\n        if (mimeType == null || base64Content == null) {\n          throw new Error(`Invalid data URL format: ${attachment.url}`);\n        }\n\n        if (attachment.contentType?.startsWith('image/')) {\n          parts.push({\n            type: 'image',\n            image: convertDataContentToUint8Array(base64Content),\n          });\n        } else if (attachment.contentType?.startsWith('text/')) {\n          parts.push({\n            type: 'text',\n            text: convertUint8ArrayToText(\n              convertDataContentToUint8Array(base64Content),\n            ),\n          });\n        } else {\n          if (!attachment.contentType) {\n            throw new Error(\n              'If the attachment is not an image or text, it must specify a content type',\n            );\n          }\n\n          parts.push({\n            type: 'file',\n            data: base64Content,\n            mimeType: attachment.contentType,\n          });\n        }\n\n        break;\n      }\n\n      default: {\n        throw new Error(`Unsupported URL protocol: ${url.protocol}`);\n      }\n    }\n  }\n\n  return parts;\n}\n","import { AISDKError } from '@ai-sdk/provider';\nimport { Message } from '@ai-sdk/ui-utils';\n\nconst name = 'AI_MessageConversionError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\nexport class MessageConversionError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  readonly originalMessage: Omit<Message, 'id'>;\n\n  constructor({\n    originalMessage,\n    message,\n  }: {\n    originalMessage: Omit<Message, 'id'>;\n    message: string;\n  }) {\n    super({ name, message });\n\n    this.originalMessage = originalMessage;\n  }\n\n  static isInstance(error: unknown): error is MessageConversionError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","import {\n  FileUIPart,\n  Message,\n  ReasoningUIPart,\n  TextUIPart,\n  ToolInvocationUIPart,\n} from '@ai-sdk/ui-utils';\nimport { ToolSet } from '../generate-text/tool-set';\nimport {\n  AssistantContent,\n  CoreMessage,\n  ToolCallPart,\n  ToolResultPart,\n} from '../prompt';\nimport { attachmentsToParts } from './attachments-to-parts';\nimport { MessageConversionError } from './message-conversion-error';\n\n/**\nConverts an array of messages from useChat into an array of CoreMessages that can be used\nwith the AI core functions (e.g. `streamText`).\n */\nexport function convertToCoreMessages<TOOLS extends ToolSet = never>(\n  messages: Array<Omit<Message, 'id'>>,\n  options?: { tools?: TOOLS },\n) {\n  const tools = options?.tools ?? ({} as TOOLS);\n  const coreMessages: CoreMessage[] = [];\n\n  for (let i = 0; i < messages.length; i++) {\n    const message = messages[i];\n    const isLastMessage = i === messages.length - 1;\n    const { role, content, experimental_attachments } = message;\n\n    switch (role) {\n      case 'system': {\n        coreMessages.push({\n          role: 'system',\n          content,\n        });\n        break;\n      }\n\n      case 'user': {\n        if (message.parts == null) {\n          coreMessages.push({\n            role: 'user',\n            content: experimental_attachments\n              ? [\n                  { type: 'text', text: content },\n                  ...attachmentsToParts(experimental_attachments),\n                ]\n              : content,\n          });\n        } else {\n          const textParts = message.parts\n            .filter(part => part.type === 'text')\n            .map(part => ({\n              type: 'text' as const,\n              text: part.text,\n            }));\n\n          coreMessages.push({\n            role: 'user',\n            content: experimental_attachments\n              ? [...textParts, ...attachmentsToParts(experimental_attachments)]\n              : textParts,\n          });\n        }\n        break;\n      }\n\n      case 'assistant': {\n        if (message.parts != null) {\n          let currentStep = 0;\n          let blockHasToolInvocations = false;\n          let block: Array<\n            TextUIPart | ToolInvocationUIPart | ReasoningUIPart | FileUIPart\n          > = [];\n\n          function processBlock() {\n            const content: AssistantContent = [];\n\n            for (const part of block) {\n              switch (part.type) {\n                case 'file':\n                case 'text': {\n                  content.push(part);\n                  break;\n                }\n                case 'reasoning': {\n                  for (const detail of part.details) {\n                    switch (detail.type) {\n                      case 'text':\n                        content.push({\n                          type: 'reasoning' as const,\n                          text: detail.text,\n                          signature: detail.signature,\n                        });\n                        break;\n                      case 'redacted':\n                        content.push({\n                          type: 'redacted-reasoning' as const,\n                          data: detail.data,\n                        });\n                        break;\n                    }\n                  }\n                  break;\n                }\n                case 'tool-invocation':\n                  content.push({\n                    type: 'tool-call' as const,\n                    toolCallId: part.toolInvocation.toolCallId,\n                    toolName: part.toolInvocation.toolName,\n                    args: part.toolInvocation.args,\n                  });\n                  break;\n                default: {\n                  const _exhaustiveCheck: never = part;\n                  throw new Error(`Unsupported part: ${_exhaustiveCheck}`);\n                }\n              }\n            }\n\n            coreMessages.push({\n              role: 'assistant',\n              content,\n            });\n\n            // check if there are tool invocations with results in the block\n            const stepInvocations = block\n              .filter(\n                (\n                  part:\n                    | TextUIPart\n                    | ToolInvocationUIPart\n                    | ReasoningUIPart\n                    | FileUIPart,\n                ): part is ToolInvocationUIPart =>\n                  part.type === 'tool-invocation',\n              )\n              .map(part => part.toolInvocation);\n\n            // tool message with tool results\n            if (stepInvocations.length > 0) {\n              coreMessages.push({\n                role: 'tool',\n                content: stepInvocations.map(\n                  (toolInvocation): ToolResultPart => {\n                    if (!('result' in toolInvocation)) {\n                      throw new MessageConversionError({\n                        originalMessage: message,\n                        message:\n                          'ToolInvocation must have a result: ' +\n                          JSON.stringify(toolInvocation),\n                      });\n                    }\n\n                    const { toolCallId, toolName, result } = toolInvocation;\n\n                    const tool = tools[toolName];\n                    return tool?.experimental_toToolResultContent != null\n                      ? {\n                          type: 'tool-result',\n                          toolCallId,\n                          toolName,\n                          result: tool.experimental_toToolResultContent(result),\n                          experimental_content:\n                            tool.experimental_toToolResultContent(result),\n                        }\n                      : {\n                          type: 'tool-result',\n                          toolCallId,\n                          toolName,\n                          result,\n                        };\n                  },\n                ),\n              });\n            }\n\n            // updates for next block\n            block = [];\n            blockHasToolInvocations = false;\n            currentStep++;\n          }\n\n          for (const part of message.parts) {\n            switch (part.type) {\n              case 'text': {\n                if (blockHasToolInvocations) {\n                  processBlock(); // text must come before tool invocations\n                }\n                block.push(part);\n                break;\n              }\n              case 'file':\n              case 'reasoning': {\n                block.push(part);\n                break;\n              }\n              case 'tool-invocation': {\n                if ((part.toolInvocation.step ?? 0) !== currentStep) {\n                  processBlock();\n                }\n                block.push(part);\n                blockHasToolInvocations = true;\n                break;\n              }\n            }\n          }\n\n          processBlock();\n\n          break;\n        }\n\n        const toolInvocations = message.toolInvocations;\n\n        if (toolInvocations == null || toolInvocations.length === 0) {\n          coreMessages.push({ role: 'assistant', content });\n          break;\n        }\n\n        const maxStep = toolInvocations.reduce((max, toolInvocation) => {\n          return Math.max(max, toolInvocation.step ?? 0);\n        }, 0);\n\n        for (let i = 0; i <= maxStep; i++) {\n          const stepInvocations = toolInvocations.filter(\n            toolInvocation => (toolInvocation.step ?? 0) === i,\n          );\n\n          if (stepInvocations.length === 0) {\n            continue;\n          }\n\n          // assistant message with tool calls\n          coreMessages.push({\n            role: 'assistant',\n            content: [\n              ...(isLastMessage && content && i === 0\n                ? [{ type: 'text' as const, text: content }]\n                : []),\n              ...stepInvocations.map(\n                ({ toolCallId, toolName, args }): ToolCallPart => ({\n                  type: 'tool-call' as const,\n                  toolCallId,\n                  toolName,\n                  args,\n                }),\n              ),\n            ],\n          });\n\n          // tool message with tool results\n          coreMessages.push({\n            role: 'tool',\n            content: stepInvocations.map((toolInvocation): ToolResultPart => {\n              if (!('result' in toolInvocation)) {\n                throw new MessageConversionError({\n                  originalMessage: message,\n                  message:\n                    'ToolInvocation must have a result: ' +\n                    JSON.stringify(toolInvocation),\n                });\n              }\n\n              const { toolCallId, toolName, result } = toolInvocation;\n\n              const tool = tools[toolName];\n              return tool?.experimental_toToolResultContent != null\n                ? {\n                    type: 'tool-result',\n                    toolCallId,\n                    toolName,\n                    result: tool.experimental_toToolResultContent(result),\n                    experimental_content:\n                      tool.experimental_toToolResultContent(result),\n                  }\n                : {\n                    type: 'tool-result',\n                    toolCallId,\n                    toolName,\n                    result,\n                  };\n            }),\n          });\n        }\n\n        if (content && !isLastMessage) {\n          coreMessages.push({ role: 'assistant', content });\n        }\n\n        break;\n      }\n\n      case 'data': {\n        // ignore\n        break;\n      }\n\n      default: {\n        const _exhaustiveCheck: never = role;\n        throw new MessageConversionError({\n          originalMessage: message,\n          message: `Unsupported role: ${_exhaustiveCheck}`,\n        });\n      }\n    }\n  }\n\n  return coreMessages;\n}\n","import { z } from 'zod';\nimport { ProviderMetadata } from '../types';\nimport {\n  providerMetadataSchema,\n  ProviderOptions,\n} from '../types/provider-metadata';\nimport {\n  FilePart,\n  filePartSchema,\n  ImagePart,\n  imagePartSchema,\n  ReasoningPart,\n  reasoningPartSchema,\n  RedactedReasoningPart,\n  redactedReasoningPartSchema,\n  TextPart,\n  textPartSchema,\n  ToolCallPart,\n  toolCallPartSchema,\n  ToolResultPart,\n  toolResultPartSchema,\n} from './content-part';\n\n/**\n A system message. It can contain system information.\n\n Note: using the \"system\" part of the prompt is strongly preferred\n to increase the resilience against prompt injection attacks,\n and because not all providers support several system messages.\n */\nexport type CoreSystemMessage = {\n  role: 'system';\n  content: string;\n\n  /**\nAdditional provider-specific metadata. They are passed through\nto the provider from the AI SDK and enable provider-specific\nfunctionality that can be fully encapsulated in the provider.\n */\n  providerOptions?: ProviderOptions;\n\n  /**\n@deprecated Use `providerOptions` instead.\n */\n  experimental_providerMetadata?: ProviderMetadata;\n};\n\nexport const coreSystemMessageSchema: z.ZodType<CoreSystemMessage> = z.object({\n  role: z.literal('system'),\n  content: z.string(),\n  providerOptions: providerMetadataSchema.optional(),\n  experimental_providerMetadata: providerMetadataSchema.optional(),\n});\n\n/**\nA user message. It can contain text or a combination of text and images.\n */\nexport type CoreUserMessage = {\n  role: 'user';\n  content: UserContent;\n\n  /**\nAdditional provider-specific metadata. They are passed through\nto the provider from the AI SDK and enable provider-specific\nfunctionality that can be fully encapsulated in the provider.\n */\n  providerOptions?: ProviderOptions;\n\n  /**\n@deprecated Use `providerOptions` instead.\n*/\n  experimental_providerMetadata?: ProviderMetadata;\n};\n\nexport const coreUserMessageSchema: z.ZodType<CoreUserMessage> = z.object({\n  role: z.literal('user'),\n  content: z.union([\n    z.string(),\n    z.array(z.union([textPartSchema, imagePartSchema, filePartSchema])),\n  ]),\n  providerOptions: providerMetadataSchema.optional(),\n  experimental_providerMetadata: providerMetadataSchema.optional(),\n});\n\n/**\nContent of a user message. It can be a string or an array of text and image parts.\n */\nexport type UserContent = string | Array<TextPart | ImagePart | FilePart>;\n\n/**\nAn assistant message. It can contain text, tool calls, or a combination of text and tool calls.\n */\nexport type CoreAssistantMessage = {\n  role: 'assistant';\n  content: AssistantContent;\n\n  /**\nAdditional provider-specific metadata. They are passed through\nto the provider from the AI SDK and enable provider-specific\nfunctionality that can be fully encapsulated in the provider.\n */\n  providerOptions?: ProviderOptions;\n\n  /**\n@deprecated Use `providerOptions` instead.\n*/\n  experimental_providerMetadata?: ProviderMetadata;\n};\n\nexport const coreAssistantMessageSchema: z.ZodType<CoreAssistantMessage> =\n  z.object({\n    role: z.literal('assistant'),\n    content: z.union([\n      z.string(),\n      z.array(\n        z.union([\n          textPartSchema,\n          filePartSchema,\n          reasoningPartSchema,\n          redactedReasoningPartSchema,\n          toolCallPartSchema,\n        ]),\n      ),\n    ]),\n    providerOptions: providerMetadataSchema.optional(),\n    experimental_providerMetadata: providerMetadataSchema.optional(),\n  });\n\n/**\nContent of an assistant message.\nIt can be a string or an array of text, image, reasoning, redacted reasoning, and tool call parts.\n */\nexport type AssistantContent =\n  | string\n  | Array<\n      TextPart | FilePart | ReasoningPart | RedactedReasoningPart | ToolCallPart\n    >;\n\n/**\nA tool message. It contains the result of one or more tool calls.\n */\nexport type CoreToolMessage = {\n  role: 'tool';\n  content: ToolContent;\n\n  /**\nAdditional provider-specific metadata. They are passed through\nto the provider from the AI SDK and enable provider-specific\nfunctionality that can be fully encapsulated in the provider.\n */\n  providerOptions?: ProviderOptions;\n\n  /**\n@deprecated Use `providerOptions` instead.\n*/\n  experimental_providerMetadata?: ProviderMetadata;\n};\n\nexport const coreToolMessageSchema: z.ZodType<CoreToolMessage> = z.object({\n  role: z.literal('tool'),\n  content: z.array(toolResultPartSchema),\n  providerOptions: providerMetadataSchema.optional(),\n  experimental_providerMetadata: providerMetadataSchema.optional(),\n});\n\n/**\nContent of a tool message. It is an array of tool result parts.\n */\nexport type ToolContent = Array<ToolResultPart>;\n\n/**\nA message that can be used in the `messages` field of a prompt.\nIt can be a user message, an assistant message, or a tool message.\n */\nexport type CoreMessage =\n  | CoreSystemMessage\n  | CoreUserMessage\n  | CoreAssistantMessage\n  | CoreToolMessage;\n\nexport const coreMessageSchema: z.ZodType<CoreMessage> = z.union([\n  coreSystemMessageSchema,\n  coreUserMessageSchema,\n  coreAssistantMessageSchema,\n  coreToolMessageSchema,\n]);\n","import { LanguageModelV1ProviderMetadata } from '@ai-sdk/provider';\nimport { z } from 'zod';\nimport { jsonValueSchema } from './json-value';\n\n/**\nAdditional provider-specific metadata that is returned from the provider.\n\nThis is needed to enable provider-specific functionality that can be\nfully encapsulated in the provider.\n */\nexport type ProviderMetadata = LanguageModelV1ProviderMetadata;\n\n/**\nAdditional provider-specific options.\n\nThey are passed through to the provider from the AI SDK and enable\nprovider-specific functionality that can be fully encapsulated in the provider.\n */\n// TODO change to LanguageModelV2ProviderOptions in language model v2\nexport type ProviderOptions = LanguageModelV1ProviderMetadata;\n\nexport const providerMetadataSchema: z.ZodType<ProviderMetadata> = z.record(\n  z.string(),\n  z.record(z.string(), jsonValueSchema),\n);\n","import { JSONValue } from '@ai-sdk/provider';\nimport { z } from 'zod';\n\nexport const jsonValueSchema: z.ZodType<JSONValue> = z.lazy(() =>\n  z.union([\n    z.null(),\n    z.string(),\n    z.number(),\n    z.boolean(),\n    z.record(z.string(), jsonValueSchema),\n    z.array(jsonValueSchema),\n  ]),\n);\n","import { z } from 'zod';\nimport {\n  ProviderMetadata,\n  providerMetadataSchema,\n  ProviderOptions,\n} from '../types/provider-metadata';\nimport { DataContent, dataContentSchema } from './data-content';\nimport {\n  ToolResultContent,\n  toolResultContentSchema,\n} from './tool-result-content';\n\n/**\nText content part of a prompt. It contains a string of text.\n */\nexport interface TextPart {\n  type: 'text';\n\n  /**\nThe text content.\n   */\n  text: string;\n\n  /**\nAdditional provider-specific metadata. They are passed through\nto the provider from the AI SDK and enable provider-specific\nfunctionality that can be fully encapsulated in the provider.\n */\n  providerOptions?: ProviderOptions;\n\n  /**\n@deprecated Use `providerOptions` instead.\n */\n  experimental_providerMetadata?: ProviderMetadata;\n}\n\n/**\n@internal\n */\nexport const textPartSchema: z.ZodType<TextPart> = z.object({\n  type: z.literal('text'),\n  text: z.string(),\n  providerOptions: providerMetadataSchema.optional(),\n  experimental_providerMetadata: providerMetadataSchema.optional(),\n});\n\n/**\nImage content part of a prompt. It contains an image.\n */\nexport interface ImagePart {\n  type: 'image';\n\n  /**\nImage data. Can either be:\n\n- data: a base64-encoded string, a Uint8Array, an ArrayBuffer, or a Buffer\n- URL: a URL that points to the image\n   */\n  image: DataContent | URL;\n\n  /**\nOptional mime type of the image.\n   */\n  mimeType?: string;\n\n  /**\nAdditional provider-specific metadata. They are passed through\nto the provider from the AI SDK and enable provider-specific\nfunctionality that can be fully encapsulated in the provider.\n */\n  providerOptions?: ProviderOptions;\n\n  /**\n@deprecated Use `providerOptions` instead.\n */\n  experimental_providerMetadata?: ProviderMetadata;\n}\n\n/**\n@internal\n */\nexport const imagePartSchema: z.ZodType<ImagePart> = z.object({\n  type: z.literal('image'),\n  image: z.union([dataContentSchema, z.instanceof(URL)]),\n  mimeType: z.string().optional(),\n  providerOptions: providerMetadataSchema.optional(),\n  experimental_providerMetadata: providerMetadataSchema.optional(),\n});\n\n/**\nFile content part of a prompt. It contains a file.\n */\nexport interface FilePart {\n  type: 'file';\n\n  /**\nFile data. Can either be:\n\n- data: a base64-encoded string, a Uint8Array, an ArrayBuffer, or a Buffer\n- URL: a URL that points to the image\n   */\n  data: DataContent | URL;\n\n  /**\nOptional filename of the file.\n   */\n  filename?: string;\n\n  /**\nMime type of the file.\n   */\n  mimeType: string;\n\n  /**\nAdditional provider-specific metadata. They are passed through\nto the provider from the AI SDK and enable provider-specific\nfunctionality that can be fully encapsulated in the provider.\n */\n  providerOptions?: ProviderOptions;\n\n  /**\n@deprecated Use `providerOptions` instead.\n */\n  experimental_providerMetadata?: ProviderMetadata;\n}\n\n/**\n@internal\n */\nexport const filePartSchema: z.ZodType<FilePart> = z.object({\n  type: z.literal('file'),\n  data: z.union([dataContentSchema, z.instanceof(URL)]),\n  filename: z.string().optional(),\n  mimeType: z.string(),\n  providerOptions: providerMetadataSchema.optional(),\n  experimental_providerMetadata: providerMetadataSchema.optional(),\n});\n\n/**\n * Reasoning content part of a prompt. It contains a reasoning.\n */\nexport interface ReasoningPart {\n  type: 'reasoning';\n\n  /**\nThe reasoning text.\n   */\n  text: string;\n\n  /**\nAn optional signature for verifying that the reasoning originated from the model.\n   */\n  signature?: string;\n\n  /**\nAdditional provider-specific metadata. They are passed through\nto the provider from the AI SDK and enable provider-specific\nfunctionality that can be fully encapsulated in the provider.\n */\n  providerOptions?: ProviderOptions;\n\n  /**\n@deprecated Use `providerOptions` instead.\n */\n  experimental_providerMetadata?: ProviderMetadata;\n}\n\n/**\n@internal\n */\nexport const reasoningPartSchema: z.ZodType<ReasoningPart> = z.object({\n  type: z.literal('reasoning'),\n  text: z.string(),\n  providerOptions: providerMetadataSchema.optional(),\n  experimental_providerMetadata: providerMetadataSchema.optional(),\n});\n\n/**\nRedacted reasoning content part of a prompt.\n */\nexport interface RedactedReasoningPart {\n  type: 'redacted-reasoning';\n\n  /**\nRedacted reasoning data.\n   */\n  data: string;\n\n  /**\nAdditional provider-specific metadata. They are passed through\nto the provider from the AI SDK and enable provider-specific\nfunctionality that can be fully encapsulated in the provider.\n */\n  providerOptions?: ProviderOptions;\n\n  /**\n@deprecated Use `providerOptions` instead.\n */\n  experimental_providerMetadata?: ProviderMetadata;\n}\n\n/**\n@internal\n */\nexport const redactedReasoningPartSchema: z.ZodType<RedactedReasoningPart> =\n  z.object({\n    type: z.literal('redacted-reasoning'),\n    data: z.string(),\n    providerOptions: providerMetadataSchema.optional(),\n    experimental_providerMetadata: providerMetadataSchema.optional(),\n  });\n\n/**\nTool call content part of a prompt. It contains a tool call (usually generated by the AI model).\n */\nexport interface ToolCallPart {\n  type: 'tool-call';\n\n  /**\nID of the tool call. This ID is used to match the tool call with the tool result.\n */\n  toolCallId: string;\n\n  /**\nName of the tool that is being called.\n */\n  toolName: string;\n\n  /**\nArguments of the tool call. This is a JSON-serializable object that matches the tool's input schema.\n   */\n  args: unknown;\n\n  /**\nAdditional provider-specific metadata. They are passed through\nto the provider from the AI SDK and enable provider-specific\nfunctionality that can be fully encapsulated in the provider.\n */\n  providerOptions?: ProviderOptions;\n\n  /**\n@deprecated Use `providerOptions` instead.\n */\n  experimental_providerMetadata?: ProviderMetadata;\n}\n\n/**\n@internal\n */\nexport const toolCallPartSchema: z.ZodType<ToolCallPart> = z.object({\n  type: z.literal('tool-call'),\n  toolCallId: z.string(),\n  toolName: z.string(),\n  args: z.unknown(),\n  providerOptions: providerMetadataSchema.optional(),\n  experimental_providerMetadata: providerMetadataSchema.optional(),\n}) as z.ZodType<ToolCallPart>; // necessary bc args is optional on Zod type\n\n/**\nTool result content part of a prompt. It contains the result of the tool call with the matching ID.\n */\nexport interface ToolResultPart {\n  type: 'tool-result';\n\n  /**\nID of the tool call that this result is associated with.\n */\n  toolCallId: string;\n\n  /**\nName of the tool that generated this result.\n  */\n  toolName: string;\n\n  /**\nResult of the tool call. This is a JSON-serializable object.\n   */\n  result: unknown;\n\n  /**\nMulti-part content of the tool result. Only for tools that support multipart results.\n   */\n  experimental_content?: ToolResultContent;\n\n  /**\nOptional flag if the result is an error or an error message.\n   */\n  isError?: boolean;\n\n  /**\nAdditional provider-specific metadata. They are passed through\nto the provider from the AI SDK and enable provider-specific\nfunctionality that can be fully encapsulated in the provider.\n */\n  providerOptions?: ProviderOptions;\n\n  /**\n@deprecated Use `providerOptions` instead.\n */\n  experimental_providerMetadata?: ProviderMetadata;\n}\n\n/**\n@internal\n */\nexport const toolResultPartSchema: z.ZodType<ToolResultPart> = z.object({\n  type: z.literal('tool-result'),\n  toolCallId: z.string(),\n  toolName: z.string(),\n  result: z.unknown(),\n  content: toolResultContentSchema.optional(),\n  isError: z.boolean().optional(),\n  providerOptions: providerMetadataSchema.optional(),\n  experimental_providerMetadata: providerMetadataSchema.optional(),\n}) as z.ZodType<ToolResultPart>; // necessary bc result is optional on Zod type\n","import { z } from 'zod';\n\nexport type ToolResultContent = Array<\n  | {\n      type: 'text';\n      text: string;\n    }\n  | {\n      type: 'image';\n      data: string; // base64 encoded png image, e.g. screenshot\n      mimeType?: string; // e.g. 'image/png';\n    }\n>;\n\nexport const toolResultContentSchema: z.ZodType<ToolResultContent> = z.array(\n  z.union([\n    z.object({ type: z.literal('text'), text: z.string() }),\n    z.object({\n      type: z.literal('image'),\n      data: z.string(),\n      mimeType: z.string().optional(),\n    }),\n  ]),\n);\n\nexport function isToolResultContent(\n  value: unknown,\n): value is ToolResultContent {\n  if (!Array.isArray(value) || value.length === 0) {\n    return false;\n  }\n\n  return value.every(part => {\n    if (typeof part !== 'object' || part === null) {\n      return false;\n    }\n\n    if (part.type === 'text') {\n      return typeof part.text === 'string';\n    }\n\n    if (part.type === 'image') {\n      return (\n        typeof part.data === 'string' &&\n        (part.mimeType === undefined || typeof part.mimeType === 'string')\n      );\n    }\n\n    return false;\n  });\n}\n","/**\nRepresents the number of tokens used in a prompt and completion.\n */\nexport type LanguageModelUsage = {\n  /**\nThe number of tokens used in the prompt.\n   */\n  promptTokens: number;\n\n  /**\nThe number of tokens used in the completion.\n */\n  completionTokens: number;\n\n  /**\nThe total number of tokens used (promptTokens + completionTokens).\n   */\n  totalTokens: number;\n};\n\n/**\nRepresents the number of tokens used in an embedding.\n */\nexport type EmbeddingModelUsage = {\n  /**\nThe number of tokens used in the embedding.\n   */\n  tokens: number;\n};\n\nexport function calculateLanguageModelUsage({\n  promptTokens,\n  completionTokens,\n}: {\n  promptTokens: number;\n  completionTokens: number;\n}): LanguageModelUsage {\n  return {\n    promptTokens,\n    completionTokens,\n    totalTokens: promptTokens + completionTokens,\n  };\n}\n\nexport function addLanguageModelUsage(\n  usage1: LanguageModelUsage,\n  usage2: LanguageModelUsage,\n): LanguageModelUsage {\n  return {\n    promptTokens: usage1.promptTokens + usage2.promptTokens,\n    completionTokens: usage1.completionTokens + usage2.completionTokens,\n    totalTokens: usage1.totalTokens + usage2.totalTokens,\n  };\n}\n","import { JSONSchema7 } from '@ai-sdk/provider';\n\nconst DEFAULT_SCHEMA_PREFIX = 'JSON schema:';\nconst DEFAULT_SCHEMA_SUFFIX =\n  'You MUST answer with a JSON object that matches the JSON schema above.';\nconst DEFAULT_GENERIC_SUFFIX = 'You MUST answer with JSON.';\n\nexport function injectJsonInstruction({\n  prompt,\n  schema,\n  schemaPrefix = schema != null ? DEFAULT_SCHEMA_PREFIX : undefined,\n  schemaSuffix = schema != null\n    ? DEFAULT_SCHEMA_SUFFIX\n    : DEFAULT_GENERIC_SUFFIX,\n}: {\n  prompt?: string;\n  schema?: JSONSchema7;\n  schemaPrefix?: string;\n  schemaSuffix?: string;\n}): string {\n  return [\n    prompt != null && prompt.length > 0 ? prompt : undefined,\n    prompt != null && prompt.length > 0 ? '' : undefined, // add a newline if prompt is not null\n    schemaPrefix,\n    schema != null ? JSON.stringify(schema) : undefined,\n    schemaSuffix,\n  ]\n    .filter(line => line != null)\n    .join('\\n');\n}\n","import {\n  isJSONArray,\n  isJSONObject,\n  JSONObject,\n  JSONSchema7,\n  JSONValue,\n  TypeValidationError,\n  UnsupportedFunctionalityError,\n} from '@ai-sdk/provider';\nimport { safeValidateTypes, ValidationResult } from '@ai-sdk/provider-utils';\nimport { asSchema, DeepPartial, Schema } from '@ai-sdk/ui-utils';\nimport { z } from 'zod';\nimport { NoObjectGeneratedError } from '../../errors/no-object-generated-error';\nimport {\n  AsyncIterableStream,\n  createAsyncIterableStream,\n} from '../util/async-iterable-stream';\nimport { ObjectStreamPart } from './stream-object-result';\nimport {\n  FinishReason,\n  LanguageModelResponseMetadata,\n  LanguageModelUsage,\n} from '../types';\n\nexport interface OutputStrategy<PARTIAL, RESULT, ELEMENT_STREAM> {\n  readonly type: 'object' | 'array' | 'enum' | 'no-schema';\n  readonly jsonSchema: JSONSchema7 | undefined;\n\n  validatePartialResult({\n    value,\n    textDelta,\n    isFinalDelta,\n  }: {\n    value: JSONValue;\n    textDelta: string;\n    isFirstDelta: boolean;\n    isFinalDelta: boolean;\n    latestObject: PARTIAL | undefined;\n  }): ValidationResult<{\n    partial: PARTIAL;\n    textDelta: string;\n  }>;\n  validateFinalResult(\n    value: JSONValue | undefined,\n    context: {\n      text: string;\n      response: LanguageModelResponseMetadata;\n      usage: LanguageModelUsage;\n    },\n  ): ValidationResult<RESULT>;\n\n  createElementStream(\n    originalStream: ReadableStream<ObjectStreamPart<PARTIAL>>,\n  ): ELEMENT_STREAM;\n}\n\nconst noSchemaOutputStrategy: OutputStrategy<JSONValue, JSONValue, never> = {\n  type: 'no-schema',\n  jsonSchema: undefined,\n\n  validatePartialResult({ value, textDelta }) {\n    return { success: true, value: { partial: value, textDelta } };\n  },\n\n  validateFinalResult(\n    value: JSONValue | undefined,\n    context: {\n      text: string;\n      response: LanguageModelResponseMetadata;\n      usage: LanguageModelUsage;\n      finishReason: FinishReason;\n    },\n  ): ValidationResult<JSONValue> {\n    return value === undefined\n      ? {\n          success: false,\n          error: new NoObjectGeneratedError({\n            message: 'No object generated: response did not match schema.',\n            text: context.text,\n            response: context.response,\n            usage: context.usage,\n            finishReason: context.finishReason,\n          }),\n        }\n      : { success: true, value };\n  },\n\n  createElementStream() {\n    throw new UnsupportedFunctionalityError({\n      functionality: 'element streams in no-schema mode',\n    });\n  },\n};\n\nconst objectOutputStrategy = <OBJECT>(\n  schema: Schema<OBJECT>,\n): OutputStrategy<DeepPartial<OBJECT>, OBJECT, never> => ({\n  type: 'object',\n  jsonSchema: schema.jsonSchema,\n\n  validatePartialResult({ value, textDelta }) {\n    return {\n      success: true,\n      value: {\n        // Note: currently no validation of partial results:\n        partial: value as DeepPartial<OBJECT>,\n        textDelta,\n      },\n    };\n  },\n\n  validateFinalResult(value: JSONValue | undefined): ValidationResult<OBJECT> {\n    return safeValidateTypes({ value, schema });\n  },\n\n  createElementStream() {\n    throw new UnsupportedFunctionalityError({\n      functionality: 'element streams in object mode',\n    });\n  },\n});\n\nconst arrayOutputStrategy = <ELEMENT>(\n  schema: Schema<ELEMENT>,\n): OutputStrategy<ELEMENT[], ELEMENT[], AsyncIterableStream<ELEMENT>> => {\n  // remove $schema from schema.jsonSchema:\n  const { $schema, ...itemSchema } = schema.jsonSchema;\n\n  return {\n    type: 'enum',\n\n    // wrap in object that contains array of elements, since most LLMs will not\n    // be able to generate an array directly:\n    // possible future optimization: use arrays directly when model supports grammar-guided generation\n    jsonSchema: {\n      $schema: 'http://json-schema.org/draft-07/schema#',\n      type: 'object',\n      properties: {\n        elements: { type: 'array', items: itemSchema },\n      },\n      required: ['elements'],\n      additionalProperties: false,\n    },\n\n    validatePartialResult({ value, latestObject, isFirstDelta, isFinalDelta }) {\n      // check that the value is an object that contains an array of elements:\n      if (!isJSONObject(value) || !isJSONArray(value.elements)) {\n        return {\n          success: false,\n          error: new TypeValidationError({\n            value,\n            cause: 'value must be an object that contains an array of elements',\n          }),\n        };\n      }\n\n      const inputArray = value.elements as Array<JSONObject>;\n      const resultArray: Array<ELEMENT> = [];\n\n      for (let i = 0; i < inputArray.length; i++) {\n        const element = inputArray[i];\n        const result = safeValidateTypes({ value: element, schema });\n\n        // special treatment for last processed element:\n        // ignore parse or validation failures, since they indicate that the\n        // last element is incomplete and should not be included in the result,\n        // unless it is the final delta\n        if (i === inputArray.length - 1 && !isFinalDelta) {\n          continue;\n        }\n\n        if (!result.success) {\n          return result;\n        }\n\n        resultArray.push(result.value);\n      }\n\n      // calculate delta:\n      const publishedElementCount = latestObject?.length ?? 0;\n\n      let textDelta = '';\n\n      if (isFirstDelta) {\n        textDelta += '[';\n      }\n\n      if (publishedElementCount > 0) {\n        textDelta += ',';\n      }\n\n      textDelta += resultArray\n        .slice(publishedElementCount) // only new elements\n        .map(element => JSON.stringify(element))\n        .join(',');\n\n      if (isFinalDelta) {\n        textDelta += ']';\n      }\n\n      return {\n        success: true,\n        value: {\n          partial: resultArray,\n          textDelta,\n        },\n      };\n    },\n\n    validateFinalResult(\n      value: JSONValue | undefined,\n    ): ValidationResult<Array<ELEMENT>> {\n      // check that the value is an object that contains an array of elements:\n      if (!isJSONObject(value) || !isJSONArray(value.elements)) {\n        return {\n          success: false,\n          error: new TypeValidationError({\n            value,\n            cause: 'value must be an object that contains an array of elements',\n          }),\n        };\n      }\n\n      const inputArray = value.elements as Array<JSONObject>;\n\n      // check that each element in the array is of the correct type:\n      for (const element of inputArray) {\n        const result = safeValidateTypes({ value: element, schema });\n        if (!result.success) {\n          return result;\n        }\n      }\n\n      return { success: true, value: inputArray as Array<ELEMENT> };\n    },\n\n    createElementStream(\n      originalStream: ReadableStream<ObjectStreamPart<ELEMENT[]>>,\n    ) {\n      let publishedElements = 0;\n\n      return createAsyncIterableStream(\n        originalStream.pipeThrough(\n          new TransformStream<ObjectStreamPart<ELEMENT[]>, ELEMENT>({\n            transform(chunk, controller) {\n              switch (chunk.type) {\n                case 'object': {\n                  const array = chunk.object;\n\n                  // publish new elements one by one:\n                  for (\n                    ;\n                    publishedElements < array.length;\n                    publishedElements++\n                  ) {\n                    controller.enqueue(array[publishedElements]);\n                  }\n\n                  break;\n                }\n\n                case 'text-delta':\n                case 'finish':\n                case 'error': // suppress error (use onError instead)\n                  break;\n\n                default: {\n                  const _exhaustiveCheck: never = chunk;\n                  throw new Error(\n                    `Unsupported chunk type: ${_exhaustiveCheck}`,\n                  );\n                }\n              }\n            },\n          }),\n        ),\n      );\n    },\n  };\n};\n\nconst enumOutputStrategy = <ENUM extends string>(\n  enumValues: Array<ENUM>,\n): OutputStrategy<ENUM, ENUM, never> => {\n  return {\n    type: 'enum',\n\n    // wrap in object that contains result, since most LLMs will not\n    // be able to generate an enum value directly:\n    // possible future optimization: use enums directly when model supports top-level enums\n    jsonSchema: {\n      $schema: 'http://json-schema.org/draft-07/schema#',\n      type: 'object',\n      properties: {\n        result: { type: 'string', enum: enumValues },\n      },\n      required: ['result'],\n      additionalProperties: false,\n    },\n\n    validateFinalResult(value: JSONValue | undefined): ValidationResult<ENUM> {\n      // check that the value is an object that contains an array of elements:\n      if (!isJSONObject(value) || typeof value.result !== 'string') {\n        return {\n          success: false,\n          error: new TypeValidationError({\n            value,\n            cause:\n              'value must be an object that contains a string in the \"result\" property.',\n          }),\n        };\n      }\n\n      const result = value.result as string;\n\n      return enumValues.includes(result as ENUM)\n        ? { success: true, value: result as ENUM }\n        : {\n            success: false,\n            error: new TypeValidationError({\n              value,\n              cause: 'value must be a string in the enum',\n            }),\n          };\n    },\n\n    validatePartialResult() {\n      // no streaming in enum mode\n      throw new UnsupportedFunctionalityError({\n        functionality: 'partial results in enum mode',\n      });\n    },\n\n    createElementStream() {\n      // no streaming in enum mode\n      throw new UnsupportedFunctionalityError({\n        functionality: 'element streams in enum mode',\n      });\n    },\n  };\n};\n\nexport function getOutputStrategy<SCHEMA>({\n  output,\n  schema,\n  enumValues,\n}: {\n  output: 'object' | 'array' | 'enum' | 'no-schema';\n  schema?: z.Schema<SCHEMA, z.ZodTypeDef, any> | Schema<SCHEMA>;\n  enumValues?: Array<SCHEMA>;\n}): OutputStrategy<any, any, any> {\n  switch (output) {\n    case 'object':\n      return objectOutputStrategy(asSchema(schema!));\n    case 'array':\n      return arrayOutputStrategy(asSchema(schema!));\n    case 'enum':\n      return enumOutputStrategy(enumValues! as Array<string>);\n    case 'no-schema':\n      return noSchemaOutputStrategy;\n    default: {\n      const _exhaustiveCheck: never = output;\n      throw new Error(`Unsupported output: ${_exhaustiveCheck}`);\n    }\n  }\n}\n","export type AsyncIterableStream<T> = AsyncIterable<T> & ReadableStream<T>;\n\nexport function createAsyncIterableStream<T>(\n  source: ReadableStream<T>,\n): AsyncIterableStream<T> {\n  const stream = source.pipeThrough(new TransformStream<T, T>());\n\n  (stream as AsyncIterableStream<T>)[Symbol.asyncIterator] = () => {\n    const reader = stream.getReader();\n    return {\n      async next(): Promise<IteratorResult<T>> {\n        const { done, value } = await reader.read();\n        return done ? { done: true, value: undefined } : { done: false, value };\n      },\n    };\n  };\n\n  return stream as AsyncIterableStream<T>;\n}\n","import { z } from 'zod';\nimport { InvalidArgumentError } from '../../errors/invalid-argument-error';\nimport { Schema } from '@ai-sdk/ui-utils';\n\nexport function validateObjectGenerationInput({\n  output,\n  mode,\n  schema,\n  schemaName,\n  schemaDescription,\n  enumValues,\n}: {\n  output?: 'object' | 'array' | 'enum' | 'no-schema';\n  schema?: z.Schema<any, z.ZodTypeDef, any> | Schema<any>;\n  schemaName?: string;\n  schemaDescription?: string;\n  enumValues?: Array<unknown>;\n  mode?: 'auto' | 'json' | 'tool';\n}) {\n  if (\n    output != null &&\n    output !== 'object' &&\n    output !== 'array' &&\n    output !== 'enum' &&\n    output !== 'no-schema'\n  ) {\n    throw new InvalidArgumentError({\n      parameter: 'output',\n      value: output,\n      message: 'Invalid output type.',\n    });\n  }\n\n  if (output === 'no-schema') {\n    if (mode === 'auto' || mode === 'tool') {\n      throw new InvalidArgumentError({\n        parameter: 'mode',\n        value: mode,\n        message: 'Mode must be \"json\" for no-schema output.',\n      });\n    }\n\n    if (schema != null) {\n      throw new InvalidArgumentError({\n        parameter: 'schema',\n        value: schema,\n        message: 'Schema is not supported for no-schema output.',\n      });\n    }\n\n    if (schemaDescription != null) {\n      throw new InvalidArgumentError({\n        parameter: 'schemaDescription',\n        value: schemaDescription,\n        message: 'Schema description is not supported for no-schema output.',\n      });\n    }\n\n    if (schemaName != null) {\n      throw new InvalidArgumentError({\n        parameter: 'schemaName',\n        value: schemaName,\n        message: 'Schema name is not supported for no-schema output.',\n      });\n    }\n\n    if (enumValues != null) {\n      throw new InvalidArgumentError({\n        parameter: 'enumValues',\n        value: enumValues,\n        message: 'Enum values are not supported for no-schema output.',\n      });\n    }\n  }\n\n  if (output === 'object') {\n    if (schema == null) {\n      throw new InvalidArgumentError({\n        parameter: 'schema',\n        value: schema,\n        message: 'Schema is required for object output.',\n      });\n    }\n\n    if (enumValues != null) {\n      throw new InvalidArgumentError({\n        parameter: 'enumValues',\n        value: enumValues,\n        message: 'Enum values are not supported for object output.',\n      });\n    }\n  }\n\n  if (output === 'array') {\n    if (schema == null) {\n      throw new InvalidArgumentError({\n        parameter: 'schema',\n        value: schema,\n        message: 'Element schema is required for array output.',\n      });\n    }\n\n    if (enumValues != null) {\n      throw new InvalidArgumentError({\n        parameter: 'enumValues',\n        value: enumValues,\n        message: 'Enum values are not supported for array output.',\n      });\n    }\n  }\n\n  if (output === 'enum') {\n    if (schema != null) {\n      throw new InvalidArgumentError({\n        parameter: 'schema',\n        value: schema,\n        message: 'Schema is not supported for enum output.',\n      });\n    }\n\n    if (schemaDescription != null) {\n      throw new InvalidArgumentError({\n        parameter: 'schemaDescription',\n        value: schemaDescription,\n        message: 'Schema description is not supported for enum output.',\n      });\n    }\n\n    if (schemaName != null) {\n      throw new InvalidArgumentError({\n        parameter: 'schemaName',\n        value: schemaName,\n        message: 'Schema name is not supported for enum output.',\n      });\n    }\n\n    if (enumValues == null) {\n      throw new InvalidArgumentError({\n        parameter: 'enumValues',\n        value: enumValues,\n        message: 'Enum values are required for enum output.',\n      });\n    }\n\n    for (const value of enumValues) {\n      if (typeof value !== 'string') {\n        throw new InvalidArgumentError({\n          parameter: 'enumValues',\n          value,\n          message: 'Enum values must be strings.',\n        });\n      }\n    }\n  }\n}\n","/**\n * Helper utility to serialize prompt content for OpenTelemetry tracing.\n * It is initially created because normalized LanguageModelV1Prompt carries\n * images as Uint8Arrays, on which JSON.stringify acts weirdly, converting\n * them to objects with stringified indices as keys, e.g. {\"0\": 42, \"1\": 69 }.\n */\n\nimport {\n  LanguageModelV1ImagePart,\n  LanguageModelV1Message,\n  LanguageModelV1Prompt,\n  LanguageModelV1ProviderMetadata,\n} from '@ai-sdk/provider';\nimport { convertDataContentToBase64String } from './data-content';\n\nexport function stringifyForTelemetry(prompt: LanguageModelV1Prompt): string {\n  const processedPrompt = prompt.map((message: LanguageModelV1Message) => {\n    return {\n      ...message,\n      content:\n        typeof message.content === 'string'\n          ? message.content\n          : message.content.map(processPart),\n    };\n  });\n\n  return JSON.stringify(processedPrompt);\n}\n\ntype MessageContentPart = Exclude<\n  LanguageModelV1Message['content'],\n  string\n>[number];\ntype ProcessedMessageContentPart =\n  | Exclude<MessageContentPart, LanguageModelV1ImagePart>\n  | {\n      type: 'image';\n      image: string | URL;\n      mimeType?: string;\n      providerMetadata?: LanguageModelV1ProviderMetadata;\n    };\n\nfunction processPart(part: MessageContentPart): ProcessedMessageContentPart {\n  if (part.type === 'image') {\n    return {\n      ...part,\n      image:\n        part.image instanceof Uint8Array\n          ? convertDataContentToBase64String(part.image)\n          : part.image,\n    };\n  }\n  return part;\n}\n","import {\n  JSONValue,\n  LanguageModelV1CallOptions,\n  LanguageModelV1FinishReason,\n  LanguageModelV1StreamPart,\n} from '@ai-sdk/provider';\nimport { createIdGenerator } from '@ai-sdk/provider-utils';\nimport {\n  DeepPartial,\n  Schema,\n  isDeepEqualData,\n  parsePartialJson,\n} from '@ai-sdk/ui-utils';\nimport { ServerResponse } from 'http';\nimport { z } from 'zod';\nimport { NoObjectGeneratedError } from '../../errors/no-object-generated-error';\nimport { DelayedPromise } from '../../util/delayed-promise';\nimport { CallSettings } from '../prompt/call-settings';\nimport { convertToLanguageModelPrompt } from '../prompt/convert-to-language-model-prompt';\nimport { prepareCallSettings } from '../prompt/prepare-call-settings';\nimport { prepareRetries } from '../prompt/prepare-retries';\nimport { Prompt } from '../prompt/prompt';\nimport { standardizePrompt } from '../prompt/standardize-prompt';\nimport { assembleOperationName } from '../telemetry/assemble-operation-name';\nimport { getBaseTelemetryAttributes } from '../telemetry/get-base-telemetry-attributes';\nimport { getTracer } from '../telemetry/get-tracer';\nimport { recordSpan } from '../telemetry/record-span';\nimport { selectTelemetryAttributes } from '../telemetry/select-telemetry-attributes';\nimport { TelemetrySettings } from '../telemetry/telemetry-settings';\nimport {\n  CallWarning,\n  FinishReason,\n  LanguageModel,\n  LogProbs,\n} from '../types/language-model';\nimport { LanguageModelRequestMetadata } from '../types/language-model-request-metadata';\nimport { LanguageModelResponseMetadata } from '../types/language-model-response-metadata';\nimport { ProviderMetadata, ProviderOptions } from '../types/provider-metadata';\nimport {\n  LanguageModelUsage,\n  calculateLanguageModelUsage,\n} from '../types/usage';\nimport {\n  AsyncIterableStream,\n  createAsyncIterableStream,\n} from '../util/async-iterable-stream';\nimport { createStitchableStream } from '../util/create-stitchable-stream';\nimport { now as originalNow } from '../util/now';\nimport { prepareOutgoingHttpHeaders } from '../util/prepare-outgoing-http-headers';\nimport { prepareResponseHeaders } from '../util/prepare-response-headers';\nimport { writeToServerResponse } from '../util/write-to-server-response';\nimport { injectJsonInstruction } from './inject-json-instruction';\nimport { OutputStrategy, getOutputStrategy } from './output-strategy';\nimport { ObjectStreamPart, StreamObjectResult } from './stream-object-result';\nimport { validateObjectGenerationInput } from './validate-object-generation-input';\nimport { stringifyForTelemetry } from '../prompt/stringify-for-telemetry';\n\nconst originalGenerateId = createIdGenerator({ prefix: 'aiobj', size: 24 });\n\n/**\nCallback that is set using the `onError` option.\n\n@param event - The event that is passed to the callback.\n */\nexport type StreamObjectOnErrorCallback = (event: {\n  error: unknown;\n}) => Promise<void> | void;\n\n/**\nCallback that is set using the `onFinish` option.\n\n@param event - The event that is passed to the callback.\n */\nexport type StreamObjectOnFinishCallback<RESULT> = (event: {\n  /**\nThe token usage of the generated response.\n*/\n  usage: LanguageModelUsage;\n\n  /**\nThe generated object. Can be undefined if the final object does not match the schema.\n*/\n  object: RESULT | undefined;\n\n  /**\nOptional error object. This is e.g. a TypeValidationError when the final object does not match the schema.\n*/\n  error: unknown | undefined;\n\n  /**\nResponse metadata.\n */\n  response: LanguageModelResponseMetadata;\n\n  /**\nWarnings from the model provider (e.g. unsupported settings).\n*/\n  warnings?: CallWarning[];\n\n  /**\nAdditional provider-specific metadata. They are passed through\nto the provider from the AI SDK and enable provider-specific\nfunctionality that can be fully encapsulated in the provider.\n*/\n  providerMetadata: ProviderMetadata | undefined;\n\n  /**\n@deprecated Use `providerMetadata` instead.\n*/\n  experimental_providerMetadata?: ProviderMetadata;\n}) => Promise<void> | void;\n\n/**\nGenerate a structured, typed object for a given prompt and schema using a language model.\n\nThis function streams the output. If you do not want to stream the output, use `generateObject` instead.\n\n@return\nA result object for accessing the partial object stream and additional information.\n */\nexport function streamObject<OBJECT>(\n  options: Omit<CallSettings, 'stopSequences'> &\n    Prompt & {\n      output?: 'object' | undefined;\n\n      /**\nThe language model to use.\n     */\n      model: LanguageModel;\n\n      /**\nThe schema of the object that the model should generate.\n */\n      schema: z.Schema<OBJECT, z.ZodTypeDef, any> | Schema<OBJECT>;\n\n      /**\nOptional name of the output that should be generated.\nUsed by some providers for additional LLM guidance, e.g.\nvia tool or schema name.\n     */\n      schemaName?: string;\n\n      /**\nOptional description of the output that should be generated.\nUsed by some providers for additional LLM guidance, e.g.\nvia tool or schema description.\n */\n      schemaDescription?: string;\n\n      /**\nThe mode to use for object generation.\n\nThe schema is converted into a JSON schema and used in one of the following ways\n\n- 'auto': The provider will choose the best mode for the model.\n- 'tool': A tool with the JSON schema as parameters is provided and the provider is instructed to use it.\n- 'json': The JSON schema and an instruction are injected into the prompt. If the provider supports JSON mode, it is enabled. If the provider supports JSON grammars, the grammar is used.\n\nPlease note that most providers do not support all modes.\n\nDefault and recommended: 'auto' (best mode for the model).\n     */\n      mode?: 'auto' | 'json' | 'tool';\n\n      /**\nOptional telemetry configuration (experimental).\n     */\n      experimental_telemetry?: TelemetrySettings;\n\n      /**\nAdditional provider-specific options. They are passed through\nto the provider from the AI SDK and enable provider-specific\nfunctionality that can be fully encapsulated in the provider.\n */\n      providerOptions?: ProviderOptions;\n\n      /**\n@deprecated Use `providerOptions` instead.\n*/\n      experimental_providerMetadata?: ProviderMetadata;\n\n      /**\nCallback that is invoked when an error occurs during streaming.\nYou can use it to log errors.\nThe stream processing will pause until the callback promise is resolved.\n     */\n      onError?: StreamObjectOnErrorCallback;\n\n      /**\nCallback that is called when the LLM response and the final object validation are finished.\n     */\n      onFinish?: StreamObjectOnFinishCallback<OBJECT>;\n\n      /**\n       * Internal. For test use only. May change without notice.\n       */\n      _internal?: {\n        generateId?: () => string;\n        currentDate?: () => Date;\n        now?: () => number;\n      };\n    },\n): StreamObjectResult<DeepPartial<OBJECT>, OBJECT, never>;\n/**\nGenerate an array with structured, typed elements for a given prompt and element schema using a language model.\n\nThis function streams the output. If you do not want to stream the output, use `generateObject` instead.\n\n@return\nA result object for accessing the partial object stream and additional information.\n */\nexport function streamObject<ELEMENT>(\n  options: Omit<CallSettings, 'stopSequences'> &\n    Prompt & {\n      output: 'array';\n\n      /**\nThe language model to use.\n     */\n      model: LanguageModel;\n\n      /**\nThe element schema of the array that the model should generate.\n */\n      schema: z.Schema<ELEMENT, z.ZodTypeDef, any> | Schema<ELEMENT>;\n\n      /**\nOptional name of the array that should be generated.\nUsed by some providers for additional LLM guidance, e.g.\nvia tool or schema name.\n     */\n      schemaName?: string;\n\n      /**\nOptional description of the array that should be generated.\nUsed by some providers for additional LLM guidance, e.g.\nvia tool or schema description.\n */\n      schemaDescription?: string;\n\n      /**\nThe mode to use for object generation.\n\nThe schema is converted into a JSON schema and used in one of the following ways\n\n- 'auto': The provider will choose the best mode for the model.\n- 'tool': A tool with the JSON schema as parameters is provided and the provider is instructed to use it.\n- 'json': The JSON schema and an instruction are injected into the prompt. If the provider supports JSON mode, it is enabled. If the provider supports JSON grammars, the grammar is used.\n\nPlease note that most providers do not support all modes.\n\nDefault and recommended: 'auto' (best mode for the model).\n     */\n      mode?: 'auto' | 'json' | 'tool';\n\n      /**\nOptional telemetry configuration (experimental).\n     */\n      experimental_telemetry?: TelemetrySettings;\n\n      /**\nAdditional provider-specific options. They are passed through\nto the provider from the AI SDK and enable provider-specific\nfunctionality that can be fully encapsulated in the provider.\n */\n      providerOptions?: ProviderOptions;\n\n      /**\n@deprecated Use `providerOptions` instead.\n*/\n      experimental_providerMetadata?: ProviderMetadata;\n\n      /**\nCallback that is invoked when an error occurs during streaming.\nYou can use it to log errors.\nThe stream processing will pause until the callback promise is resolved.\n     */\n      onError?: StreamObjectOnErrorCallback;\n\n      /**\nCallback that is called when the LLM response and the final object validation are finished.\n     */\n      onFinish?: StreamObjectOnFinishCallback<Array<ELEMENT>>;\n\n      /**\n       * Internal. For test use only. May change without notice.\n       */\n      _internal?: {\n        generateId?: () => string;\n        currentDate?: () => Date;\n        now?: () => number;\n      };\n    },\n): StreamObjectResult<\n  Array<ELEMENT>,\n  Array<ELEMENT>,\n  AsyncIterableStream<ELEMENT>\n>;\n/**\nGenerate JSON with any schema for a given prompt using a language model.\n\nThis function streams the output. If you do not want to stream the output, use `generateObject` instead.\n\n@return\nA result object for accessing the partial object stream and additional information.\n */\nexport function streamObject(\n  options: Omit<CallSettings, 'stopSequences'> &\n    Prompt & {\n      output: 'no-schema';\n\n      /**\nThe language model to use.\n     */\n      model: LanguageModel;\n\n      /**\nThe mode to use for object generation. Must be \"json\" for no-schema output.\n     */\n      mode?: 'json';\n\n      /**\nOptional telemetry configuration (experimental).\n     */\n      experimental_telemetry?: TelemetrySettings;\n\n      /**\nAdditional provider-specific options. They are passed through\nto the provider from the AI SDK and enable provider-specific\nfunctionality that can be fully encapsulated in the provider.\n */\n      providerOptions?: ProviderOptions;\n\n      /**\n@deprecated Use `providerOptions` instead.\n*/\n      experimental_providerMetadata?: ProviderMetadata;\n\n      /**\nCallback that is invoked when an error occurs during streaming.\nYou can use it to log errors.\nThe stream processing will pause until the callback promise is resolved.\n     */\n      onError?: StreamObjectOnErrorCallback;\n\n      /**\nCallback that is called when the LLM response and the final object validation are finished.\n     */\n      onFinish?: StreamObjectOnFinishCallback<JSONValue>;\n\n      /**\n       * Internal. For test use only. May change without notice.\n       */\n      _internal?: {\n        generateId?: () => string;\n        currentDate?: () => Date;\n        now?: () => number;\n      };\n    },\n): StreamObjectResult<JSONValue, JSONValue, never>;\nexport function streamObject<SCHEMA, PARTIAL, RESULT, ELEMENT_STREAM>({\n  model,\n  schema: inputSchema,\n  schemaName,\n  schemaDescription,\n  mode,\n  output = 'object',\n  system,\n  prompt,\n  messages,\n  maxRetries,\n  abortSignal,\n  headers,\n  experimental_telemetry: telemetry,\n  experimental_providerMetadata,\n  providerOptions = experimental_providerMetadata,\n  onError,\n  onFinish,\n  _internal: {\n    generateId = originalGenerateId,\n    currentDate = () => new Date(),\n    now = originalNow,\n  } = {},\n  ...settings\n}: Omit<CallSettings, 'stopSequences'> &\n  Prompt & {\n    /**\n     * The expected structure of the output.\n     *\n     * - 'object': Generate a single object that conforms to the schema.\n     * - 'array': Generate an array of objects that conform to the schema.\n     * - 'no-schema': Generate any JSON object. No schema is specified.\n     *\n     * Default is 'object' if not specified.\n     */\n    output?: 'object' | 'array' | 'no-schema';\n\n    model: LanguageModel;\n    schema?: z.Schema<SCHEMA, z.ZodTypeDef, any> | Schema<SCHEMA>;\n    schemaName?: string;\n    schemaDescription?: string;\n    mode?: 'auto' | 'json' | 'tool';\n    experimental_telemetry?: TelemetrySettings;\n    providerOptions?: ProviderOptions;\n    experimental_providerMetadata?: ProviderMetadata;\n    onError?: StreamObjectOnErrorCallback;\n    onFinish?: StreamObjectOnFinishCallback<RESULT>;\n    _internal?: {\n      generateId?: () => string;\n      currentDate?: () => Date;\n      now?: () => number;\n    };\n  }): StreamObjectResult<PARTIAL, RESULT, ELEMENT_STREAM> {\n  validateObjectGenerationInput({\n    output,\n    mode,\n    schema: inputSchema,\n    schemaName,\n    schemaDescription,\n  });\n\n  const outputStrategy = getOutputStrategy({ output, schema: inputSchema });\n\n  // automatically set mode to 'json' for no-schema output\n  if (outputStrategy.type === 'no-schema' && mode === undefined) {\n    mode = 'json';\n  }\n\n  return new DefaultStreamObjectResult({\n    model,\n    telemetry,\n    headers,\n    settings,\n    maxRetries,\n    abortSignal,\n    outputStrategy,\n    system,\n    prompt,\n    messages,\n    schemaName,\n    schemaDescription,\n    providerOptions,\n    mode,\n    onError,\n    onFinish,\n    generateId,\n    currentDate,\n    now,\n  });\n}\n\nclass DefaultStreamObjectResult<PARTIAL, RESULT, ELEMENT_STREAM>\n  implements StreamObjectResult<PARTIAL, RESULT, ELEMENT_STREAM>\n{\n  private readonly objectPromise = new DelayedPromise<RESULT>();\n  private readonly usagePromise = new DelayedPromise<LanguageModelUsage>();\n  private readonly providerMetadataPromise = new DelayedPromise<\n    ProviderMetadata | undefined\n  >();\n  private readonly warningsPromise = new DelayedPromise<\n    CallWarning[] | undefined\n  >();\n  private readonly requestPromise =\n    new DelayedPromise<LanguageModelRequestMetadata>();\n  private readonly responsePromise =\n    new DelayedPromise<LanguageModelResponseMetadata>();\n\n  private readonly baseStream: ReadableStream<ObjectStreamPart<PARTIAL>>;\n\n  private readonly outputStrategy: OutputStrategy<\n    PARTIAL,\n    RESULT,\n    ELEMENT_STREAM\n  >;\n\n  constructor({\n    model,\n    headers,\n    telemetry,\n    settings,\n    maxRetries: maxRetriesArg,\n    abortSignal,\n    outputStrategy,\n    system,\n    prompt,\n    messages,\n    schemaName,\n    schemaDescription,\n    providerOptions,\n    mode,\n    onError,\n    onFinish,\n    generateId,\n    currentDate,\n    now,\n  }: {\n    model: LanguageModel;\n    telemetry: TelemetrySettings | undefined;\n    headers: Record<string, string | undefined> | undefined;\n    settings: Omit<CallSettings, 'abortSignal' | 'headers'>;\n    maxRetries: number | undefined;\n    abortSignal: AbortSignal | undefined;\n    outputStrategy: OutputStrategy<PARTIAL, RESULT, ELEMENT_STREAM>;\n    system: Prompt['system'];\n    prompt: Prompt['prompt'];\n    messages: Prompt['messages'];\n    schemaName: string | undefined;\n    schemaDescription: string | undefined;\n    providerOptions: ProviderOptions | undefined;\n    mode: 'auto' | 'json' | 'tool' | undefined;\n    onError: StreamObjectOnErrorCallback | undefined;\n    onFinish: StreamObjectOnFinishCallback<RESULT> | undefined;\n    generateId: () => string;\n    currentDate: () => Date;\n    now: () => number;\n  }) {\n    const { maxRetries, retry } = prepareRetries({\n      maxRetries: maxRetriesArg,\n    });\n\n    const baseTelemetryAttributes = getBaseTelemetryAttributes({\n      model,\n      telemetry,\n      headers,\n      settings: { ...settings, maxRetries },\n    });\n\n    const tracer = getTracer(telemetry);\n    const self = this;\n\n    const stitchableStream =\n      createStitchableStream<ObjectStreamPart<PARTIAL>>();\n\n    const eventProcessor = new TransformStream<\n      ObjectStreamPart<PARTIAL>,\n      ObjectStreamPart<PARTIAL>\n    >({\n      transform(chunk, controller) {\n        controller.enqueue(chunk);\n\n        if (chunk.type === 'error') {\n          onError?.({ error: chunk.error });\n        }\n      },\n    });\n\n    this.baseStream = stitchableStream.stream.pipeThrough(eventProcessor);\n\n    recordSpan({\n      name: 'ai.streamObject',\n      attributes: selectTelemetryAttributes({\n        telemetry,\n        attributes: {\n          ...assembleOperationName({\n            operationId: 'ai.streamObject',\n            telemetry,\n          }),\n          ...baseTelemetryAttributes,\n          // specific settings that only make sense on the outer level:\n          'ai.prompt': {\n            input: () => JSON.stringify({ system, prompt, messages }),\n          },\n          'ai.schema':\n            outputStrategy.jsonSchema != null\n              ? { input: () => JSON.stringify(outputStrategy.jsonSchema) }\n              : undefined,\n          'ai.schema.name': schemaName,\n          'ai.schema.description': schemaDescription,\n          'ai.settings.output': outputStrategy.type,\n          'ai.settings.mode': mode,\n        },\n      }),\n      tracer,\n      endWhenDone: false,\n      fn: async rootSpan => {\n        // use the default provider mode when the mode is set to 'auto' or unspecified\n        if (mode === 'auto' || mode == null) {\n          mode = model.defaultObjectGenerationMode;\n        }\n\n        let callOptions: LanguageModelV1CallOptions;\n        let transformer: Transformer<\n          LanguageModelV1StreamPart,\n          string | Omit<LanguageModelV1StreamPart, 'text-delta'>\n        >;\n\n        switch (mode) {\n          case 'json': {\n            const standardizedPrompt = standardizePrompt({\n              prompt: {\n                system:\n                  outputStrategy.jsonSchema == null\n                    ? injectJsonInstruction({ prompt: system })\n                    : model.supportsStructuredOutputs\n                      ? system\n                      : injectJsonInstruction({\n                          prompt: system,\n                          schema: outputStrategy.jsonSchema,\n                        }),\n                prompt,\n                messages,\n              },\n              tools: undefined,\n            });\n\n            callOptions = {\n              mode: {\n                type: 'object-json',\n                schema: outputStrategy.jsonSchema,\n                name: schemaName,\n                description: schemaDescription,\n              },\n              ...prepareCallSettings(settings),\n              inputFormat: standardizedPrompt.type,\n              prompt: await convertToLanguageModelPrompt({\n                prompt: standardizedPrompt,\n                modelSupportsImageUrls: model.supportsImageUrls,\n                modelSupportsUrl: model.supportsUrl?.bind(model), // support 'this' context\n              }),\n              providerMetadata: providerOptions,\n              abortSignal,\n              headers,\n            };\n\n            transformer = {\n              transform: (chunk, controller) => {\n                switch (chunk.type) {\n                  case 'text-delta':\n                    controller.enqueue(chunk.textDelta);\n                    break;\n                  case 'response-metadata':\n                  case 'finish':\n                  case 'error':\n                    controller.enqueue(chunk);\n                    break;\n                }\n              },\n            };\n\n            break;\n          }\n\n          case 'tool': {\n            const standardizedPrompt = standardizePrompt({\n              prompt: { system, prompt, messages },\n              tools: undefined,\n            });\n\n            callOptions = {\n              mode: {\n                type: 'object-tool',\n                tool: {\n                  type: 'function',\n                  name: schemaName ?? 'json',\n                  description:\n                    schemaDescription ?? 'Respond with a JSON object.',\n                  parameters: outputStrategy.jsonSchema!,\n                },\n              },\n              ...prepareCallSettings(settings),\n              inputFormat: standardizedPrompt.type,\n              prompt: await convertToLanguageModelPrompt({\n                prompt: standardizedPrompt,\n                modelSupportsImageUrls: model.supportsImageUrls,\n                modelSupportsUrl: model.supportsUrl?.bind(model), // support 'this' context,\n              }),\n              providerMetadata: providerOptions,\n              abortSignal,\n              headers,\n            };\n\n            transformer = {\n              transform(chunk, controller) {\n                switch (chunk.type) {\n                  case 'tool-call-delta':\n                    controller.enqueue(chunk.argsTextDelta);\n                    break;\n                  case 'response-metadata':\n                  case 'finish':\n                  case 'error':\n                    controller.enqueue(chunk);\n                    break;\n                }\n              },\n            };\n\n            break;\n          }\n\n          case undefined: {\n            throw new Error(\n              'Model does not have a default object generation mode.',\n            );\n          }\n\n          default: {\n            const _exhaustiveCheck: never = mode;\n            throw new Error(`Unsupported mode: ${_exhaustiveCheck}`);\n          }\n        }\n\n        const {\n          result: { stream, warnings, rawResponse, request },\n          doStreamSpan,\n          startTimestampMs,\n        } = await retry(() =>\n          recordSpan({\n            name: 'ai.streamObject.doStream',\n            attributes: selectTelemetryAttributes({\n              telemetry,\n              attributes: {\n                ...assembleOperationName({\n                  operationId: 'ai.streamObject.doStream',\n                  telemetry,\n                }),\n                ...baseTelemetryAttributes,\n                'ai.prompt.format': {\n                  input: () => callOptions.inputFormat,\n                },\n                'ai.prompt.messages': {\n                  input: () => stringifyForTelemetry(callOptions.prompt),\n                },\n                'ai.settings.mode': mode,\n\n                // standardized gen-ai llm span attributes:\n                'gen_ai.system': model.provider,\n                'gen_ai.request.model': model.modelId,\n                'gen_ai.request.frequency_penalty': settings.frequencyPenalty,\n                'gen_ai.request.max_tokens': settings.maxTokens,\n                'gen_ai.request.presence_penalty': settings.presencePenalty,\n                'gen_ai.request.temperature': settings.temperature,\n                'gen_ai.request.top_k': settings.topK,\n                'gen_ai.request.top_p': settings.topP,\n              },\n            }),\n            tracer,\n            endWhenDone: false,\n            fn: async doStreamSpan => ({\n              startTimestampMs: now(),\n              doStreamSpan,\n              result: await model.doStream(callOptions),\n            }),\n          }),\n        );\n\n        self.requestPromise.resolve(request ?? {});\n\n        // store information for onFinish callback:\n        let usage: LanguageModelUsage | undefined;\n        let finishReason: LanguageModelV1FinishReason | undefined;\n        let providerMetadata: ProviderMetadata | undefined;\n        let object: RESULT | undefined;\n        let error: unknown | undefined;\n\n        // pipe chunks through a transformation stream that extracts metadata:\n        let accumulatedText = '';\n        let textDelta = '';\n        let response: {\n          id: string;\n          timestamp: Date;\n          modelId: string;\n        } = {\n          id: generateId(),\n          timestamp: currentDate(),\n          modelId: model.modelId,\n        };\n\n        // Keep track of raw parse result before type validation, since e.g. Zod might\n        // change the object by mapping properties.\n        let latestObjectJson: JSONValue | undefined = undefined;\n        let latestObject: PARTIAL | undefined = undefined;\n        let isFirstChunk = true;\n        let isFirstDelta = true;\n\n        const transformedStream = stream\n          .pipeThrough(new TransformStream(transformer))\n          .pipeThrough(\n            new TransformStream<\n              string | ObjectStreamInputPart,\n              ObjectStreamPart<PARTIAL>\n            >({\n              async transform(chunk, controller): Promise<void> {\n                // Telemetry event for first chunk:\n                if (isFirstChunk) {\n                  const msToFirstChunk = now() - startTimestampMs;\n\n                  isFirstChunk = false;\n\n                  doStreamSpan.addEvent('ai.stream.firstChunk', {\n                    'ai.stream.msToFirstChunk': msToFirstChunk,\n                  });\n\n                  doStreamSpan.setAttributes({\n                    'ai.stream.msToFirstChunk': msToFirstChunk,\n                  });\n                }\n\n                // process partial text chunks\n                if (typeof chunk === 'string') {\n                  accumulatedText += chunk;\n                  textDelta += chunk;\n\n                  const { value: currentObjectJson, state: parseState } =\n                    parsePartialJson(accumulatedText);\n\n                  if (\n                    currentObjectJson !== undefined &&\n                    !isDeepEqualData(latestObjectJson, currentObjectJson)\n                  ) {\n                    const validationResult =\n                      outputStrategy.validatePartialResult({\n                        value: currentObjectJson,\n                        textDelta,\n                        latestObject,\n                        isFirstDelta,\n                        isFinalDelta: parseState === 'successful-parse',\n                      });\n\n                    if (\n                      validationResult.success &&\n                      !isDeepEqualData(\n                        latestObject,\n                        validationResult.value.partial,\n                      )\n                    ) {\n                      // inside inner check to correctly parse the final element in array mode:\n                      latestObjectJson = currentObjectJson;\n                      latestObject = validationResult.value.partial;\n\n                      controller.enqueue({\n                        type: 'object',\n                        object: latestObject,\n                      });\n\n                      controller.enqueue({\n                        type: 'text-delta',\n                        textDelta: validationResult.value.textDelta,\n                      });\n\n                      textDelta = '';\n                      isFirstDelta = false;\n                    }\n                  }\n\n                  return;\n                }\n\n                switch (chunk.type) {\n                  case 'response-metadata': {\n                    response = {\n                      id: chunk.id ?? response.id,\n                      timestamp: chunk.timestamp ?? response.timestamp,\n                      modelId: chunk.modelId ?? response.modelId,\n                    };\n                    break;\n                  }\n\n                  case 'finish': {\n                    // send final text delta:\n                    if (textDelta !== '') {\n                      controller.enqueue({ type: 'text-delta', textDelta });\n                    }\n\n                    // store finish reason for telemetry:\n                    finishReason = chunk.finishReason;\n\n                    // store usage and metadata for promises and onFinish callback:\n                    usage = calculateLanguageModelUsage(chunk.usage);\n                    providerMetadata = chunk.providerMetadata;\n\n                    controller.enqueue({ ...chunk, usage, response });\n\n                    // resolve promises that can be resolved now:\n                    self.usagePromise.resolve(usage);\n                    self.providerMetadataPromise.resolve(providerMetadata);\n                    self.responsePromise.resolve({\n                      ...response,\n                      headers: rawResponse?.headers,\n                    });\n\n                    // resolve the object promise with the latest object:\n                    const validationResult = outputStrategy.validateFinalResult(\n                      latestObjectJson,\n                      {\n                        text: accumulatedText,\n                        response,\n                        usage,\n                      },\n                    );\n\n                    if (validationResult.success) {\n                      object = validationResult.value;\n                      self.objectPromise.resolve(object);\n                    } else {\n                      error = new NoObjectGeneratedError({\n                        message:\n                          'No object generated: response did not match schema.',\n                        cause: validationResult.error,\n                        text: accumulatedText,\n                        response,\n                        usage,\n                        finishReason: finishReason,\n                      });\n                      self.objectPromise.reject(error);\n                    }\n\n                    break;\n                  }\n\n                  default: {\n                    controller.enqueue(chunk);\n                    break;\n                  }\n                }\n              },\n\n              // invoke onFinish callback and resolve toolResults promise when the stream is about to close:\n              async flush(controller) {\n                try {\n                  const finalUsage = usage ?? {\n                    promptTokens: NaN,\n                    completionTokens: NaN,\n                    totalTokens: NaN,\n                  };\n\n                  doStreamSpan.setAttributes(\n                    selectTelemetryAttributes({\n                      telemetry,\n                      attributes: {\n                        'ai.response.finishReason': finishReason,\n                        'ai.response.object': {\n                          output: () => JSON.stringify(object),\n                        },\n                        'ai.response.id': response.id,\n                        'ai.response.model': response.modelId,\n                        'ai.response.timestamp':\n                          response.timestamp.toISOString(),\n\n                        'ai.usage.promptTokens': finalUsage.promptTokens,\n                        'ai.usage.completionTokens':\n                          finalUsage.completionTokens,\n\n                        // standardized gen-ai llm span attributes:\n                        'gen_ai.response.finish_reasons': [finishReason],\n                        'gen_ai.response.id': response.id,\n                        'gen_ai.response.model': response.modelId,\n                        'gen_ai.usage.input_tokens': finalUsage.promptTokens,\n                        'gen_ai.usage.output_tokens':\n                          finalUsage.completionTokens,\n                      },\n                    }),\n                  );\n\n                  // finish doStreamSpan before other operations for correct timing:\n                  doStreamSpan.end();\n\n                  // Add response information to the root span:\n                  rootSpan.setAttributes(\n                    selectTelemetryAttributes({\n                      telemetry,\n                      attributes: {\n                        'ai.usage.promptTokens': finalUsage.promptTokens,\n                        'ai.usage.completionTokens':\n                          finalUsage.completionTokens,\n                        'ai.response.object': {\n                          output: () => JSON.stringify(object),\n                        },\n                      },\n                    }),\n                  );\n\n                  // call onFinish callback:\n                  await onFinish?.({\n                    usage: finalUsage,\n                    object,\n                    error,\n                    response: {\n                      ...response,\n                      headers: rawResponse?.headers,\n                    },\n                    warnings,\n                    providerMetadata,\n                    experimental_providerMetadata: providerMetadata,\n                  });\n                } catch (error) {\n                  controller.enqueue({ type: 'error', error });\n                } finally {\n                  rootSpan.end();\n                }\n              },\n            }),\n          );\n\n        stitchableStream.addStream(transformedStream);\n      },\n    })\n      .catch(error => {\n        // add an empty stream with an error to break the stream:\n        stitchableStream.addStream(\n          new ReadableStream({\n            start(controller) {\n              controller.enqueue({ type: 'error', error });\n              controller.close();\n            },\n          }),\n        );\n      })\n      .finally(() => {\n        stitchableStream.close();\n      });\n\n    this.outputStrategy = outputStrategy;\n  }\n\n  get object() {\n    return this.objectPromise.value;\n  }\n\n  get usage() {\n    return this.usagePromise.value;\n  }\n\n  get experimental_providerMetadata() {\n    return this.providerMetadataPromise.value;\n  }\n\n  get providerMetadata() {\n    return this.providerMetadataPromise.value;\n  }\n\n  get warnings() {\n    return this.warningsPromise.value;\n  }\n\n  get request() {\n    return this.requestPromise.value;\n  }\n\n  get response() {\n    return this.responsePromise.value;\n  }\n\n  get partialObjectStream(): AsyncIterableStream<PARTIAL> {\n    return createAsyncIterableStream(\n      this.baseStream.pipeThrough(\n        new TransformStream<ObjectStreamPart<PARTIAL>, PARTIAL>({\n          transform(chunk, controller) {\n            switch (chunk.type) {\n              case 'object':\n                controller.enqueue(chunk.object);\n                break;\n\n              case 'text-delta':\n              case 'finish':\n              case 'error': // suppress error (use onError instead)\n                break;\n\n              default: {\n                const _exhaustiveCheck: never = chunk;\n                throw new Error(`Unsupported chunk type: ${_exhaustiveCheck}`);\n              }\n            }\n          },\n        }),\n      ),\n    );\n  }\n\n  get elementStream(): ELEMENT_STREAM {\n    return this.outputStrategy.createElementStream(this.baseStream);\n  }\n\n  get textStream(): AsyncIterableStream<string> {\n    return createAsyncIterableStream(\n      this.baseStream.pipeThrough(\n        new TransformStream<ObjectStreamPart<PARTIAL>, string>({\n          transform(chunk, controller) {\n            switch (chunk.type) {\n              case 'text-delta':\n                controller.enqueue(chunk.textDelta);\n                break;\n\n              case 'object':\n              case 'finish':\n              case 'error': // suppress error (use onError instead)\n                break;\n\n              default: {\n                const _exhaustiveCheck: never = chunk;\n                throw new Error(`Unsupported chunk type: ${_exhaustiveCheck}`);\n              }\n            }\n          },\n        }),\n      ),\n    );\n  }\n\n  get fullStream(): AsyncIterableStream<ObjectStreamPart<PARTIAL>> {\n    return createAsyncIterableStream(this.baseStream);\n  }\n\n  pipeTextStreamToResponse(response: ServerResponse, init?: ResponseInit) {\n    writeToServerResponse({\n      response,\n      status: init?.status,\n      statusText: init?.statusText,\n      headers: prepareOutgoingHttpHeaders(init?.headers, {\n        contentType: 'text/plain; charset=utf-8',\n      }),\n      stream: this.textStream.pipeThrough(new TextEncoderStream()),\n    });\n  }\n\n  toTextStreamResponse(init?: ResponseInit): Response {\n    return new Response(this.textStream.pipeThrough(new TextEncoderStream()), {\n      status: init?.status ?? 200,\n      headers: prepareResponseHeaders(init?.headers, {\n        contentType: 'text/plain; charset=utf-8',\n      }),\n    });\n  }\n}\n\nexport type ObjectStreamInputPart =\n  | {\n      type: 'error';\n      error: unknown;\n    }\n  | {\n      type: 'response-metadata';\n      id?: string;\n      timestamp?: Date;\n      modelId?: string;\n    }\n  | {\n      type: 'finish';\n      finishReason: FinishReason;\n      logprobs?: LogProbs;\n      usage: LanguageModelUsage;\n      providerMetadata?: ProviderMetadata;\n    };\n","/**\n * Delayed promise. It is only constructed once the value is accessed.\n * This is useful to avoid unhandled promise rejections when the promise is created\n * but not accessed.\n */\nexport class DelayedPromise<T> {\n  private status:\n    | { type: 'pending' }\n    | { type: 'resolved'; value: T }\n    | { type: 'rejected'; error: unknown } = { type: 'pending' };\n  private promise: Promise<T> | undefined;\n  private _resolve: undefined | ((value: T) => void) = undefined;\n  private _reject: undefined | ((error: unknown) => void) = undefined;\n\n  get value(): Promise<T> {\n    if (this.promise) {\n      return this.promise;\n    }\n\n    this.promise = new Promise<T>((resolve, reject) => {\n      if (this.status.type === 'resolved') {\n        resolve(this.status.value);\n      } else if (this.status.type === 'rejected') {\n        reject(this.status.error);\n      }\n\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n\n    return this.promise;\n  }\n\n  resolve(value: T): void {\n    this.status = { type: 'resolved', value };\n\n    if (this.promise) {\n      this._resolve?.(value);\n    }\n  }\n\n  reject(error: unknown): void {\n    this.status = { type: 'rejected', error };\n\n    if (this.promise) {\n      this._reject?.(error);\n    }\n  }\n}\n","/**\n * Creates a Promise with externally accessible resolve and reject functions.\n *\n * @template T - The type of the value that the Promise will resolve to.\n * @returns An object containing:\n *   - promise: A Promise that can be resolved or rejected externally.\n *   - resolve: A function to resolve the Promise with a value of type T.\n *   - reject: A function to reject the Promise with an error.\n */\nexport function createResolvablePromise<T = any>(): {\n  promise: Promise<T>;\n  resolve: (value: T) => void;\n  reject: (error: unknown) => void;\n} {\n  let resolve: (value: T) => void;\n  let reject: (error: unknown) => void;\n\n  const promise = new Promise<T>((res, rej) => {\n    resolve = res;\n    reject = rej;\n  });\n\n  return {\n    promise,\n    resolve: resolve!,\n    reject: reject!,\n  };\n}\n","import { createResolvablePromise } from '../../util/create-resolvable-promise';\n\n/**\n * Creates a stitchable stream that can pipe one stream at a time.\n *\n * @template T - The type of values emitted by the streams.\n * @returns {Object} An object containing the stitchable stream and control methods.\n */\nexport function createStitchableStream<T>(): {\n  stream: ReadableStream<T>;\n  addStream: (innerStream: ReadableStream<T>) => void;\n  close: () => void;\n  terminate: () => void;\n} {\n  let innerStreamReaders: ReadableStreamDefaultReader<T>[] = [];\n  let controller: ReadableStreamDefaultController<T> | null = null;\n  let isClosed = false;\n  let waitForNewStream = createResolvablePromise<void>();\n\n  const processPull = async () => {\n    // Case 1: Outer stream is closed and no more inner streams\n    if (isClosed && innerStreamReaders.length === 0) {\n      controller?.close();\n      return;\n    }\n\n    // Case 2: No inner streams available, but outer stream is open\n    // wait for a new inner stream to be added or the outer stream to close\n    if (innerStreamReaders.length === 0) {\n      waitForNewStream = createResolvablePromise<void>();\n      await waitForNewStream.promise;\n      return processPull();\n    }\n\n    try {\n      const { value, done } = await innerStreamReaders[0].read();\n\n      if (done) {\n        // Case 3: Current inner stream is done\n        innerStreamReaders.shift(); // Remove the finished stream\n\n        // Continue pulling from the next stream if available\n        if (innerStreamReaders.length > 0) {\n          await processPull();\n        } else if (isClosed) {\n          controller?.close();\n        }\n      } else {\n        // Case 4: Current inner stream returns an item\n        controller?.enqueue(value);\n      }\n    } catch (error) {\n      // Case 5: Current inner stream throws an error\n      controller?.error(error);\n      innerStreamReaders.shift(); // Remove the errored stream\n\n      if (isClosed && innerStreamReaders.length === 0) {\n        controller?.close();\n      }\n    }\n  };\n\n  return {\n    stream: new ReadableStream<T>({\n      start(controllerParam) {\n        controller = controllerParam;\n      },\n      pull: processPull,\n      async cancel() {\n        for (const reader of innerStreamReaders) {\n          await reader.cancel();\n        }\n        innerStreamReaders = [];\n        isClosed = true;\n      },\n    }),\n    addStream: (innerStream: ReadableStream<T>) => {\n      if (isClosed) {\n        throw new Error('Cannot add inner stream: outer stream is closed');\n      }\n\n      innerStreamReaders.push(innerStream.getReader());\n      waitForNewStream.resolve();\n    },\n\n    /**\n     * Gracefully close the outer stream. This will let the inner streams\n     * finish processing and then close the outer stream.\n     */\n    close: () => {\n      isClosed = true;\n      waitForNewStream.resolve();\n\n      if (innerStreamReaders.length === 0) {\n        controller?.close();\n      }\n    },\n\n    /**\n     * Immediately close the outer stream. This will cancel all inner streams\n     * and close the outer stream.\n     */\n    terminate: () => {\n      isClosed = true;\n      waitForNewStream.resolve();\n\n      innerStreamReaders.forEach(reader => reader.cancel());\n      innerStreamReaders = [];\n      controller?.close();\n    },\n  };\n}\n","// Shim for performance.now() to support environments that don't have it:\nexport function now(): number {\n  return globalThis?.performance?.now() ?? Date.now();\n}\n","import { createIdGenerator, IDGenerator } from '@ai-sdk/provider-utils';\nimport { Tracer } from '@opentelemetry/api';\nimport { InvalidArgumentError } from '../../errors/invalid-argument-error';\nimport { NoOutputSpecifiedError } from '../../errors/no-output-specified-error';\nimport { ToolExecutionError } from '../../errors/tool-execution-error';\nimport { CoreAssistantMessage, CoreMessage } from '../prompt';\nimport { CallSettings } from '../prompt/call-settings';\nimport { convertToLanguageModelPrompt } from '../prompt/convert-to-language-model-prompt';\nimport { prepareCallSettings } from '../prompt/prepare-call-settings';\nimport { prepareRetries } from '../prompt/prepare-retries';\nimport { prepareToolsAndToolChoice } from '../prompt/prepare-tools-and-tool-choice';\nimport { Prompt } from '../prompt/prompt';\nimport { standardizePrompt } from '../prompt/standardize-prompt';\nimport { assembleOperationName } from '../telemetry/assemble-operation-name';\nimport { getBaseTelemetryAttributes } from '../telemetry/get-base-telemetry-attributes';\nimport { getTracer } from '../telemetry/get-tracer';\nimport { recordSpan } from '../telemetry/record-span';\nimport { selectTelemetryAttributes } from '../telemetry/select-telemetry-attributes';\nimport { TelemetrySettings } from '../telemetry/telemetry-settings';\nimport { LanguageModel, ToolChoice } from '../types';\nimport { ProviderMetadata, ProviderOptions } from '../types/provider-metadata';\nimport {\n  addLanguageModelUsage,\n  calculateLanguageModelUsage,\n  LanguageModelUsage,\n} from '../types/usage';\nimport { removeTextAfterLastWhitespace } from '../util/remove-text-after-last-whitespace';\nimport { GenerateTextResult } from './generate-text-result';\nimport { DefaultGeneratedFile, GeneratedFile } from './generated-file';\nimport { Output } from './output';\nimport { parseToolCall } from './parse-tool-call';\nimport { asReasoningText, ReasoningDetail } from './reasoning-detail';\nimport { ResponseMessage, StepResult } from './step-result';\nimport { toResponseMessages } from './to-response-messages';\nimport { ToolCallArray } from './tool-call';\nimport { ToolCallRepairFunction } from './tool-call-repair';\nimport { ToolResultArray } from './tool-result';\nimport { ToolSet } from './tool-set';\nimport { stringifyForTelemetry } from '../prompt/stringify-for-telemetry';\n\nconst originalGenerateId = createIdGenerator({\n  prefix: 'aitxt',\n  size: 24,\n});\n\nconst originalGenerateMessageId = createIdGenerator({\n  prefix: 'msg',\n  size: 24,\n});\n\n/**\nCallback that is set using the `onStepFinish` option.\n\n@param stepResult - The result of the step.\n */\nexport type GenerateTextOnStepFinishCallback<TOOLS extends ToolSet> = (\n  stepResult: StepResult<TOOLS>,\n) => Promise<void> | void;\n\n/**\nGenerate a text and call tools for a given prompt using a language model.\n\nThis function does not stream the output. If you want to stream the output, use `streamText` instead.\n\n@param model - The language model to use.\n\n@param tools - Tools that are accessible to and can be called by the model. The model needs to support calling tools.\n@param toolChoice - The tool choice strategy. Default: 'auto'.\n\n@param system - A system message that will be part of the prompt.\n@param prompt - A simple text prompt. You can either use `prompt` or `messages` but not both.\n@param messages - A list of messages. You can either use `prompt` or `messages` but not both.\n\n@param maxTokens - Maximum number of tokens to generate.\n@param temperature - Temperature setting.\nThe value is passed through to the provider. The range depends on the provider and model.\nIt is recommended to set either `temperature` or `topP`, but not both.\n@param topP - Nucleus sampling.\nThe value is passed through to the provider. The range depends on the provider and model.\nIt is recommended to set either `temperature` or `topP`, but not both.\n@param topK - Only sample from the top K options for each subsequent token.\nUsed to remove \"long tail\" low probability responses.\nRecommended for advanced use cases only. You usually only need to use temperature.\n@param presencePenalty - Presence penalty setting.\nIt affects the likelihood of the model to repeat information that is already in the prompt.\nThe value is passed through to the provider. The range depends on the provider and model.\n@param frequencyPenalty - Frequency penalty setting.\nIt affects the likelihood of the model to repeatedly use the same words or phrases.\nThe value is passed through to the provider. The range depends on the provider and model.\n@param stopSequences - Stop sequences.\nIf set, the model will stop generating text when one of the stop sequences is generated.\n@param seed - The seed (integer) to use for random sampling.\nIf set and supported by the model, calls will generate deterministic results.\n\n@param maxRetries - Maximum number of retries. Set to 0 to disable retries. Default: 2.\n@param abortSignal - An optional abort signal that can be used to cancel the call.\n@param headers - Additional HTTP headers to be sent with the request. Only applicable for HTTP-based providers.\n\n@param maxSteps - Maximum number of sequential LLM calls (steps), e.g. when you use tool calls.\n@param experimental_generateMessageId - Generate a unique ID for each message.\n\n@param onStepFinish - Callback that is called when each step (LLM call) is finished, including intermediate steps.\n\n@returns\nA result object that contains the generated text, the results of the tool calls, and additional information.\n */\nexport async function generateText<\n  TOOLS extends ToolSet,\n  OUTPUT = never,\n  OUTPUT_PARTIAL = never,\n>({\n  model,\n  tools,\n  toolChoice,\n  system,\n  prompt,\n  messages,\n  maxRetries: maxRetriesArg,\n  abortSignal,\n  headers,\n  maxSteps = 1,\n  experimental_generateMessageId: generateMessageId = originalGenerateMessageId,\n  experimental_output: output,\n  experimental_continueSteps: continueSteps = false,\n  experimental_telemetry: telemetry,\n  experimental_providerMetadata,\n  providerOptions = experimental_providerMetadata,\n  experimental_activeTools: activeTools,\n  experimental_prepareStep: prepareStep,\n  experimental_repairToolCall: repairToolCall,\n  _internal: {\n    generateId = originalGenerateId,\n    currentDate = () => new Date(),\n  } = {},\n  onStepFinish,\n  ...settings\n}: CallSettings &\n  Prompt & {\n    /**\nThe language model to use.\n     */\n    model: LanguageModel;\n\n    /**\nThe tools that the model can call. The model needs to support calling tools.\n*/\n    tools?: TOOLS;\n\n    /**\nThe tool choice strategy. Default: 'auto'.\n     */\n    toolChoice?: ToolChoice<TOOLS>;\n\n    /**\nMaximum number of sequential LLM calls (steps), e.g. when you use tool calls. Must be at least 1.\n\nA maximum number is required to prevent infinite loops in the case of misconfigured tools.\n\nBy default, it's set to 1, which means that only a single LLM call is made.\n     */\n    maxSteps?: number;\n\n    /**\nGenerate a unique ID for each message.\n     */\n    experimental_generateMessageId?: IDGenerator;\n\n    /**\nWhen enabled, the model will perform additional steps if the finish reason is \"length\" (experimental).\n\nBy default, it's set to false.\n     */\n    experimental_continueSteps?: boolean;\n\n    /**\nOptional telemetry configuration (experimental).\n     */\n    experimental_telemetry?: TelemetrySettings;\n\n    /**\nAdditional provider-specific options. They are passed through\nto the provider from the AI SDK and enable provider-specific\nfunctionality that can be fully encapsulated in the provider.\n */\n    providerOptions?: ProviderOptions;\n\n    /**\n@deprecated Use `providerOptions` instead.\n     */\n    experimental_providerMetadata?: ProviderMetadata;\n\n    /**\nLimits the tools that are available for the model to call without\nchanging the tool call and result types in the result.\n     */\n    experimental_activeTools?: Array<keyof TOOLS>;\n\n    /**\nOptional specification for parsing structured outputs from the LLM response.\n     */\n    experimental_output?: Output<OUTPUT, OUTPUT_PARTIAL>;\n\n    /**\nOptional function that you can use to provide different settings for a step.\n\n@param options - The options for the step.\n@param options.steps - The steps that have been executed so far.\n@param options.stepNumber - The number of the step that is being executed.\n@param options.maxSteps - The maximum number of steps.\n@param options.model - The model that is being used.\n\n@returns An object that contains the settings for the step.\nIf you return undefined (or for undefined settings), the settings from the outer level will be used.\n    */\n    experimental_prepareStep?: (options: {\n      steps: Array<StepResult<TOOLS>>;\n      stepNumber: number;\n      maxSteps: number;\n      model: LanguageModel;\n    }) => PromiseLike<\n      | {\n          model?: LanguageModel;\n          toolChoice?: ToolChoice<TOOLS>;\n          experimental_activeTools?: Array<keyof TOOLS>;\n        }\n      | undefined\n    >;\n\n    /**\nA function that attempts to repair a tool call that failed to parse.\n     */\n    experimental_repairToolCall?: ToolCallRepairFunction<TOOLS>;\n\n    /**\n    Callback that is called when each step (LLM call) is finished, including intermediate steps.\n    */\n    onStepFinish?: GenerateTextOnStepFinishCallback<TOOLS>;\n\n    /**\n     * Internal. For test use only. May change without notice.\n     */\n    _internal?: {\n      generateId?: IDGenerator;\n      currentDate?: () => Date;\n    };\n  }): Promise<GenerateTextResult<TOOLS, OUTPUT>> {\n  if (maxSteps < 1) {\n    throw new InvalidArgumentError({\n      parameter: 'maxSteps',\n      value: maxSteps,\n      message: 'maxSteps must be at least 1',\n    });\n  }\n\n  const { maxRetries, retry } = prepareRetries({ maxRetries: maxRetriesArg });\n\n  const baseTelemetryAttributes = getBaseTelemetryAttributes({\n    model,\n    telemetry,\n    headers,\n    settings: { ...settings, maxRetries },\n  });\n\n  const initialPrompt = standardizePrompt({\n    prompt: {\n      system: output?.injectIntoSystemPrompt({ system, model }) ?? system,\n      prompt,\n      messages,\n    },\n    tools,\n  });\n\n  const tracer = getTracer(telemetry);\n\n  return recordSpan({\n    name: 'ai.generateText',\n    attributes: selectTelemetryAttributes({\n      telemetry,\n      attributes: {\n        ...assembleOperationName({\n          operationId: 'ai.generateText',\n          telemetry,\n        }),\n        ...baseTelemetryAttributes,\n        // model:\n        'ai.model.provider': model.provider,\n        'ai.model.id': model.modelId,\n        // specific settings that only make sense on the outer level:\n        'ai.prompt': {\n          input: () => JSON.stringify({ system, prompt, messages }),\n        },\n        'ai.settings.maxSteps': maxSteps,\n      },\n    }),\n    tracer,\n    fn: async span => {\n      const callSettings = prepareCallSettings(settings);\n\n      let currentModelResponse: Awaited<\n        ReturnType<LanguageModel['doGenerate']>\n      > & { response: { id: string; timestamp: Date; modelId: string } };\n      let currentToolCalls: ToolCallArray<TOOLS> = [];\n      let currentToolResults: ToolResultArray<TOOLS> = [];\n      let currentReasoningDetails: Array<ReasoningDetail> = [];\n      let stepCount = 0;\n      const responseMessages: Array<ResponseMessage> = [];\n      let text = '';\n      const sources: GenerateTextResult<TOOLS, OUTPUT>['sources'] = [];\n      const steps: GenerateTextResult<TOOLS, OUTPUT>['steps'] = [];\n      let usage: LanguageModelUsage = {\n        completionTokens: 0,\n        promptTokens: 0,\n        totalTokens: 0,\n      };\n\n      let stepType: 'initial' | 'tool-result' | 'continue' | 'done' = 'initial';\n\n      do {\n        // after the 1st step, we need to switch to messages format:\n        const promptFormat = stepCount === 0 ? initialPrompt.type : 'messages';\n\n        const stepInputMessages = [\n          ...initialPrompt.messages,\n          ...responseMessages,\n        ];\n\n        const prepareStepResult = await prepareStep?.({\n          model,\n          steps,\n          maxSteps,\n          stepNumber: stepCount,\n        });\n\n        const stepToolChoice = prepareStepResult?.toolChoice ?? toolChoice;\n        const stepActiveTools =\n          prepareStepResult?.experimental_activeTools ?? activeTools;\n        const stepModel = prepareStepResult?.model ?? model;\n\n        const promptMessages = await convertToLanguageModelPrompt({\n          prompt: {\n            type: promptFormat,\n            system: initialPrompt.system,\n            messages: stepInputMessages,\n          },\n          modelSupportsImageUrls: stepModel.supportsImageUrls,\n          modelSupportsUrl: stepModel.supportsUrl?.bind(stepModel), // support 'this' context\n        });\n\n        const mode = {\n          type: 'regular' as const,\n          ...prepareToolsAndToolChoice({\n            tools,\n            toolChoice: stepToolChoice,\n            activeTools: stepActiveTools,\n          }),\n        };\n\n        currentModelResponse = await retry(() =>\n          recordSpan({\n            name: 'ai.generateText.doGenerate',\n            attributes: selectTelemetryAttributes({\n              telemetry,\n              attributes: {\n                ...assembleOperationName({\n                  operationId: 'ai.generateText.doGenerate',\n                  telemetry,\n                }),\n                ...baseTelemetryAttributes,\n                // model:\n                'ai.model.provider': stepModel.provider,\n                'ai.model.id': stepModel.modelId,\n                // prompt:\n                'ai.prompt.format': { input: () => promptFormat },\n                'ai.prompt.messages': {\n                  input: () => stringifyForTelemetry(promptMessages),\n                },\n                'ai.prompt.tools': {\n                  // convert the language model level tools:\n                  input: () => mode.tools?.map(tool => JSON.stringify(tool)),\n                },\n                'ai.prompt.toolChoice': {\n                  input: () =>\n                    mode.toolChoice != null\n                      ? JSON.stringify(mode.toolChoice)\n                      : undefined,\n                },\n\n                // standardized gen-ai llm span attributes:\n                'gen_ai.system': stepModel.provider,\n                'gen_ai.request.model': stepModel.modelId,\n                'gen_ai.request.frequency_penalty': settings.frequencyPenalty,\n                'gen_ai.request.max_tokens': settings.maxTokens,\n                'gen_ai.request.presence_penalty': settings.presencePenalty,\n                'gen_ai.request.stop_sequences': settings.stopSequences,\n                'gen_ai.request.temperature': settings.temperature,\n                'gen_ai.request.top_k': settings.topK,\n                'gen_ai.request.top_p': settings.topP,\n              },\n            }),\n            tracer,\n            fn: async span => {\n              const result = await stepModel.doGenerate({\n                mode,\n                ...callSettings,\n                inputFormat: promptFormat,\n                responseFormat: output?.responseFormat({ model }),\n                prompt: promptMessages,\n                providerMetadata: providerOptions,\n                abortSignal,\n                headers,\n              });\n\n              // Fill in default values:\n              const responseData = {\n                id: result.response?.id ?? generateId(),\n                timestamp: result.response?.timestamp ?? currentDate(),\n                modelId: result.response?.modelId ?? stepModel.modelId,\n              };\n\n              // Add response information to the span:\n              span.setAttributes(\n                selectTelemetryAttributes({\n                  telemetry,\n                  attributes: {\n                    'ai.response.finishReason': result.finishReason,\n                    'ai.response.text': {\n                      output: () => result.text,\n                    },\n                    'ai.response.toolCalls': {\n                      output: () => JSON.stringify(result.toolCalls),\n                    },\n                    'ai.response.id': responseData.id,\n                    'ai.response.model': responseData.modelId,\n                    'ai.response.timestamp':\n                      responseData.timestamp.toISOString(),\n\n                    'ai.usage.promptTokens': result.usage.promptTokens,\n                    'ai.usage.completionTokens': result.usage.completionTokens,\n\n                    // standardized gen-ai llm span attributes:\n                    'gen_ai.response.finish_reasons': [result.finishReason],\n                    'gen_ai.response.id': responseData.id,\n                    'gen_ai.response.model': responseData.modelId,\n                    'gen_ai.usage.input_tokens': result.usage.promptTokens,\n                    'gen_ai.usage.output_tokens': result.usage.completionTokens,\n                  },\n                }),\n              );\n\n              return { ...result, response: responseData };\n            },\n          }),\n        );\n\n        // parse tool calls:\n        currentToolCalls = await Promise.all(\n          (currentModelResponse.toolCalls ?? []).map(toolCall =>\n            parseToolCall({\n              toolCall,\n              tools,\n              repairToolCall,\n              system,\n              messages: stepInputMessages,\n            }),\n          ),\n        );\n\n        // execute tools:\n        currentToolResults =\n          tools == null\n            ? []\n            : await executeTools({\n                toolCalls: currentToolCalls,\n                tools,\n                tracer,\n                telemetry,\n                messages: stepInputMessages,\n                abortSignal,\n              });\n\n        // token usage:\n        const currentUsage = calculateLanguageModelUsage(\n          currentModelResponse.usage,\n        );\n        usage = addLanguageModelUsage(usage, currentUsage);\n\n        // check if another step is needed:\n        let nextStepType: 'done' | 'continue' | 'tool-result' = 'done';\n        if (++stepCount < maxSteps) {\n          if (\n            continueSteps &&\n            currentModelResponse.finishReason === 'length' &&\n            // only use continue when there are no tool calls:\n            currentToolCalls.length === 0\n          ) {\n            nextStepType = 'continue';\n          } else if (\n            // there are tool calls:\n            currentToolCalls.length > 0 &&\n            // all current tool calls have results:\n            currentToolResults.length === currentToolCalls.length\n          ) {\n            nextStepType = 'tool-result';\n          }\n        }\n\n        // text:\n        const originalText = currentModelResponse.text ?? '';\n        const stepTextLeadingWhitespaceTrimmed =\n          stepType === 'continue' && // only for continue steps\n          text.trimEnd() !== text // only trim when there is preceding whitespace\n            ? originalText.trimStart()\n            : originalText;\n        const stepText =\n          nextStepType === 'continue'\n            ? removeTextAfterLastWhitespace(stepTextLeadingWhitespaceTrimmed)\n            : stepTextLeadingWhitespaceTrimmed;\n\n        text =\n          nextStepType === 'continue' || stepType === 'continue'\n            ? text + stepText\n            : stepText;\n\n        currentReasoningDetails = asReasoningDetails(\n          currentModelResponse.reasoning,\n        );\n\n        // sources:\n        sources.push(...(currentModelResponse.sources ?? []));\n\n        // append to messages for potential next step:\n        if (stepType === 'continue') {\n          // continue step: update the last assistant message\n          // continue is only possible when there are no tool calls,\n          // so we can assume that there is a single last assistant message:\n          const lastMessage = responseMessages[\n            responseMessages.length - 1\n          ] as CoreAssistantMessage;\n\n          if (typeof lastMessage.content === 'string') {\n            lastMessage.content += stepText;\n          } else {\n            lastMessage.content.push({\n              text: stepText,\n              type: 'text',\n            });\n          }\n        } else {\n          responseMessages.push(\n            ...toResponseMessages({\n              text,\n              files: asFiles(currentModelResponse.files),\n              reasoning: asReasoningDetails(currentModelResponse.reasoning),\n              tools: tools ?? ({} as TOOLS),\n              toolCalls: currentToolCalls,\n              toolResults: currentToolResults,\n              messageId: generateMessageId(),\n              generateMessageId,\n            }),\n          );\n        }\n\n        // Add step information (after response messages are updated):\n        const currentStepResult: StepResult<TOOLS> = {\n          stepType,\n          text: stepText,\n          // TODO v5: rename reasoning to reasoningText (and use reasoning for composite array)\n          reasoning: asReasoningText(currentReasoningDetails),\n          reasoningDetails: currentReasoningDetails,\n          files: asFiles(currentModelResponse.files),\n          sources: currentModelResponse.sources ?? [],\n          toolCalls: currentToolCalls,\n          toolResults: currentToolResults,\n          finishReason: currentModelResponse.finishReason,\n          usage: currentUsage,\n          warnings: currentModelResponse.warnings,\n          logprobs: currentModelResponse.logprobs,\n          request: currentModelResponse.request ?? {},\n          response: {\n            ...currentModelResponse.response,\n            headers: currentModelResponse.rawResponse?.headers,\n            body: currentModelResponse.rawResponse?.body,\n\n            // deep clone msgs to avoid mutating past messages in multi-step:\n            messages: structuredClone(responseMessages),\n          },\n          providerMetadata: currentModelResponse.providerMetadata,\n          experimental_providerMetadata: currentModelResponse.providerMetadata,\n          isContinued: nextStepType === 'continue',\n        };\n        steps.push(currentStepResult);\n        await onStepFinish?.(currentStepResult);\n\n        stepType = nextStepType;\n      } while (stepType !== 'done');\n\n      // Add response information to the span:\n      span.setAttributes(\n        selectTelemetryAttributes({\n          telemetry,\n          attributes: {\n            'ai.response.finishReason': currentModelResponse.finishReason,\n            'ai.response.text': {\n              output: () => currentModelResponse.text,\n            },\n            'ai.response.toolCalls': {\n              output: () => JSON.stringify(currentModelResponse.toolCalls),\n            },\n\n            'ai.usage.promptTokens': currentModelResponse.usage.promptTokens,\n            'ai.usage.completionTokens':\n              currentModelResponse.usage.completionTokens,\n          },\n        }),\n      );\n\n      return new DefaultGenerateTextResult({\n        text,\n        files: asFiles(currentModelResponse.files),\n        reasoning: asReasoningText(currentReasoningDetails),\n        reasoningDetails: currentReasoningDetails,\n        sources,\n        outputResolver: () => {\n          if (output == null) {\n            throw new NoOutputSpecifiedError();\n          }\n\n          return output.parseOutput(\n            { text },\n            {\n              response: currentModelResponse.response,\n              usage,\n              finishReason: currentModelResponse.finishReason,\n            },\n          );\n        },\n        toolCalls: currentToolCalls,\n        toolResults: currentToolResults,\n        finishReason: currentModelResponse.finishReason,\n        usage,\n        warnings: currentModelResponse.warnings,\n        request: currentModelResponse.request ?? {},\n        response: {\n          ...currentModelResponse.response,\n          headers: currentModelResponse.rawResponse?.headers,\n          body: currentModelResponse.rawResponse?.body,\n          messages: responseMessages,\n        },\n        logprobs: currentModelResponse.logprobs,\n        steps,\n        providerMetadata: currentModelResponse.providerMetadata,\n      });\n    },\n  });\n}\n\nasync function executeTools<TOOLS extends ToolSet>({\n  toolCalls,\n  tools,\n  tracer,\n  telemetry,\n  messages,\n  abortSignal,\n}: {\n  toolCalls: ToolCallArray<TOOLS>;\n  tools: TOOLS;\n  tracer: Tracer;\n  telemetry: TelemetrySettings | undefined;\n  messages: CoreMessage[];\n  abortSignal: AbortSignal | undefined;\n}): Promise<ToolResultArray<TOOLS>> {\n  const toolResults = await Promise.all(\n    toolCalls.map(async ({ toolCallId, toolName, args }) => {\n      const tool = tools[toolName];\n\n      if (tool?.execute == null) {\n        return undefined;\n      }\n\n      const result = await recordSpan({\n        name: 'ai.toolCall',\n        attributes: selectTelemetryAttributes({\n          telemetry,\n          attributes: {\n            ...assembleOperationName({\n              operationId: 'ai.toolCall',\n              telemetry,\n            }),\n            'ai.toolCall.name': toolName,\n            'ai.toolCall.id': toolCallId,\n            'ai.toolCall.args': {\n              output: () => JSON.stringify(args),\n            },\n          },\n        }),\n        tracer,\n        fn: async span => {\n          try {\n            const result = await tool.execute!(args, {\n              toolCallId,\n              messages,\n              abortSignal,\n            });\n\n            try {\n              span.setAttributes(\n                selectTelemetryAttributes({\n                  telemetry,\n                  attributes: {\n                    'ai.toolCall.result': {\n                      output: () => JSON.stringify(result),\n                    },\n                  },\n                }),\n              );\n            } catch (ignored) {\n              // JSON stringify might fail if the result is not serializable,\n              // in which case we just ignore it. In the future we might want to\n              // add an optional serialize method to the tool interface and warn\n              // if the result is not serializable.\n            }\n\n            return result;\n          } catch (error) {\n            throw new ToolExecutionError({\n              toolCallId,\n              toolName,\n              toolArgs: args,\n              cause: error,\n            });\n          }\n        },\n      });\n\n      return {\n        type: 'tool-result',\n        toolCallId,\n        toolName,\n        args,\n        result,\n      } as ToolResultArray<TOOLS>[number];\n    }),\n  );\n\n  return toolResults.filter(\n    (result): result is NonNullable<typeof result> => result != null,\n  );\n}\n\nclass DefaultGenerateTextResult<TOOLS extends ToolSet, OUTPUT>\n  implements GenerateTextResult<TOOLS, OUTPUT>\n{\n  readonly text: GenerateTextResult<TOOLS, OUTPUT>['text'];\n  readonly files: GenerateTextResult<TOOLS, OUTPUT>['files'];\n  readonly reasoning: GenerateTextResult<TOOLS, OUTPUT>['reasoning'];\n  readonly reasoningDetails: GenerateTextResult<\n    TOOLS,\n    OUTPUT\n  >['reasoningDetails'];\n  readonly toolCalls: GenerateTextResult<TOOLS, OUTPUT>['toolCalls'];\n  readonly toolResults: GenerateTextResult<TOOLS, OUTPUT>['toolResults'];\n  readonly finishReason: GenerateTextResult<TOOLS, OUTPUT>['finishReason'];\n  readonly usage: GenerateTextResult<TOOLS, OUTPUT>['usage'];\n  readonly warnings: GenerateTextResult<TOOLS, OUTPUT>['warnings'];\n  readonly steps: GenerateTextResult<TOOLS, OUTPUT>['steps'];\n  readonly logprobs: GenerateTextResult<TOOLS, OUTPUT>['logprobs'];\n  readonly experimental_providerMetadata: GenerateTextResult<\n    TOOLS,\n    OUTPUT\n  >['experimental_providerMetadata'];\n  readonly providerMetadata: GenerateTextResult<\n    TOOLS,\n    OUTPUT\n  >['providerMetadata'];\n  readonly response: GenerateTextResult<TOOLS, OUTPUT>['response'];\n  readonly request: GenerateTextResult<TOOLS, OUTPUT>['request'];\n  readonly sources: GenerateTextResult<TOOLS, OUTPUT>['sources'];\n\n  private readonly outputResolver: () => GenerateTextResult<\n    TOOLS,\n    OUTPUT\n  >['experimental_output'];\n\n  constructor(options: {\n    text: GenerateTextResult<TOOLS, OUTPUT>['text'];\n    files: GenerateTextResult<TOOLS, OUTPUT>['files'];\n    reasoning: GenerateTextResult<TOOLS, OUTPUT>['reasoning'];\n    reasoningDetails: GenerateTextResult<TOOLS, OUTPUT>['reasoningDetails'];\n    toolCalls: GenerateTextResult<TOOLS, OUTPUT>['toolCalls'];\n    toolResults: GenerateTextResult<TOOLS, OUTPUT>['toolResults'];\n    finishReason: GenerateTextResult<TOOLS, OUTPUT>['finishReason'];\n    usage: GenerateTextResult<TOOLS, OUTPUT>['usage'];\n    warnings: GenerateTextResult<TOOLS, OUTPUT>['warnings'];\n    logprobs: GenerateTextResult<TOOLS, OUTPUT>['logprobs'];\n    steps: GenerateTextResult<TOOLS, OUTPUT>['steps'];\n    providerMetadata: GenerateTextResult<TOOLS, OUTPUT>['providerMetadata'];\n    response: GenerateTextResult<TOOLS, OUTPUT>['response'];\n    request: GenerateTextResult<TOOLS, OUTPUT>['request'];\n    outputResolver: () => GenerateTextResult<\n      TOOLS,\n      OUTPUT\n    >['experimental_output'];\n    sources: GenerateTextResult<TOOLS, OUTPUT>['sources'];\n  }) {\n    this.text = options.text;\n    this.files = options.files;\n    this.reasoning = options.reasoning;\n    this.reasoningDetails = options.reasoningDetails;\n    this.toolCalls = options.toolCalls;\n    this.toolResults = options.toolResults;\n    this.finishReason = options.finishReason;\n    this.usage = options.usage;\n    this.warnings = options.warnings;\n    this.request = options.request;\n    this.response = options.response;\n    this.steps = options.steps;\n    this.experimental_providerMetadata = options.providerMetadata;\n    this.providerMetadata = options.providerMetadata;\n    this.logprobs = options.logprobs;\n    this.outputResolver = options.outputResolver;\n    this.sources = options.sources;\n  }\n\n  get experimental_output() {\n    return this.outputResolver();\n  }\n}\n\nfunction asReasoningDetails(\n  reasoning:\n    | string\n    | Array<\n        | { type: 'text'; text: string; signature?: string }\n        | { type: 'redacted'; data: string }\n      >\n    | undefined,\n): Array<\n  | { type: 'text'; text: string; signature?: string }\n  | { type: 'redacted'; data: string }\n> {\n  if (reasoning == null) {\n    return [];\n  }\n\n  if (typeof reasoning === 'string') {\n    return [{ type: 'text', text: reasoning }];\n  }\n\n  return reasoning;\n}\n\nfunction asFiles(\n  files:\n    | Array<{\n        data: string | Uint8Array;\n        mimeType: string;\n      }>\n    | undefined,\n): Array<GeneratedFile> {\n  return files?.map(file => new DefaultGeneratedFile(file)) ?? [];\n}\n","import { AISDKError } from '@ai-sdk/provider';\n\nconst name = 'AI_NoOutputSpecifiedError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\n/**\nThrown when no output type is specified and output-related methods are called.\n */\nexport class NoOutputSpecifiedError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  constructor({ message = 'No output specified.' }: { message?: string } = {}) {\n    super({ name, message });\n  }\n\n  static isInstance(error: unknown): error is NoOutputSpecifiedError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","import { AISDKError, getErrorMessage, JSONValue } from '@ai-sdk/provider';\n\nconst name = 'AI_ToolExecutionError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\nexport class ToolExecutionError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  readonly toolName: string;\n  readonly toolArgs: JSONValue;\n  readonly toolCallId: string;\n\n  constructor({\n    toolArgs,\n    toolName,\n    toolCallId,\n    cause,\n    message = `Error executing tool ${toolName}: ${getErrorMessage(cause)}`,\n  }: {\n    message?: string;\n    toolArgs: JSONValue;\n    toolName: string;\n    toolCallId: string;\n    cause: unknown;\n  }) {\n    super({ name, message, cause });\n\n    this.toolArgs = toolArgs;\n    this.toolName = toolName;\n    this.toolCallId = toolCallId;\n  }\n\n  static isInstance(error: unknown): error is ToolExecutionError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","import {\n  LanguageModelV1FunctionTool,\n  LanguageModelV1ProviderDefinedTool,\n  LanguageModelV1ToolChoice,\n} from '@ai-sdk/provider';\nimport { asSchema } from '@ai-sdk/ui-utils';\nimport { ToolSet } from '../generate-text';\nimport { ToolChoice } from '../types/language-model';\nimport { isNonEmptyObject } from '../util/is-non-empty-object';\n\nexport function prepareToolsAndToolChoice<TOOLS extends ToolSet>({\n  tools,\n  toolChoice,\n  activeTools,\n}: {\n  tools: TOOLS | undefined;\n  toolChoice: ToolChoice<TOOLS> | undefined;\n  activeTools: Array<keyof TOOLS> | undefined;\n}): {\n  tools:\n    | Array<LanguageModelV1FunctionTool | LanguageModelV1ProviderDefinedTool>\n    | undefined;\n  toolChoice: LanguageModelV1ToolChoice | undefined;\n} {\n  if (!isNonEmptyObject(tools)) {\n    return {\n      tools: undefined,\n      toolChoice: undefined,\n    };\n  }\n\n  // when activeTools is provided, we only include the tools that are in the list:\n  const filteredTools =\n    activeTools != null\n      ? Object.entries(tools).filter(([name]) =>\n          activeTools.includes(name as keyof TOOLS),\n        )\n      : Object.entries(tools);\n\n  return {\n    tools: filteredTools.map(([name, tool]) => {\n      const toolType = tool.type;\n      switch (toolType) {\n        case undefined:\n        case 'function':\n          return {\n            type: 'function' as const,\n            name,\n            description: tool.description,\n            parameters: asSchema(tool.parameters).jsonSchema,\n          };\n        case 'provider-defined':\n          return {\n            type: 'provider-defined' as const,\n            name,\n            id: tool.id,\n            args: tool.args,\n          };\n        default: {\n          const exhaustiveCheck: never = toolType;\n          throw new Error(`Unsupported tool type: ${exhaustiveCheck}`);\n        }\n      }\n    }),\n    toolChoice:\n      toolChoice == null\n        ? { type: 'auto' }\n        : typeof toolChoice === 'string'\n          ? { type: toolChoice }\n          : { type: 'tool' as const, toolName: toolChoice.toolName as string },\n  };\n}\n","export function isNonEmptyObject(\n  object: Record<string, unknown> | undefined | null,\n): object is Record<string, unknown> {\n  return object != null && Object.keys(object).length > 0;\n}\n","const lastWhitespaceRegexp = /^([\\s\\S]*?)(\\s+)(\\S*)$/;\n\n/**\n * Splits the text on the last whitespace.\n *\n * Whitespace is defined as one or more whitespace characters,\n * e.g. space, tab, newline, etc.\n *\n * @param text - The text to split.\n * @returns The prefix, whitespace, and suffix. Undefined if there is no whitespace.\n */\nexport function splitOnLastWhitespace(text: string):\n  | {\n      prefix: string;\n      whitespace: string;\n      suffix: string;\n    }\n  | undefined {\n  const match = text.match(lastWhitespaceRegexp);\n  return match\n    ? { prefix: match[1], whitespace: match[2], suffix: match[3] }\n    : undefined;\n}\n","import { splitOnLastWhitespace } from './split-on-last-whitespace';\n\nexport function removeTextAfterLastWhitespace(text: string): string {\n  const match = splitOnLastWhitespace(text);\n  return match ? match.prefix + match.whitespace : text;\n}\n","import { LanguageModelV1FunctionToolCall } from '@ai-sdk/provider';\nimport { safeParseJSON, safeValidateTypes } from '@ai-sdk/provider-utils';\nimport { Schema, asSchema } from '@ai-sdk/ui-utils';\nimport { InvalidToolArgumentsError } from '../../errors/invalid-tool-arguments-error';\nimport { NoSuchToolError } from '../../errors/no-such-tool-error';\nimport { ToolCallRepairError } from '../../errors/tool-call-repair-error';\nimport { CoreMessage } from '../prompt';\nimport { inferParameters } from '../tool/tool';\nimport { ToolCallUnion } from './tool-call';\nimport { ToolCallRepairFunction } from './tool-call-repair';\nimport { ToolSet } from './tool-set';\n\nexport async function parseToolCall<TOOLS extends ToolSet>({\n  toolCall,\n  tools,\n  repairToolCall,\n  system,\n  messages,\n}: {\n  toolCall: LanguageModelV1FunctionToolCall;\n  tools: TOOLS | undefined;\n  repairToolCall: ToolCallRepairFunction<TOOLS> | undefined;\n  system: string | undefined;\n  messages: CoreMessage[];\n}): Promise<ToolCallUnion<TOOLS>> {\n  if (tools == null) {\n    throw new NoSuchToolError({ toolName: toolCall.toolName });\n  }\n\n  try {\n    return await doParseToolCall({ toolCall, tools });\n  } catch (error) {\n    if (\n      repairToolCall == null ||\n      !(\n        NoSuchToolError.isInstance(error) ||\n        InvalidToolArgumentsError.isInstance(error)\n      )\n    ) {\n      throw error;\n    }\n\n    let repairedToolCall: LanguageModelV1FunctionToolCall | null = null;\n\n    try {\n      repairedToolCall = await repairToolCall({\n        toolCall,\n        tools,\n        parameterSchema: ({ toolName }) =>\n          asSchema(tools[toolName].parameters).jsonSchema,\n        system,\n        messages,\n        error,\n      });\n    } catch (repairError) {\n      throw new ToolCallRepairError({\n        cause: repairError,\n        originalError: error,\n      });\n    }\n\n    // no repaired tool call returned\n    if (repairedToolCall == null) {\n      throw error;\n    }\n\n    return await doParseToolCall({ toolCall: repairedToolCall, tools });\n  }\n}\n\nasync function doParseToolCall<TOOLS extends ToolSet>({\n  toolCall,\n  tools,\n}: {\n  toolCall: LanguageModelV1FunctionToolCall;\n  tools: TOOLS;\n}): Promise<ToolCallUnion<TOOLS>> {\n  const toolName = toolCall.toolName as keyof TOOLS & string;\n\n  const tool = tools[toolName];\n\n  if (tool == null) {\n    throw new NoSuchToolError({\n      toolName: toolCall.toolName,\n      availableTools: Object.keys(tools),\n    });\n  }\n\n  const schema = asSchema(tool.parameters) as Schema<\n    inferParameters<TOOLS[keyof TOOLS]['parameters']>\n  >;\n\n  // when the tool call has no arguments, we try passing an empty object to the schema\n  // (many LLMs generate empty strings for tool calls with no arguments)\n  const parseResult =\n    toolCall.args.trim() === ''\n      ? safeValidateTypes({ value: {}, schema })\n      : safeParseJSON({ text: toolCall.args, schema });\n\n  if (parseResult.success === false) {\n    throw new InvalidToolArgumentsError({\n      toolName,\n      toolArgs: toolCall.args,\n      cause: parseResult.error,\n    });\n  }\n\n  return {\n    type: 'tool-call',\n    toolCallId: toolCall.toolCallId,\n    toolName,\n    args: parseResult.value,\n  };\n}\n","import { AISDKError, getErrorMessage } from '@ai-sdk/provider';\n\nconst name = 'AI_InvalidToolArgumentsError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\nexport class InvalidToolArgumentsError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  readonly toolName: string;\n  readonly toolArgs: string;\n\n  constructor({\n    toolArgs,\n    toolName,\n    cause,\n    message = `Invalid arguments for tool ${toolName}: ${getErrorMessage(\n      cause,\n    )}`,\n  }: {\n    message?: string;\n    toolArgs: string;\n    toolName: string;\n    cause: unknown;\n  }) {\n    super({ name, message, cause });\n\n    this.toolArgs = toolArgs;\n    this.toolName = toolName;\n  }\n\n  static isInstance(error: unknown): error is InvalidToolArgumentsError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","import { AISDKError } from '@ai-sdk/provider';\n\nconst name = 'AI_NoSuchToolError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\nexport class NoSuchToolError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  readonly toolName: string;\n  readonly availableTools: string[] | undefined;\n\n  constructor({\n    toolName,\n    availableTools = undefined,\n    message = `Model tried to call unavailable tool '${toolName}'. ${\n      availableTools === undefined\n        ? 'No tools are available.'\n        : `Available tools: ${availableTools.join(', ')}.`\n    }`,\n  }: {\n    toolName: string;\n    availableTools?: string[] | undefined;\n    message?: string;\n  }) {\n    super({ name, message });\n\n    this.toolName = toolName;\n    this.availableTools = availableTools;\n  }\n\n  static isInstance(error: unknown): error is NoSuchToolError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","import { AISDKError, getErrorMessage } from '@ai-sdk/provider';\nimport { InvalidToolArgumentsError } from './invalid-tool-arguments-error';\nimport { NoSuchToolError } from './no-such-tool-error';\n\nconst name = 'AI_ToolCallRepairError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\nexport class ToolCallRepairError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  readonly originalError: NoSuchToolError | InvalidToolArgumentsError;\n\n  constructor({\n    cause,\n    originalError,\n    message = `Error repairing tool call: ${getErrorMessage(cause)}`,\n  }: {\n    message?: string;\n    cause: unknown;\n    originalError: NoSuchToolError | InvalidToolArgumentsError;\n  }) {\n    super({ name, message, cause });\n    this.originalError = originalError;\n  }\n\n  static isInstance(error: unknown): error is ToolCallRepairError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","export type ReasoningDetail =\n  | { type: 'text'; text: string; signature?: string }\n  | { type: 'redacted'; data: string };\n\nexport function asReasoningText(\n  reasoning: Array<ReasoningDetail>,\n): string | undefined {\n  const reasoningText = reasoning\n    .filter(part => part.type === 'text')\n    .map(part => part.text)\n    .join('');\n\n  return reasoningText.length > 0 ? reasoningText : undefined;\n}\n","import { ToolResultPart } from '../prompt';\nimport { GeneratedFile } from './generated-file';\nimport { ReasoningDetail } from './reasoning-detail';\nimport { ResponseMessage } from './step-result';\nimport { ToolCallArray } from './tool-call';\nimport { ToolResultArray } from './tool-result';\nimport { ToolSet } from './tool-set';\n\n/**\nConverts the result of a `generateText` or `streamText` call to a list of response messages.\n */\nexport function toResponseMessages<TOOLS extends ToolSet>({\n  text = '',\n  files,\n  reasoning,\n  tools,\n  toolCalls,\n  toolResults,\n  messageId,\n  generateMessageId,\n}: {\n  text: string | undefined;\n  files: Array<GeneratedFile>;\n  reasoning: Array<ReasoningDetail>;\n  tools: TOOLS;\n  toolCalls: ToolCallArray<TOOLS>;\n  toolResults: ToolResultArray<TOOLS>;\n  messageId: string;\n  generateMessageId: () => string;\n}): Array<ResponseMessage> {\n  const responseMessages: Array<ResponseMessage> = [];\n\n  const content = [];\n\n  // TODO language model v2: switch to order response content (instead of type-based ordering)\n\n  if (reasoning.length > 0) {\n    content.push(\n      ...reasoning.map(part =>\n        part.type === 'text'\n          ? { ...part, type: 'reasoning' as const }\n          : { ...part, type: 'redacted-reasoning' as const },\n      ),\n    );\n  }\n\n  if (files.length > 0) {\n    content.push(\n      ...files.map(file => ({\n        type: 'file' as const,\n        data: file.base64,\n        mimeType: file.mimeType,\n      })),\n    );\n  }\n\n  if (text.length > 0) {\n    content.push({ type: 'text' as const, text });\n  }\n\n  if (toolCalls.length > 0) {\n    content.push(...toolCalls);\n  }\n\n  if (content.length > 0) {\n    responseMessages.push({\n      role: 'assistant',\n      content,\n      id: messageId,\n    });\n  }\n\n  if (toolResults.length > 0) {\n    responseMessages.push({\n      role: 'tool',\n      id: generateMessageId(),\n      content: toolResults.map((toolResult): ToolResultPart => {\n        const tool = tools[toolResult.toolName];\n        return tool?.experimental_toToolResultContent != null\n          ? {\n              type: 'tool-result',\n              toolCallId: toolResult.toolCallId,\n              toolName: toolResult.toolName,\n              result: tool.experimental_toToolResultContent(toolResult.result),\n              experimental_content: tool.experimental_toToolResultContent(\n                toolResult.result,\n              ),\n            }\n          : {\n              type: 'tool-result',\n              toolCallId: toolResult.toolCallId,\n              toolName: toolResult.toolName,\n              result: toolResult.result,\n            };\n      }),\n    });\n  }\n\n  return responseMessages;\n}\n","import { safeParseJSON, safeValidateTypes } from '@ai-sdk/provider-utils';\nimport {\n  asSchema,\n  DeepPartial,\n  parsePartialJson,\n  Schema,\n} from '@ai-sdk/ui-utils';\nimport { z } from 'zod';\nimport { NoObjectGeneratedError } from '../../errors';\nimport { injectJsonInstruction } from '../generate-object/inject-json-instruction';\nimport {\n  FinishReason,\n  LanguageModel,\n  LanguageModelV1CallOptions,\n} from '../types/language-model';\nimport { LanguageModelResponseMetadata } from '../types/language-model-response-metadata';\nimport { LanguageModelUsage } from '../types/usage';\n\nexport interface Output<OUTPUT, PARTIAL> {\n  readonly type: 'object' | 'text';\n  injectIntoSystemPrompt(options: {\n    system: string | undefined;\n    model: LanguageModel;\n  }): string | undefined;\n\n  responseFormat: (options: {\n    model: LanguageModel;\n  }) => LanguageModelV1CallOptions['responseFormat'];\n\n  parsePartial(options: { text: string }): { partial: PARTIAL } | undefined;\n\n  parseOutput(\n    options: { text: string },\n    context: {\n      response: LanguageModelResponseMetadata;\n      usage: LanguageModelUsage;\n      finishReason: FinishReason;\n    },\n  ): OUTPUT;\n}\n\nexport const text = (): Output<string, string> => ({\n  type: 'text',\n\n  responseFormat: () => ({ type: 'text' }),\n\n  injectIntoSystemPrompt({ system }: { system: string | undefined }) {\n    return system;\n  },\n\n  parsePartial({ text }: { text: string }) {\n    return { partial: text };\n  },\n\n  parseOutput({ text }: { text: string }) {\n    return text;\n  },\n});\n\nexport const object = <OUTPUT>({\n  schema: inputSchema,\n}: {\n  schema: z.Schema<OUTPUT, z.ZodTypeDef, any> | Schema<OUTPUT>;\n}): Output<OUTPUT, DeepPartial<OUTPUT>> => {\n  const schema = asSchema(inputSchema);\n\n  return {\n    type: 'object',\n\n    responseFormat: ({ model }) => ({\n      type: 'json',\n      schema: model.supportsStructuredOutputs ? schema.jsonSchema : undefined,\n    }),\n\n    injectIntoSystemPrompt({ system, model }) {\n      // when the model supports structured outputs,\n      // we can use the system prompt as is:\n      return model.supportsStructuredOutputs\n        ? system\n        : injectJsonInstruction({\n            prompt: system,\n            schema: schema.jsonSchema,\n          });\n    },\n\n    parsePartial({ text }: { text: string }) {\n      const result = parsePartialJson(text);\n\n      switch (result.state) {\n        case 'failed-parse':\n        case 'undefined-input':\n          return undefined;\n\n        case 'repaired-parse':\n        case 'successful-parse':\n          return {\n            // Note: currently no validation of partial results:\n            partial: result.value as DeepPartial<OUTPUT>,\n          };\n\n        default: {\n          const _exhaustiveCheck: never = result.state;\n          throw new Error(`Unsupported parse state: ${_exhaustiveCheck}`);\n        }\n      }\n    },\n\n    parseOutput(\n      { text }: { text: string },\n      context: {\n        response: LanguageModelResponseMetadata;\n        usage: LanguageModelUsage;\n        finishReason: FinishReason;\n      },\n    ) {\n      const parseResult = safeParseJSON({ text });\n\n      if (!parseResult.success) {\n        throw new NoObjectGeneratedError({\n          message: 'No object generated: could not parse the response.',\n          cause: parseResult.error,\n          text,\n          response: context.response,\n          usage: context.usage,\n          finishReason: context.finishReason,\n        });\n      }\n\n      const validationResult = safeValidateTypes({\n        value: parseResult.value,\n        schema,\n      });\n\n      if (!validationResult.success) {\n        throw new NoObjectGeneratedError({\n          message: 'No object generated: response did not match schema.',\n          cause: validationResult.error,\n          text,\n          response: context.response,\n          usage: context.usage,\n          finishReason: context.finishReason,\n        });\n      }\n\n      return validationResult.value;\n    },\n  };\n};\n","export {\n  AISDKError,\n  APICallError,\n  EmptyResponseBodyError,\n  InvalidPromptError,\n  InvalidResponseDataError,\n  JSONParseError,\n  LoadAPIKeyError,\n  NoContentGeneratedError,\n  NoSuchModelError,\n  TypeValidationError,\n  UnsupportedFunctionalityError,\n} from '@ai-sdk/provider';\n\nexport { InvalidArgumentError } from './invalid-argument-error';\nexport { InvalidStreamPartError } from './invalid-stream-part-error';\nexport { InvalidToolArgumentsError } from './invalid-tool-arguments-error';\nexport { NoImageGeneratedError } from './no-image-generated-error';\nexport { NoObjectGeneratedError } from './no-object-generated-error';\nexport { NoOutputSpecifiedError } from './no-output-specified-error';\nexport { NoSuchToolError } from './no-such-tool-error';\nexport { ToolCallRepairError } from './tool-call-repair-error';\nexport { ToolExecutionError } from './tool-execution-error';\nexport { MCPClientError } from './mcp-client-error';\n\nexport { InvalidDataContentError } from '../core/prompt/invalid-data-content-error';\nexport { InvalidMessageRoleError } from '../core/prompt/invalid-message-role-error';\nexport { MessageConversionError } from '../core/prompt/message-conversion-error';\nexport { DownloadError } from '../util/download-error';\nexport { RetryError } from '../util/retry-error';\n","import { AISDKError } from '@ai-sdk/provider';\nimport { SingleRequestTextStreamPart } from '../core/generate-text/run-tools-transformation';\n\nconst name = 'AI_InvalidStreamPartError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\nexport class InvalidStreamPartError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  readonly chunk: SingleRequestTextStreamPart<any>;\n\n  constructor({\n    chunk,\n    message,\n  }: {\n    chunk: SingleRequestTextStreamPart<any>;\n    message: string;\n  }) {\n    super({ name, message });\n\n    this.chunk = chunk;\n  }\n\n  static isInstance(error: unknown): error is InvalidStreamPartError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","import { AISDKError } from '@ai-sdk/provider';\n\nconst name = 'AI_MCPClientError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\n/**\n * An error occurred with the MCP client.\n */\nexport class MCPClientError extends AISDKError {\n  private readonly [symbol] = true;\n\n  constructor({\n    name = 'MCPClientError',\n    message,\n    cause,\n  }: {\n    name?: string;\n    message: string;\n    cause?: unknown;\n  }) {\n    super({ name, message, cause });\n  }\n\n  static isInstance(error: unknown): error is MCPClientError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","import { delay as originalDelay } from '@ai-sdk/provider-utils';\nimport { TextStreamPart } from './stream-text-result';\nimport { ToolSet } from './tool-set';\nimport { InvalidArgumentError } from '@ai-sdk/provider';\n\nconst CHUNKING_REGEXPS = {\n  word: /\\S+\\s+/m,\n  line: /\\n+/m,\n};\n\n/**\n * Detects the first chunk in a buffer.\n *\n * @param buffer - The buffer to detect the first chunk in.\n *\n * @returns The first detected chunk, or `undefined` if no chunk was detected.\n */\nexport type ChunkDetector = (buffer: string) => string | undefined | null;\n\n/**\n * Smooths text streaming output.\n *\n * @param delayInMs - The delay in milliseconds between each chunk. Defaults to 10ms. Can be set to `null` to skip the delay.\n * @param chunking - Controls how the text is chunked for streaming. Use \"word\" to stream word by word (default), \"line\" to stream line by line, or provide a custom RegExp pattern for custom chunking.\n *\n * @returns A transform stream that smooths text streaming output.\n */\nexport function smoothStream<TOOLS extends ToolSet>({\n  delayInMs = 10,\n  chunking = 'word',\n  _internal: { delay = originalDelay } = {},\n}: {\n  delayInMs?: number | null;\n  chunking?: 'word' | 'line' | RegExp | ChunkDetector;\n  /**\n   * Internal. For test use only. May change without notice.\n   */\n  _internal?: {\n    delay?: (delayInMs: number | null) => Promise<void>;\n  };\n} = {}): (options: {\n  tools: TOOLS;\n}) => TransformStream<TextStreamPart<TOOLS>, TextStreamPart<TOOLS>> {\n  let detectChunk: ChunkDetector;\n\n  if (typeof chunking === 'function') {\n    detectChunk = buffer => {\n      const match = chunking(buffer);\n\n      if (match == null) {\n        return null;\n      }\n\n      if (!match.length) {\n        throw new Error(`Chunking function must return a non-empty string.`);\n      }\n\n      if (!buffer.startsWith(match)) {\n        throw new Error(\n          `Chunking function must return a match that is a prefix of the buffer. Received: \"${match}\" expected to start with \"${buffer}\"`,\n        );\n      }\n\n      return match;\n    };\n  } else {\n    const chunkingRegex =\n      typeof chunking === 'string' ? CHUNKING_REGEXPS[chunking] : chunking;\n\n    if (chunkingRegex == null) {\n      throw new InvalidArgumentError({\n        argument: 'chunking',\n        message: `Chunking must be \"word\" or \"line\" or a RegExp. Received: ${chunking}`,\n      });\n    }\n\n    detectChunk = buffer => {\n      const match = chunkingRegex.exec(buffer);\n\n      if (!match) {\n        return null;\n      }\n\n      return buffer.slice(0, match.index) + match?.[0];\n    };\n  }\n\n  return () => {\n    let buffer = '';\n\n    return new TransformStream<TextStreamPart<TOOLS>, TextStreamPart<TOOLS>>({\n      async transform(chunk, controller) {\n        if (chunk.type !== 'text-delta') {\n          if (buffer.length > 0) {\n            controller.enqueue({ type: 'text-delta', textDelta: buffer });\n            buffer = '';\n          }\n\n          controller.enqueue(chunk);\n          return;\n        }\n\n        buffer += chunk.textDelta;\n\n        let match;\n\n        while ((match = detectChunk(buffer)) != null) {\n          controller.enqueue({ type: 'text-delta', textDelta: match });\n          buffer = buffer.slice(match.length);\n\n          await delay(delayInMs);\n        }\n      },\n    });\n  };\n}\n","import { AISDKError, LanguageModelV1Source } from '@ai-sdk/provider';\nimport { createIdGenerator, IDGenerator } from '@ai-sdk/provider-utils';\nimport { DataStreamString, formatDataStreamPart } from '@ai-sdk/ui-utils';\nimport { Span } from '@opentelemetry/api';\nimport { ServerResponse } from 'node:http';\nimport { InvalidArgumentError } from '../../errors/invalid-argument-error';\nimport { InvalidStreamPartError } from '../../errors/invalid-stream-part-error';\nimport { NoOutputSpecifiedError } from '../../errors/no-output-specified-error';\nimport { StreamData } from '../../streams/stream-data';\nimport { asArray } from '../../util/as-array';\nimport { consumeStream } from '../../util/consume-stream';\nimport { DelayedPromise } from '../../util/delayed-promise';\nimport { DataStreamWriter } from '../data-stream/data-stream-writer';\nimport { CallSettings } from '../prompt/call-settings';\nimport { convertToLanguageModelPrompt } from '../prompt/convert-to-language-model-prompt';\nimport { CoreAssistantMessage } from '../prompt/message';\nimport { prepareCallSettings } from '../prompt/prepare-call-settings';\nimport { prepareRetries } from '../prompt/prepare-retries';\nimport { prepareToolsAndToolChoice } from '../prompt/prepare-tools-and-tool-choice';\nimport { Prompt } from '../prompt/prompt';\nimport { standardizePrompt } from '../prompt/standardize-prompt';\nimport { assembleOperationName } from '../telemetry/assemble-operation-name';\nimport { getBaseTelemetryAttributes } from '../telemetry/get-base-telemetry-attributes';\nimport { getTracer } from '../telemetry/get-tracer';\nimport { recordSpan } from '../telemetry/record-span';\nimport { selectTelemetryAttributes } from '../telemetry/select-telemetry-attributes';\nimport { TelemetrySettings } from '../telemetry/telemetry-settings';\nimport {\n  FinishReason,\n  LanguageModel,\n  LogProbs,\n  ToolChoice,\n} from '../types/language-model';\nimport { LanguageModelResponseMetadata } from '../types/language-model-response-metadata';\nimport { ProviderMetadata, ProviderOptions } from '../types/provider-metadata';\nimport { addLanguageModelUsage, LanguageModelUsage } from '../types/usage';\nimport {\n  AsyncIterableStream,\n  createAsyncIterableStream,\n} from '../util/async-iterable-stream';\nimport { createStitchableStream } from '../util/create-stitchable-stream';\nimport { mergeStreams } from '../util/merge-streams';\nimport { now as originalNow } from '../util/now';\nimport { prepareOutgoingHttpHeaders } from '../util/prepare-outgoing-http-headers';\nimport { prepareResponseHeaders } from '../util/prepare-response-headers';\nimport { splitOnLastWhitespace } from '../util/split-on-last-whitespace';\nimport { writeToServerResponse } from '../util/write-to-server-response';\nimport { GeneratedFile } from './generated-file';\nimport { Output } from './output';\nimport { asReasoningText, ReasoningDetail } from './reasoning-detail';\nimport {\n  runToolsTransformation,\n  SingleRequestTextStreamPart,\n} from './run-tools-transformation';\nimport { ResponseMessage, StepResult } from './step-result';\nimport {\n  ConsumeStreamOptions,\n  DataStreamOptions,\n  StreamTextResult,\n  TextStreamPart,\n} from './stream-text-result';\nimport { toResponseMessages } from './to-response-messages';\nimport { ToolCallUnion } from './tool-call';\nimport { ToolCallRepairFunction } from './tool-call-repair';\nimport { ToolResultUnion } from './tool-result';\nimport { ToolSet } from './tool-set';\nimport { stringifyForTelemetry } from '../prompt/stringify-for-telemetry';\n\nconst originalGenerateId = createIdGenerator({\n  prefix: 'aitxt',\n  size: 24,\n});\n\nconst originalGenerateMessageId = createIdGenerator({\n  prefix: 'msg',\n  size: 24,\n});\n\n/**\nA transformation that is applied to the stream.\n\n@param stopStream - A function that stops the source stream.\n@param tools - The tools that are accessible to and can be called by the model. The model needs to support calling tools.\n */\nexport type StreamTextTransform<TOOLS extends ToolSet> = (options: {\n  tools: TOOLS; // for type inference\n  stopStream: () => void;\n}) => TransformStream<TextStreamPart<TOOLS>, TextStreamPart<TOOLS>>;\n\n/**\nCallback that is set using the `onError` option.\n\n@param event - The event that is passed to the callback.\n */\nexport type StreamTextOnErrorCallback = (event: {\n  error: unknown;\n}) => Promise<void> | void;\n\n/**\nCallback that is set using the `onStepFinish` option.\n\n@param stepResult - The result of the step.\n */\nexport type StreamTextOnStepFinishCallback<TOOLS extends ToolSet> = (\n  stepResult: StepResult<TOOLS>,\n) => Promise<void> | void;\n\n/**\nCallback that is set using the `onChunk` option.\n\n@param event - The event that is passed to the callback.\n */\nexport type StreamTextOnChunkCallback<TOOLS extends ToolSet> = (event: {\n  chunk: Extract<\n    TextStreamPart<TOOLS>,\n    {\n      type:\n        | 'text-delta'\n        | 'reasoning'\n        | 'source'\n        | 'tool-call'\n        | 'tool-call-streaming-start'\n        | 'tool-call-delta'\n        | 'tool-result';\n    }\n  >;\n}) => Promise<void> | void;\n\n/**\nCallback that is set using the `onFinish` option.\n\n@param event - The event that is passed to the callback.\n */\nexport type StreamTextOnFinishCallback<TOOLS extends ToolSet> = (\n  event: Omit<StepResult<TOOLS>, 'stepType' | 'isContinued'> & {\n    /**\nDetails for all steps.\n   */\n    readonly steps: StepResult<TOOLS>[];\n  },\n) => Promise<void> | void;\n\n/**\nGenerate a text and call tools for a given prompt using a language model.\n\nThis function streams the output. If you do not want to stream the output, use `generateText` instead.\n\n@param model - The language model to use.\n@param tools - Tools that are accessible to and can be called by the model. The model needs to support calling tools.\n\n@param system - A system message that will be part of the prompt.\n@param prompt - A simple text prompt. You can either use `prompt` or `messages` but not both.\n@param messages - A list of messages. You can either use `prompt` or `messages` but not both.\n\n@param maxTokens - Maximum number of tokens to generate.\n@param temperature - Temperature setting.\nThe value is passed through to the provider. The range depends on the provider and model.\nIt is recommended to set either `temperature` or `topP`, but not both.\n@param topP - Nucleus sampling.\nThe value is passed through to the provider. The range depends on the provider and model.\nIt is recommended to set either `temperature` or `topP`, but not both.\n@param topK - Only sample from the top K options for each subsequent token.\nUsed to remove \"long tail\" low probability responses.\nRecommended for advanced use cases only. You usually only need to use temperature.\n@param presencePenalty - Presence penalty setting.\nIt affects the likelihood of the model to repeat information that is already in the prompt.\nThe value is passed through to the provider. The range depends on the provider and model.\n@param frequencyPenalty - Frequency penalty setting.\nIt affects the likelihood of the model to repeatedly use the same words or phrases.\nThe value is passed through to the provider. The range depends on the provider and model.\n@param stopSequences - Stop sequences.\nIf set, the model will stop generating text when one of the stop sequences is generated.\n@param seed - The seed (integer) to use for random sampling.\nIf set and supported by the model, calls will generate deterministic results.\n\n@param maxRetries - Maximum number of retries. Set to 0 to disable retries. Default: 2.\n@param abortSignal - An optional abort signal that can be used to cancel the call.\n@param headers - Additional HTTP headers to be sent with the request. Only applicable for HTTP-based providers.\n\n@param maxSteps - Maximum number of sequential LLM calls (steps), e.g. when you use tool calls.\n@param experimental_generateMessageId - Generate a unique ID for each message.\n\n@param onChunk - Callback that is called for each chunk of the stream. The stream processing will pause until the callback promise is resolved.\n@param onError - Callback that is called when an error occurs during streaming. You can use it to log errors.\n@param onStepFinish - Callback that is called when each step (LLM call) is finished, including intermediate steps.\n@param onFinish - Callback that is called when the LLM response and all request tool executions\n(for tools that have an `execute` function) are finished.\n\n@return\nA result object for accessing different stream types and additional information.\n */\nexport function streamText<\n  TOOLS extends ToolSet,\n  OUTPUT = never,\n  PARTIAL_OUTPUT = never,\n>({\n  model,\n  tools,\n  toolChoice,\n  system,\n  prompt,\n  messages,\n  maxRetries,\n  abortSignal,\n  headers,\n  maxSteps = 1,\n  experimental_generateMessageId: generateMessageId = originalGenerateMessageId,\n  experimental_output: output,\n  experimental_continueSteps: continueSteps = false,\n  experimental_telemetry: telemetry,\n  experimental_providerMetadata,\n  providerOptions = experimental_providerMetadata,\n  experimental_toolCallStreaming = false,\n  toolCallStreaming = experimental_toolCallStreaming,\n  experimental_activeTools: activeTools,\n  experimental_repairToolCall: repairToolCall,\n  experimental_transform: transform,\n  onChunk,\n  onError,\n  onFinish,\n  onStepFinish,\n  _internal: {\n    now = originalNow,\n    generateId = originalGenerateId,\n    currentDate = () => new Date(),\n  } = {},\n  ...settings\n}: CallSettings &\n  Prompt & {\n    /**\nThe language model to use.\n     */\n    model: LanguageModel;\n\n    /**\nThe tools that the model can call. The model needs to support calling tools.\n    */\n    tools?: TOOLS;\n\n    /**\nThe tool choice strategy. Default: 'auto'.\n     */\n    toolChoice?: ToolChoice<TOOLS>;\n\n    /**\nMaximum number of sequential LLM calls (steps), e.g. when you use tool calls. Must be at least 1.\n\nA maximum number is required to prevent infinite loops in the case of misconfigured tools.\n\nBy default, it's set to 1, which means that only a single LLM call is made.\n */\n    maxSteps?: number;\n\n    /**\nGenerate a unique ID for each message.\n     */\n    experimental_generateMessageId?: IDGenerator;\n\n    /**\nWhen enabled, the model will perform additional steps if the finish reason is \"length\" (experimental).\n\nBy default, it's set to false.\n     */\n    experimental_continueSteps?: boolean;\n\n    /**\nOptional telemetry configuration (experimental).\n     */\n    experimental_telemetry?: TelemetrySettings;\n\n    /**\nAdditional provider-specific options. They are passed through\nto the provider from the AI SDK and enable provider-specific\nfunctionality that can be fully encapsulated in the provider.\n */\n    providerOptions?: ProviderOptions;\n\n    /**\n@deprecated Use `providerOptions` instead.\n */\n    experimental_providerMetadata?: ProviderMetadata;\n\n    /**\nLimits the tools that are available for the model to call without\nchanging the tool call and result types in the result.\n     */\n    experimental_activeTools?: Array<keyof TOOLS>;\n\n    /**\nOptional specification for parsing structured outputs from the LLM response.\n     */\n    experimental_output?: Output<OUTPUT, PARTIAL_OUTPUT>;\n\n    /**\nA function that attempts to repair a tool call that failed to parse.\n     */\n    experimental_repairToolCall?: ToolCallRepairFunction<TOOLS>;\n\n    /**\nEnable streaming of tool call deltas as they are generated. Disabled by default.\n     */\n    toolCallStreaming?: boolean;\n\n    /**\n@deprecated Use `toolCallStreaming` instead.\n     */\n    experimental_toolCallStreaming?: boolean;\n\n    /**\nOptional stream transformations.\nThey are applied in the order they are provided.\nThe stream transformations must maintain the stream structure for streamText to work correctly.\n     */\n    experimental_transform?:\n      | StreamTextTransform<TOOLS>\n      | Array<StreamTextTransform<TOOLS>>;\n\n    /**\nCallback that is called for each chunk of the stream.\nThe stream processing will pause until the callback promise is resolved.\n     */\n    onChunk?: StreamTextOnChunkCallback<TOOLS>;\n\n    /**\nCallback that is invoked when an error occurs during streaming.\nYou can use it to log errors.\nThe stream processing will pause until the callback promise is resolved.\n     */\n    onError?: StreamTextOnErrorCallback;\n\n    /**\nCallback that is called when the LLM response and all request tool executions\n(for tools that have an `execute` function) are finished.\n\nThe usage is the combined usage of all steps.\n     */\n    onFinish?: StreamTextOnFinishCallback<TOOLS>;\n\n    /**\nCallback that is called when each step (LLM call) is finished, including intermediate steps.\n    */\n    onStepFinish?: StreamTextOnStepFinishCallback<TOOLS>;\n\n    /**\nInternal. For test use only. May change without notice.\n     */\n    _internal?: {\n      now?: () => number;\n      generateId?: IDGenerator;\n      currentDate?: () => Date;\n    };\n  }): StreamTextResult<TOOLS, PARTIAL_OUTPUT> {\n  return new DefaultStreamTextResult<TOOLS, OUTPUT, PARTIAL_OUTPUT>({\n    model,\n    telemetry,\n    headers,\n    settings,\n    maxRetries,\n    abortSignal,\n    system,\n    prompt,\n    messages,\n    tools,\n    toolChoice,\n    toolCallStreaming,\n    transforms: asArray(transform),\n    activeTools,\n    repairToolCall,\n    maxSteps,\n    output,\n    continueSteps,\n    providerOptions,\n    onChunk,\n    onError,\n    onFinish,\n    onStepFinish,\n    now,\n    currentDate,\n    generateId,\n    generateMessageId,\n  });\n}\n\ntype EnrichedStreamPart<TOOLS extends ToolSet, PARTIAL_OUTPUT> = {\n  part: TextStreamPart<TOOLS>;\n  partialOutput: PARTIAL_OUTPUT | undefined;\n};\n\nfunction createOutputTransformStream<\n  TOOLS extends ToolSet,\n  OUTPUT,\n  PARTIAL_OUTPUT,\n>(\n  output: Output<OUTPUT, PARTIAL_OUTPUT> | undefined,\n): TransformStream<\n  TextStreamPart<TOOLS>,\n  EnrichedStreamPart<TOOLS, PARTIAL_OUTPUT>\n> {\n  if (!output) {\n    return new TransformStream<\n      TextStreamPart<TOOLS>,\n      EnrichedStreamPart<TOOLS, PARTIAL_OUTPUT>\n    >({\n      transform(chunk, controller) {\n        controller.enqueue({ part: chunk, partialOutput: undefined });\n      },\n    });\n  }\n\n  let text = '';\n  let textChunk = '';\n  let lastPublishedJson = '';\n\n  function publishTextChunk({\n    controller,\n    partialOutput = undefined,\n  }: {\n    controller: TransformStreamDefaultController<\n      EnrichedStreamPart<TOOLS, PARTIAL_OUTPUT>\n    >;\n    partialOutput?: PARTIAL_OUTPUT;\n  }) {\n    controller.enqueue({\n      part: { type: 'text-delta', textDelta: textChunk },\n      partialOutput,\n    });\n    textChunk = '';\n  }\n\n  return new TransformStream<\n    TextStreamPart<TOOLS>,\n    EnrichedStreamPart<TOOLS, PARTIAL_OUTPUT>\n  >({\n    transform(chunk, controller) {\n      // ensure that we publish the last text chunk before the step finish:\n      if (chunk.type === 'step-finish') {\n        publishTextChunk({ controller });\n      }\n\n      if (chunk.type !== 'text-delta') {\n        controller.enqueue({ part: chunk, partialOutput: undefined });\n        return;\n      }\n\n      text += chunk.textDelta;\n      textChunk += chunk.textDelta;\n\n      // only publish if partial json can be parsed:\n      const result = output.parsePartial({ text });\n      if (result != null) {\n        // only send new json if it has changed:\n        const currentJson = JSON.stringify(result.partial);\n        if (currentJson !== lastPublishedJson) {\n          publishTextChunk({ controller, partialOutput: result.partial });\n          lastPublishedJson = currentJson;\n        }\n      }\n    },\n\n    flush(controller) {\n      // publish remaining text (there should be none if the content was correctly formatted):\n      if (textChunk.length > 0) {\n        publishTextChunk({ controller });\n      }\n    },\n  });\n}\n\nclass DefaultStreamTextResult<TOOLS extends ToolSet, OUTPUT, PARTIAL_OUTPUT>\n  implements StreamTextResult<TOOLS, PARTIAL_OUTPUT>\n{\n  private readonly warningsPromise = new DelayedPromise<\n    Awaited<StreamTextResult<TOOLS, PARTIAL_OUTPUT>['warnings']>\n  >();\n  private readonly usagePromise = new DelayedPromise<\n    Awaited<StreamTextResult<TOOLS, PARTIAL_OUTPUT>['usage']>\n  >();\n  private readonly finishReasonPromise = new DelayedPromise<\n    Awaited<StreamTextResult<TOOLS, PARTIAL_OUTPUT>['finishReason']>\n  >();\n  private readonly providerMetadataPromise = new DelayedPromise<\n    Awaited<\n      StreamTextResult<TOOLS, PARTIAL_OUTPUT>['experimental_providerMetadata']\n    >\n  >();\n  private readonly textPromise = new DelayedPromise<\n    Awaited<StreamTextResult<TOOLS, PARTIAL_OUTPUT>['text']>\n  >();\n  private readonly reasoningPromise = new DelayedPromise<\n    Awaited<StreamTextResult<TOOLS, PARTIAL_OUTPUT>['reasoning']>\n  >();\n  private readonly reasoningDetailsPromise = new DelayedPromise<\n    Awaited<StreamTextResult<TOOLS, PARTIAL_OUTPUT>['reasoningDetails']>\n  >();\n  private readonly sourcesPromise = new DelayedPromise<\n    Awaited<StreamTextResult<TOOLS, PARTIAL_OUTPUT>['sources']>\n  >();\n  private readonly filesPromise = new DelayedPromise<\n    Awaited<StreamTextResult<TOOLS, PARTIAL_OUTPUT>['files']>\n  >();\n  private readonly toolCallsPromise = new DelayedPromise<\n    Awaited<StreamTextResult<TOOLS, PARTIAL_OUTPUT>['toolCalls']>\n  >();\n  private readonly toolResultsPromise = new DelayedPromise<\n    Awaited<StreamTextResult<TOOLS, PARTIAL_OUTPUT>['toolResults']>\n  >();\n  private readonly requestPromise = new DelayedPromise<\n    Awaited<StreamTextResult<TOOLS, PARTIAL_OUTPUT>['request']>\n  >();\n  private readonly responsePromise = new DelayedPromise<\n    Awaited<StreamTextResult<TOOLS, PARTIAL_OUTPUT>['response']>\n  >();\n  private readonly stepsPromise = new DelayedPromise<\n    Awaited<StreamTextResult<TOOLS, PARTIAL_OUTPUT>['steps']>\n  >();\n\n  private readonly addStream: (\n    stream: ReadableStream<TextStreamPart<TOOLS>>,\n  ) => void;\n\n  private readonly closeStream: () => void;\n\n  private baseStream: ReadableStream<EnrichedStreamPart<TOOLS, PARTIAL_OUTPUT>>;\n\n  private output: Output<OUTPUT, PARTIAL_OUTPUT> | undefined;\n\n  constructor({\n    model,\n    telemetry,\n    headers,\n    settings,\n    maxRetries: maxRetriesArg,\n    abortSignal,\n    system,\n    prompt,\n    messages,\n    tools,\n    toolChoice,\n    toolCallStreaming,\n    transforms,\n    activeTools,\n    repairToolCall,\n    maxSteps,\n    output,\n    continueSteps,\n    providerOptions,\n    now,\n    currentDate,\n    generateId,\n    generateMessageId,\n    onChunk,\n    onError,\n    onFinish,\n    onStepFinish,\n  }: {\n    model: LanguageModel;\n    telemetry: TelemetrySettings | undefined;\n    headers: Record<string, string | undefined> | undefined;\n    settings: Omit<CallSettings, 'abortSignal' | 'headers'>;\n    maxRetries: number | undefined;\n    abortSignal: AbortSignal | undefined;\n    system: Prompt['system'];\n    prompt: Prompt['prompt'];\n    messages: Prompt['messages'];\n    tools: TOOLS | undefined;\n    toolChoice: ToolChoice<TOOLS> | undefined;\n    toolCallStreaming: boolean;\n    transforms: Array<StreamTextTransform<TOOLS>>;\n    activeTools: Array<keyof TOOLS> | undefined;\n    repairToolCall: ToolCallRepairFunction<TOOLS> | undefined;\n    maxSteps: number;\n    output: Output<OUTPUT, PARTIAL_OUTPUT> | undefined;\n    continueSteps: boolean;\n    providerOptions: ProviderOptions | undefined;\n    now: () => number;\n    currentDate: () => Date;\n    generateId: () => string;\n    generateMessageId: () => string;\n\n    // callbacks:\n    onChunk: undefined | StreamTextOnChunkCallback<TOOLS>;\n    onError: undefined | StreamTextOnErrorCallback;\n    onFinish: undefined | StreamTextOnFinishCallback<TOOLS>;\n    onStepFinish: undefined | StreamTextOnStepFinishCallback<TOOLS>;\n  }) {\n    if (maxSteps < 1) {\n      throw new InvalidArgumentError({\n        parameter: 'maxSteps',\n        value: maxSteps,\n        message: 'maxSteps must be at least 1',\n      });\n    }\n\n    this.output = output;\n\n    // event processor for telemetry, invoking callbacks, etc.\n    // The event processor reads the transformed stream to enable correct\n    // recording of the final transformed outputs.\n    let recordedStepText = '';\n    let recordedContinuationText = '';\n    let recordedFullText = '';\n\n    let stepReasoning: Array<ReasoningDetail> = [];\n    let stepFiles: Array<GeneratedFile> = [];\n    let activeReasoningText: undefined | (ReasoningDetail & { type: 'text' }) =\n      undefined;\n\n    let recordedStepSources: LanguageModelV1Source[] = [];\n    const recordedSources: LanguageModelV1Source[] = [];\n\n    const recordedResponse: LanguageModelResponseMetadata & {\n      messages: Array<ResponseMessage>;\n    } = {\n      id: generateId(),\n      timestamp: currentDate(),\n      modelId: model.modelId,\n      messages: [],\n    };\n    let recordedToolCalls: ToolCallUnion<TOOLS>[] = [];\n    let recordedToolResults: ToolResultUnion<TOOLS>[] = [];\n    let recordedFinishReason: FinishReason | undefined = undefined;\n    let recordedUsage: LanguageModelUsage | undefined = undefined;\n    let stepType: 'initial' | 'continue' | 'tool-result' = 'initial';\n    const recordedSteps: StepResult<TOOLS>[] = [];\n    let rootSpan!: Span;\n\n    const eventProcessor = new TransformStream<\n      EnrichedStreamPart<TOOLS, PARTIAL_OUTPUT>,\n      EnrichedStreamPart<TOOLS, PARTIAL_OUTPUT>\n    >({\n      async transform(chunk, controller) {\n        controller.enqueue(chunk); // forward the chunk to the next stream\n\n        const { part } = chunk;\n\n        if (\n          part.type === 'text-delta' ||\n          part.type === 'reasoning' ||\n          part.type === 'source' ||\n          part.type === 'tool-call' ||\n          part.type === 'tool-result' ||\n          part.type === 'tool-call-streaming-start' ||\n          part.type === 'tool-call-delta'\n        ) {\n          await onChunk?.({ chunk: part });\n        }\n\n        if (part.type === 'error') {\n          await onError?.({ error: part.error });\n        }\n\n        if (part.type === 'text-delta') {\n          recordedStepText += part.textDelta;\n          recordedContinuationText += part.textDelta;\n          recordedFullText += part.textDelta;\n        }\n\n        if (part.type === 'reasoning') {\n          if (activeReasoningText == null) {\n            activeReasoningText = { type: 'text', text: part.textDelta };\n            stepReasoning.push(activeReasoningText);\n          } else {\n            activeReasoningText.text += part.textDelta;\n          }\n        }\n\n        if (part.type === 'reasoning-signature') {\n          if (activeReasoningText == null) {\n            throw new AISDKError({\n              name: 'InvalidStreamPart',\n              message: 'reasoning-signature without reasoning',\n            });\n          }\n\n          activeReasoningText.signature = part.signature;\n          activeReasoningText = undefined; // signature concludes reasoning part\n        }\n\n        if (part.type === 'redacted-reasoning') {\n          stepReasoning.push({ type: 'redacted', data: part.data });\n        }\n\n        if (part.type === 'file') {\n          stepFiles.push(part);\n        }\n\n        if (part.type === 'source') {\n          recordedSources.push(part.source);\n          recordedStepSources.push(part.source);\n        }\n\n        if (part.type === 'tool-call') {\n          recordedToolCalls.push(part);\n        }\n\n        if (part.type === 'tool-result') {\n          recordedToolResults.push(part);\n        }\n\n        if (part.type === 'step-finish') {\n          const stepMessages = toResponseMessages({\n            text: recordedContinuationText,\n            files: stepFiles,\n            reasoning: stepReasoning,\n            tools: tools ?? ({} as TOOLS),\n            toolCalls: recordedToolCalls,\n            toolResults: recordedToolResults,\n            messageId: part.messageId,\n            generateMessageId,\n          });\n\n          // determine the next step type\n          const currentStep = recordedSteps.length;\n          let nextStepType: 'done' | 'continue' | 'tool-result' = 'done';\n          if (currentStep + 1 < maxSteps) {\n            if (\n              continueSteps &&\n              part.finishReason === 'length' &&\n              // only use continue when there are no tool calls:\n              recordedToolCalls.length === 0\n            ) {\n              nextStepType = 'continue';\n            } else if (\n              // there are tool calls:\n              recordedToolCalls.length > 0 &&\n              // all current tool calls have results:\n              recordedToolResults.length === recordedToolCalls.length\n            ) {\n              nextStepType = 'tool-result';\n            }\n          }\n\n          // Add step information (after response messages are updated):\n          const currentStepResult: StepResult<TOOLS> = {\n            stepType,\n            text: recordedStepText,\n            reasoning: asReasoningText(stepReasoning),\n            reasoningDetails: stepReasoning,\n            files: stepFiles,\n            sources: recordedStepSources,\n            toolCalls: recordedToolCalls,\n            toolResults: recordedToolResults,\n            finishReason: part.finishReason,\n            usage: part.usage,\n            warnings: part.warnings,\n            logprobs: part.logprobs,\n            request: part.request,\n            response: {\n              ...part.response,\n              messages: [...recordedResponse.messages, ...stepMessages],\n            },\n            providerMetadata: part.experimental_providerMetadata,\n            experimental_providerMetadata: part.experimental_providerMetadata,\n            isContinued: part.isContinued,\n          };\n\n          await onStepFinish?.(currentStepResult);\n\n          recordedSteps.push(currentStepResult);\n\n          recordedToolCalls = [];\n          recordedToolResults = [];\n          recordedStepText = '';\n          recordedStepSources = [];\n          stepReasoning = [];\n          stepFiles = [];\n          activeReasoningText = undefined;\n\n          if (nextStepType !== 'done') {\n            stepType = nextStepType;\n          }\n\n          if (nextStepType !== 'continue') {\n            recordedResponse.messages.push(...stepMessages);\n            recordedContinuationText = '';\n          }\n        }\n\n        if (part.type === 'finish') {\n          recordedResponse.id = part.response.id;\n          recordedResponse.timestamp = part.response.timestamp;\n          recordedResponse.modelId = part.response.modelId;\n          recordedResponse.headers = part.response.headers;\n          recordedUsage = part.usage;\n          recordedFinishReason = part.finishReason;\n        }\n      },\n\n      async flush(controller) {\n        try {\n          if (recordedSteps.length === 0) {\n            return; // no steps recorded (e.g. in error scenario)\n          }\n\n          // from last step (when there are errors there may be no last step)\n          const lastStep = recordedSteps[recordedSteps.length - 1];\n\n          self.warningsPromise.resolve(lastStep.warnings);\n          self.requestPromise.resolve(lastStep.request);\n          self.responsePromise.resolve(lastStep.response);\n          self.toolCallsPromise.resolve(lastStep.toolCalls);\n          self.toolResultsPromise.resolve(lastStep.toolResults);\n          self.providerMetadataPromise.resolve(\n            lastStep.experimental_providerMetadata,\n          );\n          self.reasoningPromise.resolve(lastStep.reasoning);\n          self.reasoningDetailsPromise.resolve(lastStep.reasoningDetails);\n\n          // derived:\n          const finishReason = recordedFinishReason ?? 'unknown';\n          const usage = recordedUsage ?? {\n            completionTokens: NaN,\n            promptTokens: NaN,\n            totalTokens: NaN,\n          };\n\n          // from finish:\n          self.finishReasonPromise.resolve(finishReason);\n          self.usagePromise.resolve(usage);\n\n          // aggregate results:\n          self.textPromise.resolve(recordedFullText);\n          self.sourcesPromise.resolve(recordedSources);\n          self.filesPromise.resolve(lastStep.files);\n          self.stepsPromise.resolve(recordedSteps);\n\n          // call onFinish callback:\n          await onFinish?.({\n            finishReason,\n            logprobs: undefined,\n            usage,\n            text: recordedFullText,\n            reasoning: lastStep.reasoning,\n            reasoningDetails: lastStep.reasoningDetails,\n            files: lastStep.files,\n            sources: lastStep.sources,\n            toolCalls: lastStep.toolCalls,\n            toolResults: lastStep.toolResults,\n            request: lastStep.request ?? {},\n            response: lastStep.response,\n            warnings: lastStep.warnings,\n            providerMetadata: lastStep.providerMetadata,\n            experimental_providerMetadata:\n              lastStep.experimental_providerMetadata,\n            steps: recordedSteps,\n          });\n\n          // Add response information to the root span:\n          rootSpan.setAttributes(\n            selectTelemetryAttributes({\n              telemetry,\n              attributes: {\n                'ai.response.finishReason': finishReason,\n                'ai.response.text': { output: () => recordedFullText },\n                'ai.response.toolCalls': {\n                  output: () =>\n                    lastStep.toolCalls?.length\n                      ? JSON.stringify(lastStep.toolCalls)\n                      : undefined,\n                },\n\n                'ai.usage.promptTokens': usage.promptTokens,\n                'ai.usage.completionTokens': usage.completionTokens,\n              },\n            }),\n          );\n        } catch (error) {\n          controller.error(error);\n        } finally {\n          rootSpan.end();\n        }\n      },\n    });\n\n    // initialize the stitchable stream and the transformed stream:\n    const stitchableStream = createStitchableStream<TextStreamPart<TOOLS>>();\n    this.addStream = stitchableStream.addStream;\n    this.closeStream = stitchableStream.close;\n\n    let stream = stitchableStream.stream;\n\n    // transform the stream before output parsing\n    // to enable replacement of stream segments:\n    for (const transform of transforms) {\n      stream = stream.pipeThrough(\n        transform({\n          tools: tools as TOOLS,\n          stopStream() {\n            stitchableStream.terminate();\n          },\n        }),\n      );\n    }\n\n    this.baseStream = stream\n      .pipeThrough(createOutputTransformStream(output))\n      .pipeThrough(eventProcessor);\n\n    const { maxRetries, retry } = prepareRetries({\n      maxRetries: maxRetriesArg,\n    });\n\n    const tracer = getTracer(telemetry);\n\n    const baseTelemetryAttributes = getBaseTelemetryAttributes({\n      model,\n      telemetry,\n      headers,\n      settings: { ...settings, maxRetries },\n    });\n\n    const initialPrompt = standardizePrompt({\n      prompt: {\n        system: output?.injectIntoSystemPrompt({ system, model }) ?? system,\n        prompt,\n        messages,\n      },\n      tools,\n    });\n\n    const self = this;\n\n    recordSpan({\n      name: 'ai.streamText',\n      attributes: selectTelemetryAttributes({\n        telemetry,\n        attributes: {\n          ...assembleOperationName({ operationId: 'ai.streamText', telemetry }),\n          ...baseTelemetryAttributes,\n          // specific settings that only make sense on the outer level:\n          'ai.prompt': {\n            input: () => JSON.stringify({ system, prompt, messages }),\n          },\n          'ai.settings.maxSteps': maxSteps,\n        },\n      }),\n      tracer,\n      endWhenDone: false,\n      fn: async rootSpanArg => {\n        rootSpan = rootSpanArg;\n\n        async function streamStep({\n          currentStep,\n          responseMessages,\n          usage,\n          stepType,\n          previousStepText,\n          hasLeadingWhitespace,\n          messageId,\n        }: {\n          currentStep: number;\n          responseMessages: Array<ResponseMessage>;\n          usage: LanguageModelUsage;\n          stepType: 'initial' | 'continue' | 'tool-result';\n          previousStepText: string;\n          hasLeadingWhitespace: boolean;\n          messageId: string;\n        }) {\n          // after the 1st step, we need to switch to messages format:\n          const promptFormat =\n            responseMessages.length === 0 ? initialPrompt.type : 'messages';\n\n          const stepInputMessages = [\n            ...initialPrompt.messages,\n            ...responseMessages,\n          ];\n\n          const promptMessages = await convertToLanguageModelPrompt({\n            prompt: {\n              type: promptFormat,\n              system: initialPrompt.system,\n              messages: stepInputMessages,\n            },\n            modelSupportsImageUrls: model.supportsImageUrls,\n            modelSupportsUrl: model.supportsUrl?.bind(model), // support 'this' context\n          });\n\n          const mode = {\n            type: 'regular' as const,\n            ...prepareToolsAndToolChoice({ tools, toolChoice, activeTools }),\n          };\n\n          const {\n            result: { stream, warnings, rawResponse, request },\n            doStreamSpan,\n            startTimestampMs,\n          } = await retry(() =>\n            recordSpan({\n              name: 'ai.streamText.doStream',\n              attributes: selectTelemetryAttributes({\n                telemetry,\n                attributes: {\n                  ...assembleOperationName({\n                    operationId: 'ai.streamText.doStream',\n                    telemetry,\n                  }),\n                  ...baseTelemetryAttributes,\n                  'ai.prompt.format': {\n                    input: () => promptFormat,\n                  },\n                  'ai.prompt.messages': {\n                    input: () => stringifyForTelemetry(promptMessages),\n                  },\n                  'ai.prompt.tools': {\n                    // convert the language model level tools:\n                    input: () => mode.tools?.map(tool => JSON.stringify(tool)),\n                  },\n                  'ai.prompt.toolChoice': {\n                    input: () =>\n                      mode.toolChoice != null\n                        ? JSON.stringify(mode.toolChoice)\n                        : undefined,\n                  },\n\n                  // standardized gen-ai llm span attributes:\n                  'gen_ai.system': model.provider,\n                  'gen_ai.request.model': model.modelId,\n                  'gen_ai.request.frequency_penalty': settings.frequencyPenalty,\n                  'gen_ai.request.max_tokens': settings.maxTokens,\n                  'gen_ai.request.presence_penalty': settings.presencePenalty,\n                  'gen_ai.request.stop_sequences': settings.stopSequences,\n                  'gen_ai.request.temperature': settings.temperature,\n                  'gen_ai.request.top_k': settings.topK,\n                  'gen_ai.request.top_p': settings.topP,\n                },\n              }),\n              tracer,\n              endWhenDone: false,\n              fn: async doStreamSpan => ({\n                startTimestampMs: now(), // get before the call\n                doStreamSpan,\n                result: await model.doStream({\n                  mode,\n                  ...prepareCallSettings(settings),\n                  inputFormat: promptFormat,\n                  responseFormat: output?.responseFormat({ model }),\n                  prompt: promptMessages,\n                  providerMetadata: providerOptions,\n                  abortSignal,\n                  headers,\n                }),\n              }),\n            }),\n          );\n\n          const transformedStream = runToolsTransformation({\n            tools,\n            generatorStream: stream,\n            toolCallStreaming,\n            tracer,\n            telemetry,\n            system,\n            messages: stepInputMessages,\n            repairToolCall,\n            abortSignal,\n          });\n\n          const stepRequest = request ?? {};\n          const stepToolCalls: ToolCallUnion<TOOLS>[] = [];\n          const stepToolResults: ToolResultUnion<TOOLS>[] = [];\n\n          const stepReasoning: Array<ReasoningDetail> = [];\n          const stepFiles: Array<GeneratedFile> = [];\n          let activeReasoningText:\n            | undefined\n            | (ReasoningDetail & { type: 'text' }) = undefined;\n\n          let stepFinishReason: FinishReason = 'unknown';\n          let stepUsage: LanguageModelUsage = {\n            promptTokens: 0,\n            completionTokens: 0,\n            totalTokens: 0,\n          };\n          let stepProviderMetadata: ProviderMetadata | undefined;\n          let stepFirstChunk = true;\n          let stepText = '';\n          let fullStepText = stepType === 'continue' ? previousStepText : '';\n          let stepLogProbs: LogProbs | undefined;\n          let stepResponse: { id: string; timestamp: Date; modelId: string } = {\n            id: generateId(),\n            timestamp: currentDate(),\n            modelId: model.modelId,\n          };\n\n          // chunk buffer when using continue:\n          let chunkBuffer = '';\n          let chunkTextPublished = false;\n          let inWhitespacePrefix = true;\n          let hasWhitespaceSuffix = false; // for next step. when true, step ended with whitespace\n\n          async function publishTextChunk({\n            controller,\n            chunk,\n          }: {\n            controller: TransformStreamDefaultController<TextStreamPart<TOOLS>>;\n            chunk: TextStreamPart<TOOLS> & { type: 'text-delta' };\n          }) {\n            controller.enqueue(chunk);\n\n            stepText += chunk.textDelta;\n            fullStepText += chunk.textDelta;\n            chunkTextPublished = true;\n            hasWhitespaceSuffix = chunk.textDelta.trimEnd() !== chunk.textDelta;\n          }\n\n          self.addStream(\n            transformedStream.pipeThrough(\n              new TransformStream<\n                SingleRequestTextStreamPart<TOOLS>,\n                TextStreamPart<TOOLS>\n              >({\n                async transform(chunk, controller): Promise<void> {\n                  if (stepFirstChunk) {\n                    // Telemetry for first chunk:\n                    const msToFirstChunk = now() - startTimestampMs;\n\n                    stepFirstChunk = false;\n\n                    doStreamSpan.addEvent('ai.stream.firstChunk', {\n                      'ai.response.msToFirstChunk': msToFirstChunk,\n                    });\n\n                    doStreamSpan.setAttributes({\n                      'ai.response.msToFirstChunk': msToFirstChunk,\n                    });\n\n                    // Step start:\n                    controller.enqueue({\n                      type: 'step-start',\n                      messageId,\n                      request: stepRequest,\n                      warnings: warnings ?? [],\n                    });\n                  }\n\n                  // Filter out empty text deltas\n                  if (\n                    chunk.type === 'text-delta' &&\n                    chunk.textDelta.length === 0\n                  ) {\n                    return;\n                  }\n\n                  const chunkType = chunk.type;\n                  switch (chunkType) {\n                    case 'text-delta': {\n                      if (continueSteps) {\n                        // when a new step starts, leading whitespace is to be discarded\n                        // when there is already preceding whitespace in the chunk buffer\n                        const trimmedChunkText =\n                          inWhitespacePrefix && hasLeadingWhitespace\n                            ? chunk.textDelta.trimStart()\n                            : chunk.textDelta;\n\n                        if (trimmedChunkText.length === 0) {\n                          break;\n                        }\n\n                        inWhitespacePrefix = false;\n                        chunkBuffer += trimmedChunkText;\n\n                        const split = splitOnLastWhitespace(chunkBuffer);\n\n                        // publish the text until the last whitespace:\n                        if (split != null) {\n                          chunkBuffer = split.suffix;\n\n                          await publishTextChunk({\n                            controller,\n                            chunk: {\n                              type: 'text-delta',\n                              textDelta: split.prefix + split.whitespace,\n                            },\n                          });\n                        }\n                      } else {\n                        await publishTextChunk({ controller, chunk });\n                      }\n                      break;\n                    }\n\n                    case 'reasoning': {\n                      controller.enqueue(chunk);\n\n                      if (activeReasoningText == null) {\n                        activeReasoningText = {\n                          type: 'text',\n                          text: chunk.textDelta,\n                        };\n                        stepReasoning.push(activeReasoningText);\n                      } else {\n                        activeReasoningText.text += chunk.textDelta;\n                      }\n\n                      break;\n                    }\n\n                    case 'reasoning-signature': {\n                      controller.enqueue(chunk);\n\n                      if (activeReasoningText == null) {\n                        throw new InvalidStreamPartError({\n                          chunk,\n                          message: 'reasoning-signature without reasoning',\n                        });\n                      }\n\n                      activeReasoningText.signature = chunk.signature;\n                      activeReasoningText = undefined; // signature concludes reasoning part\n                      break;\n                    }\n\n                    case 'redacted-reasoning': {\n                      controller.enqueue(chunk);\n                      stepReasoning.push({\n                        type: 'redacted',\n                        data: chunk.data,\n                      });\n\n                      break;\n                    }\n\n                    case 'tool-call': {\n                      controller.enqueue(chunk);\n                      // store tool calls for onFinish callback and toolCalls promise:\n                      stepToolCalls.push(chunk);\n                      break;\n                    }\n\n                    case 'tool-result': {\n                      controller.enqueue(chunk);\n                      // store tool results for onFinish callback and toolResults promise:\n                      stepToolResults.push(chunk);\n                      break;\n                    }\n\n                    case 'response-metadata': {\n                      stepResponse = {\n                        id: chunk.id ?? stepResponse.id,\n                        timestamp: chunk.timestamp ?? stepResponse.timestamp,\n                        modelId: chunk.modelId ?? stepResponse.modelId,\n                      };\n                      break;\n                    }\n\n                    case 'finish': {\n                      // Note: tool executions might not be finished yet when the finish event is emitted.\n                      // store usage and finish reason for promises and onFinish callback:\n                      stepUsage = chunk.usage;\n                      stepFinishReason = chunk.finishReason;\n                      stepProviderMetadata =\n                        chunk.experimental_providerMetadata;\n                      stepLogProbs = chunk.logprobs;\n\n                      // Telemetry for finish event timing\n                      // (since tool executions can take longer and distort calculations)\n                      const msToFinish = now() - startTimestampMs;\n                      doStreamSpan.addEvent('ai.stream.finish');\n                      doStreamSpan.setAttributes({\n                        'ai.response.msToFinish': msToFinish,\n                        'ai.response.avgCompletionTokensPerSecond':\n                          (1000 * stepUsage.completionTokens) / msToFinish,\n                      });\n\n                      break;\n                    }\n\n                    case 'file': {\n                      stepFiles.push(chunk);\n                      controller.enqueue(chunk);\n                      break;\n                    }\n\n                    // forward:\n                    case 'source':\n                    case 'tool-call-streaming-start':\n                    case 'tool-call-delta': {\n                      controller.enqueue(chunk);\n                      break;\n                    }\n\n                    case 'error': {\n                      controller.enqueue(chunk);\n                      stepFinishReason = 'error';\n                      break;\n                    }\n\n                    default: {\n                      const exhaustiveCheck: never = chunkType;\n                      throw new Error(`Unknown chunk type: ${exhaustiveCheck}`);\n                    }\n                  }\n                },\n\n                // invoke onFinish callback and resolve toolResults promise when the stream is about to close:\n                async flush(controller) {\n                  const stepToolCallsJson =\n                    stepToolCalls.length > 0\n                      ? JSON.stringify(stepToolCalls)\n                      : undefined;\n\n                  // determine the next step type\n                  let nextStepType: 'done' | 'continue' | 'tool-result' =\n                    'done';\n                  if (currentStep + 1 < maxSteps) {\n                    if (\n                      continueSteps &&\n                      stepFinishReason === 'length' &&\n                      // only use continue when there are no tool calls:\n                      stepToolCalls.length === 0\n                    ) {\n                      nextStepType = 'continue';\n                    } else if (\n                      // there are tool calls:\n                      stepToolCalls.length > 0 &&\n                      // all current tool calls have results:\n                      stepToolResults.length === stepToolCalls.length\n                    ) {\n                      nextStepType = 'tool-result';\n                    }\n                  }\n\n                  // when using continuation, publish buffer on final step or if there\n                  // was no whitespace in the step:\n                  if (\n                    continueSteps &&\n                    chunkBuffer.length > 0 &&\n                    (nextStepType !== 'continue' || // when the next step is a regular step, publish the buffer\n                      (stepType === 'continue' && !chunkTextPublished)) // when the next step is a continue step, publish the buffer if no text was published in the step\n                  ) {\n                    await publishTextChunk({\n                      controller,\n                      chunk: {\n                        type: 'text-delta',\n                        textDelta: chunkBuffer,\n                      },\n                    });\n                    chunkBuffer = '';\n                  }\n\n                  // record telemetry information first to ensure best effort timing\n                  try {\n                    doStreamSpan.setAttributes(\n                      selectTelemetryAttributes({\n                        telemetry,\n                        attributes: {\n                          'ai.response.finishReason': stepFinishReason,\n                          'ai.response.text': { output: () => stepText },\n                          'ai.response.toolCalls': {\n                            output: () => stepToolCallsJson,\n                          },\n                          'ai.response.id': stepResponse.id,\n                          'ai.response.model': stepResponse.modelId,\n                          'ai.response.timestamp':\n                            stepResponse.timestamp.toISOString(),\n\n                          'ai.usage.promptTokens': stepUsage.promptTokens,\n                          'ai.usage.completionTokens':\n                            stepUsage.completionTokens,\n\n                          // standardized gen-ai llm span attributes:\n                          'gen_ai.response.finish_reasons': [stepFinishReason],\n                          'gen_ai.response.id': stepResponse.id,\n                          'gen_ai.response.model': stepResponse.modelId,\n                          'gen_ai.usage.input_tokens': stepUsage.promptTokens,\n                          'gen_ai.usage.output_tokens':\n                            stepUsage.completionTokens,\n                        },\n                      }),\n                    );\n                  } catch (error) {\n                    // ignore error setting telemetry attributes\n                  } finally {\n                    // finish doStreamSpan before other operations for correct timing:\n                    doStreamSpan.end();\n                  }\n\n                  controller.enqueue({\n                    type: 'step-finish',\n                    finishReason: stepFinishReason,\n                    usage: stepUsage,\n                    providerMetadata: stepProviderMetadata,\n                    experimental_providerMetadata: stepProviderMetadata,\n                    logprobs: stepLogProbs,\n                    request: stepRequest,\n                    response: {\n                      ...stepResponse,\n                      headers: rawResponse?.headers,\n                    },\n                    warnings,\n                    isContinued: nextStepType === 'continue',\n                    messageId,\n                  });\n\n                  const combinedUsage = addLanguageModelUsage(usage, stepUsage);\n\n                  if (nextStepType === 'done') {\n                    controller.enqueue({\n                      type: 'finish',\n                      finishReason: stepFinishReason,\n                      usage: combinedUsage,\n                      providerMetadata: stepProviderMetadata,\n                      experimental_providerMetadata: stepProviderMetadata,\n                      logprobs: stepLogProbs,\n                      response: {\n                        ...stepResponse,\n                        headers: rawResponse?.headers,\n                      },\n                    });\n\n                    self.closeStream(); // close the stitchable stream\n                  } else {\n                    // append to messages for the next step:\n                    if (stepType === 'continue') {\n                      // continue step: update the last assistant message\n                      // continue is only possible when there are no tool calls,\n                      // so we can assume that there is a single last assistant message:\n                      const lastMessage = responseMessages[\n                        responseMessages.length - 1\n                      ] as CoreAssistantMessage;\n\n                      if (typeof lastMessage.content === 'string') {\n                        lastMessage.content += stepText;\n                      } else {\n                        lastMessage.content.push({\n                          text: stepText,\n                          type: 'text',\n                        });\n                      }\n                    } else {\n                      responseMessages.push(\n                        ...toResponseMessages({\n                          text: stepText,\n                          files: stepFiles,\n                          reasoning: stepReasoning,\n                          tools: tools ?? ({} as TOOLS),\n                          toolCalls: stepToolCalls,\n                          toolResults: stepToolResults,\n                          messageId,\n                          generateMessageId,\n                        }),\n                      );\n                    }\n\n                    await streamStep({\n                      currentStep: currentStep + 1,\n                      responseMessages,\n                      usage: combinedUsage,\n                      stepType: nextStepType,\n                      previousStepText: fullStepText,\n                      hasLeadingWhitespace: hasWhitespaceSuffix,\n                      messageId:\n                        // keep the same id when continuing a step:\n                        nextStepType === 'continue'\n                          ? messageId\n                          : generateMessageId(),\n                    });\n                  }\n                },\n              }),\n            ),\n          );\n        }\n\n        // add the initial stream to the stitchable stream\n        await streamStep({\n          currentStep: 0,\n          responseMessages: [],\n          usage: {\n            promptTokens: 0,\n            completionTokens: 0,\n            totalTokens: 0,\n          },\n          previousStepText: '',\n          stepType: 'initial',\n          hasLeadingWhitespace: false,\n          messageId: generateMessageId(),\n        });\n      },\n    }).catch(error => {\n      // add an error stream part and close the streams:\n      self.addStream(\n        new ReadableStream({\n          start(controller) {\n            controller.enqueue({ type: 'error', error });\n            controller.close();\n          },\n        }),\n      );\n      self.closeStream();\n    });\n  }\n\n  get warnings() {\n    return this.warningsPromise.value;\n  }\n\n  get usage() {\n    return this.usagePromise.value;\n  }\n\n  get finishReason() {\n    return this.finishReasonPromise.value;\n  }\n\n  get experimental_providerMetadata() {\n    return this.providerMetadataPromise.value;\n  }\n\n  get providerMetadata() {\n    return this.providerMetadataPromise.value;\n  }\n\n  get text() {\n    return this.textPromise.value;\n  }\n\n  get reasoning() {\n    return this.reasoningPromise.value;\n  }\n\n  get reasoningDetails() {\n    return this.reasoningDetailsPromise.value;\n  }\n\n  get sources() {\n    return this.sourcesPromise.value;\n  }\n\n  get files() {\n    return this.filesPromise.value;\n  }\n\n  get toolCalls() {\n    return this.toolCallsPromise.value;\n  }\n\n  get toolResults() {\n    return this.toolResultsPromise.value;\n  }\n\n  get request() {\n    return this.requestPromise.value;\n  }\n\n  get response() {\n    return this.responsePromise.value;\n  }\n\n  get steps() {\n    return this.stepsPromise.value;\n  }\n\n  /**\nSplit out a new stream from the original stream.\nThe original stream is replaced to allow for further splitting,\nsince we do not know how many times the stream will be split.\n\nNote: this leads to buffering the stream content on the server.\nHowever, the LLM results are expected to be small enough to not cause issues.\n   */\n  private teeStream() {\n    const [stream1, stream2] = this.baseStream.tee();\n    this.baseStream = stream2;\n    return stream1;\n  }\n\n  get textStream(): AsyncIterableStream<string> {\n    return createAsyncIterableStream(\n      this.teeStream().pipeThrough(\n        new TransformStream<EnrichedStreamPart<TOOLS, PARTIAL_OUTPUT>, string>({\n          transform({ part }, controller) {\n            if (part.type === 'text-delta') {\n              controller.enqueue(part.textDelta);\n            }\n          },\n        }),\n      ),\n    );\n  }\n\n  get fullStream(): AsyncIterableStream<TextStreamPart<TOOLS>> {\n    return createAsyncIterableStream(\n      this.teeStream().pipeThrough(\n        new TransformStream<\n          EnrichedStreamPart<TOOLS, PARTIAL_OUTPUT>,\n          TextStreamPart<TOOLS>\n        >({\n          transform({ part }, controller) {\n            controller.enqueue(part);\n          },\n        }),\n      ),\n    );\n  }\n\n  async consumeStream(options?: ConsumeStreamOptions): Promise<void> {\n    try {\n      await consumeStream({\n        stream: this.fullStream,\n        onError: options?.onError,\n      });\n    } catch (error) {\n      options?.onError?.(error);\n    }\n  }\n\n  get experimental_partialOutputStream(): AsyncIterableStream<PARTIAL_OUTPUT> {\n    if (this.output == null) {\n      throw new NoOutputSpecifiedError();\n    }\n\n    return createAsyncIterableStream(\n      this.teeStream().pipeThrough(\n        new TransformStream<\n          EnrichedStreamPart<TOOLS, PARTIAL_OUTPUT>,\n          PARTIAL_OUTPUT\n        >({\n          transform({ partialOutput }, controller) {\n            if (partialOutput != null) {\n              controller.enqueue(partialOutput);\n            }\n          },\n        }),\n      ),\n    );\n  }\n\n  private toDataStreamInternal({\n    getErrorMessage = () => 'An error occurred.', // mask error messages for safety by default\n    sendUsage = true,\n    sendReasoning = false,\n    sendSources = false,\n    experimental_sendFinish = true,\n  }: {\n    getErrorMessage: ((error: unknown) => string) | undefined;\n    sendUsage: boolean | undefined;\n    sendReasoning: boolean | undefined;\n    sendSources: boolean | undefined;\n    experimental_sendFinish: boolean | undefined;\n  }): ReadableStream<DataStreamString> {\n    return this.fullStream.pipeThrough(\n      new TransformStream<TextStreamPart<TOOLS>, DataStreamString>({\n        transform: async (chunk, controller) => {\n          const chunkType = chunk.type;\n          switch (chunkType) {\n            case 'text-delta': {\n              controller.enqueue(formatDataStreamPart('text', chunk.textDelta));\n              break;\n            }\n\n            case 'reasoning': {\n              if (sendReasoning) {\n                controller.enqueue(\n                  formatDataStreamPart('reasoning', chunk.textDelta),\n                );\n              }\n              break;\n            }\n\n            case 'redacted-reasoning': {\n              if (sendReasoning) {\n                controller.enqueue(\n                  formatDataStreamPart('redacted_reasoning', {\n                    data: chunk.data,\n                  }),\n                );\n              }\n              break;\n            }\n\n            case 'reasoning-signature': {\n              if (sendReasoning) {\n                controller.enqueue(\n                  formatDataStreamPart('reasoning_signature', {\n                    signature: chunk.signature,\n                  }),\n                );\n              }\n              break;\n            }\n\n            case 'file': {\n              controller.enqueue(\n                formatDataStreamPart('file', {\n                  mimeType: chunk.mimeType,\n                  data: chunk.base64,\n                }),\n              );\n              break;\n            }\n\n            case 'source': {\n              if (sendSources) {\n                controller.enqueue(\n                  formatDataStreamPart('source', chunk.source),\n                );\n              }\n              break;\n            }\n\n            case 'tool-call-streaming-start': {\n              controller.enqueue(\n                formatDataStreamPart('tool_call_streaming_start', {\n                  toolCallId: chunk.toolCallId,\n                  toolName: chunk.toolName,\n                }),\n              );\n              break;\n            }\n\n            case 'tool-call-delta': {\n              controller.enqueue(\n                formatDataStreamPart('tool_call_delta', {\n                  toolCallId: chunk.toolCallId,\n                  argsTextDelta: chunk.argsTextDelta,\n                }),\n              );\n              break;\n            }\n\n            case 'tool-call': {\n              controller.enqueue(\n                formatDataStreamPart('tool_call', {\n                  toolCallId: chunk.toolCallId,\n                  toolName: chunk.toolName,\n                  args: chunk.args,\n                }),\n              );\n              break;\n            }\n\n            case 'tool-result': {\n              controller.enqueue(\n                formatDataStreamPart('tool_result', {\n                  toolCallId: chunk.toolCallId,\n                  result: chunk.result,\n                }),\n              );\n              break;\n            }\n\n            case 'error': {\n              controller.enqueue(\n                formatDataStreamPart('error', getErrorMessage(chunk.error)),\n              );\n              break;\n            }\n\n            case 'step-start': {\n              controller.enqueue(\n                formatDataStreamPart('start_step', {\n                  messageId: chunk.messageId,\n                }),\n              );\n              break;\n            }\n\n            case 'step-finish': {\n              controller.enqueue(\n                formatDataStreamPart('finish_step', {\n                  finishReason: chunk.finishReason,\n                  usage: sendUsage\n                    ? {\n                        promptTokens: chunk.usage.promptTokens,\n                        completionTokens: chunk.usage.completionTokens,\n                      }\n                    : undefined,\n                  isContinued: chunk.isContinued,\n                }),\n              );\n              break;\n            }\n\n            case 'finish': {\n              if (experimental_sendFinish) {\n                controller.enqueue(\n                  formatDataStreamPart('finish_message', {\n                    finishReason: chunk.finishReason,\n                    usage: sendUsage\n                      ? {\n                          promptTokens: chunk.usage.promptTokens,\n                          completionTokens: chunk.usage.completionTokens,\n                        }\n                      : undefined,\n                  }),\n                );\n              }\n              break;\n            }\n\n            default: {\n              const exhaustiveCheck: never = chunkType;\n              throw new Error(`Unknown chunk type: ${exhaustiveCheck}`);\n            }\n          }\n        },\n      }),\n    );\n  }\n\n  pipeDataStreamToResponse(\n    response: ServerResponse,\n    {\n      status,\n      statusText,\n      headers,\n      data,\n      getErrorMessage,\n      sendUsage,\n      sendReasoning,\n      sendSources,\n      experimental_sendFinish,\n    }: ResponseInit &\n      DataStreamOptions & {\n        data?: StreamData;\n        getErrorMessage?: (error: unknown) => string;\n      } = {},\n  ) {\n    writeToServerResponse({\n      response,\n      status,\n      statusText,\n      headers: prepareOutgoingHttpHeaders(headers, {\n        contentType: 'text/plain; charset=utf-8',\n        dataStreamVersion: 'v1',\n      }),\n      stream: this.toDataStream({\n        data,\n        getErrorMessage,\n        sendUsage,\n        sendReasoning,\n        sendSources,\n        experimental_sendFinish,\n      }),\n    });\n  }\n\n  pipeTextStreamToResponse(response: ServerResponse, init?: ResponseInit) {\n    writeToServerResponse({\n      response,\n      status: init?.status,\n      statusText: init?.statusText,\n      headers: prepareOutgoingHttpHeaders(init?.headers, {\n        contentType: 'text/plain; charset=utf-8',\n      }),\n      stream: this.textStream.pipeThrough(new TextEncoderStream()),\n    });\n  }\n\n  // TODO breaking change 5.0: remove pipeThrough(new TextEncoderStream())\n  toDataStream(\n    options?: DataStreamOptions & {\n      data?: StreamData;\n      getErrorMessage?: (error: unknown) => string;\n    },\n  ) {\n    const stream = this.toDataStreamInternal({\n      getErrorMessage: options?.getErrorMessage,\n      sendUsage: options?.sendUsage,\n      sendReasoning: options?.sendReasoning,\n      sendSources: options?.sendSources,\n      experimental_sendFinish: options?.experimental_sendFinish,\n    }).pipeThrough(new TextEncoderStream());\n\n    return options?.data ? mergeStreams(options?.data.stream, stream) : stream;\n  }\n\n  mergeIntoDataStream(writer: DataStreamWriter, options?: DataStreamOptions) {\n    writer.merge(\n      this.toDataStreamInternal({\n        getErrorMessage: writer.onError,\n        sendUsage: options?.sendUsage,\n        sendReasoning: options?.sendReasoning,\n        sendSources: options?.sendSources,\n        experimental_sendFinish: options?.experimental_sendFinish,\n      }),\n    );\n  }\n\n  toDataStreamResponse({\n    headers,\n    status,\n    statusText,\n    data,\n    getErrorMessage,\n    sendUsage,\n    sendReasoning,\n    sendSources,\n    experimental_sendFinish,\n  }: ResponseInit &\n    DataStreamOptions & {\n      data?: StreamData;\n      getErrorMessage?: (error: unknown) => string;\n    } = {}): Response {\n    return new Response(\n      this.toDataStream({\n        data,\n        getErrorMessage,\n        sendUsage,\n        sendReasoning,\n        sendSources,\n        experimental_sendFinish,\n      }),\n      {\n        status,\n        statusText,\n        headers: prepareResponseHeaders(headers, {\n          contentType: 'text/plain; charset=utf-8',\n          dataStreamVersion: 'v1',\n        }),\n      },\n    );\n  }\n\n  toTextStreamResponse(init?: ResponseInit): Response {\n    return new Response(this.textStream.pipeThrough(new TextEncoderStream()), {\n      status: init?.status ?? 200,\n      headers: prepareResponseHeaders(init?.headers, {\n        contentType: 'text/plain; charset=utf-8',\n      }),\n    });\n  }\n}\n","export function asArray<T>(value: T | T[] | undefined): T[] {\n  return value === undefined ? [] : Array.isArray(value) ? value : [value];\n}\n","/**\n * Consumes a ReadableStream until it's fully read.\n *\n * This function reads the stream chunk by chunk until the stream is exhausted.\n * It doesn't process or return the data from the stream; it simply ensures\n * that the entire stream is read.\n *\n * @param {ReadableStream} stream - The ReadableStream to be consumed.\n * @returns {Promise<void>} A promise that resolves when the stream is fully consumed.\n */\nexport async function consumeStream({\n  stream,\n  onError,\n}: {\n  stream: ReadableStream;\n  onError?: (error: unknown) => void;\n}): Promise<void> {\n  const reader = stream.getReader();\n  try {\n    while (true) {\n      const { done } = await reader.read();\n      if (done) break;\n    }\n  } catch (error) {\n    onError?.(error);\n  } finally {\n    reader.releaseLock();\n  }\n}\n","/**\n * Merges two readable streams into a single readable stream, emitting values\n * from each stream as they become available.\n *\n * The first stream is prioritized over the second stream. If both streams have\n * values available, the first stream's value is emitted first.\n *\n * @template VALUE1 - The type of values emitted by the first stream.\n * @template VALUE2 - The type of values emitted by the second stream.\n * @param {ReadableStream<VALUE1>} stream1 - The first readable stream.\n * @param {ReadableStream<VALUE2>} stream2 - The second readable stream.\n * @returns {ReadableStream<VALUE1 | VALUE2>} A new readable stream that emits values from both input streams.\n */\nexport function mergeStreams<VALUE1, VALUE2>(\n  stream1: ReadableStream<VALUE1>,\n  stream2: ReadableStream<VALUE2>,\n): ReadableStream<VALUE1 | VALUE2> {\n  const reader1 = stream1.getReader();\n  const reader2 = stream2.getReader();\n\n  let lastRead1: Promise<ReadableStreamReadResult<VALUE1>> | undefined =\n    undefined;\n  let lastRead2: Promise<ReadableStreamReadResult<VALUE2>> | undefined =\n    undefined;\n\n  let stream1Done = false;\n  let stream2Done = false;\n\n  // only use when stream 2 is done:\n  async function readStream1(\n    controller: ReadableStreamDefaultController<VALUE1 | VALUE2>,\n  ) {\n    try {\n      if (lastRead1 == null) {\n        lastRead1 = reader1.read();\n      }\n\n      const result = await lastRead1;\n      lastRead1 = undefined;\n\n      if (!result.done) {\n        controller.enqueue(result.value);\n      } else {\n        controller.close();\n      }\n    } catch (error) {\n      controller.error(error);\n    }\n  }\n\n  // only use when stream 1 is done:\n  async function readStream2(\n    controller: ReadableStreamDefaultController<VALUE1 | VALUE2>,\n  ) {\n    try {\n      if (lastRead2 == null) {\n        lastRead2 = reader2.read();\n      }\n\n      const result = await lastRead2;\n      lastRead2 = undefined;\n\n      if (!result.done) {\n        controller.enqueue(result.value);\n      } else {\n        controller.close();\n      }\n    } catch (error) {\n      controller.error(error);\n    }\n  }\n\n  return new ReadableStream<VALUE1 | VALUE2>({\n    async pull(controller) {\n      try {\n        // stream 1 is done, we can only read from stream 2:\n        if (stream1Done) {\n          await readStream2(controller);\n          return;\n        }\n\n        // stream 2 is done, we can only read from stream 1:\n        if (stream2Done) {\n          await readStream1(controller);\n          return;\n        }\n\n        // pull the next value from the stream that was read last:\n        if (lastRead1 == null) {\n          lastRead1 = reader1.read();\n        }\n        if (lastRead2 == null) {\n          lastRead2 = reader2.read();\n        }\n\n        // Note on Promise.race (prioritizing stream 1 over stream 2):\n        // If the iterable contains one or more non-promise values and/or an already settled promise,\n        // then Promise.race() will settle to the first of these values found in the iterable.\n        const { result, reader } = await Promise.race([\n          lastRead1.then(result => ({ result, reader: reader1 })),\n          lastRead2.then(result => ({ result, reader: reader2 })),\n        ]);\n\n        if (!result.done) {\n          controller.enqueue(result.value);\n        }\n\n        if (reader === reader1) {\n          lastRead1 = undefined;\n          if (result.done) {\n            // stream 1 is done, we can only read from stream 2:\n            await readStream2(controller);\n            stream1Done = true;\n          }\n        } else {\n          lastRead2 = undefined;\n          // stream 2 is done, we can only read from stream 1:\n          if (result.done) {\n            stream2Done = true;\n            await readStream1(controller);\n          }\n        }\n      } catch (error) {\n        controller.error(error);\n      }\n    },\n    cancel() {\n      reader1.cancel();\n      reader2.cancel();\n    },\n  });\n}\n","import { LanguageModelV1StreamPart } from '@ai-sdk/provider';\nimport { generateId } from '@ai-sdk/ui-utils';\nimport { Tracer } from '@opentelemetry/api';\nimport { ToolExecutionError } from '../../errors';\nimport { CoreMessage } from '../prompt/message';\nimport { assembleOperationName } from '../telemetry/assemble-operation-name';\nimport { recordSpan } from '../telemetry/record-span';\nimport { selectTelemetryAttributes } from '../telemetry/select-telemetry-attributes';\nimport { TelemetrySettings } from '../telemetry/telemetry-settings';\nimport {\n  FinishReason,\n  LanguageModelUsage,\n  LogProbs,\n  ProviderMetadata,\n} from '../types';\nimport { Source } from '../types/language-model';\nimport { calculateLanguageModelUsage } from '../types/usage';\nimport { DefaultGeneratedFileWithType, GeneratedFile } from './generated-file';\nimport { parseToolCall } from './parse-tool-call';\nimport { ToolCallUnion } from './tool-call';\nimport { ToolCallRepairFunction } from './tool-call-repair';\nimport { ToolResultUnion } from './tool-result';\nimport { ToolSet } from './tool-set';\n\nexport type SingleRequestTextStreamPart<TOOLS extends ToolSet> =\n  | {\n      type: 'text-delta';\n      textDelta: string;\n    }\n  | {\n      type: 'reasoning';\n      textDelta: string;\n    }\n  | {\n      type: 'reasoning-signature';\n      signature: string;\n    }\n  | {\n      type: 'redacted-reasoning';\n      data: string;\n    }\n  | ({\n      type: 'file';\n    } & GeneratedFile)\n  | {\n      type: 'source';\n      source: Source;\n    }\n  | ({\n      type: 'tool-call';\n    } & ToolCallUnion<TOOLS>)\n  | {\n      type: 'tool-call-streaming-start';\n      toolCallId: string;\n      toolName: string;\n    }\n  | {\n      type: 'tool-call-delta';\n      toolCallId: string;\n      toolName: string;\n      argsTextDelta: string;\n    }\n  | ({\n      type: 'tool-result';\n    } & ToolResultUnion<TOOLS>)\n  | {\n      type: 'response-metadata';\n      id?: string;\n      timestamp?: Date;\n      modelId?: string;\n    }\n  | {\n      type: 'finish';\n      finishReason: FinishReason;\n      logprobs?: LogProbs;\n      usage: LanguageModelUsage;\n      experimental_providerMetadata?: ProviderMetadata;\n    }\n  | {\n      type: 'error';\n      error: unknown;\n    };\n\nexport function runToolsTransformation<TOOLS extends ToolSet>({\n  tools,\n  generatorStream,\n  toolCallStreaming,\n  tracer,\n  telemetry,\n  system,\n  messages,\n  abortSignal,\n  repairToolCall,\n}: {\n  tools: TOOLS | undefined;\n  generatorStream: ReadableStream<LanguageModelV1StreamPart>;\n  toolCallStreaming: boolean;\n  tracer: Tracer;\n  telemetry: TelemetrySettings | undefined;\n  system: string | undefined;\n  messages: CoreMessage[];\n  abortSignal: AbortSignal | undefined;\n  repairToolCall: ToolCallRepairFunction<TOOLS> | undefined;\n}): ReadableStream<SingleRequestTextStreamPart<TOOLS>> {\n  // tool results stream\n  let toolResultsStreamController: ReadableStreamDefaultController<\n    SingleRequestTextStreamPart<TOOLS>\n  > | null = null;\n  const toolResultsStream = new ReadableStream<\n    SingleRequestTextStreamPart<TOOLS>\n  >({\n    start(controller) {\n      toolResultsStreamController = controller;\n    },\n  });\n\n  // keep track of active tool calls for tool call streaming:\n  const activeToolCalls: Record<string, boolean> = {};\n\n  // keep track of outstanding tool results for stream closing:\n  const outstandingToolResults = new Set<string>();\n\n  let canClose = false;\n  let finishChunk:\n    | (SingleRequestTextStreamPart<TOOLS> & { type: 'finish' })\n    | undefined = undefined;\n\n  function attemptClose() {\n    // close the tool results controller if no more outstanding tool calls\n    if (canClose && outstandingToolResults.size === 0) {\n      // we delay sending the finish chunk until all tool results (incl. delayed ones)\n      // are received to ensure that the frontend receives tool results before a message\n      // finish event arrives.\n      if (finishChunk != null) {\n        toolResultsStreamController!.enqueue(finishChunk);\n      }\n\n      toolResultsStreamController!.close();\n    }\n  }\n\n  // forward stream\n  const forwardStream = new TransformStream<\n    LanguageModelV1StreamPart,\n    SingleRequestTextStreamPart<TOOLS>\n  >({\n    async transform(\n      chunk: LanguageModelV1StreamPart,\n      controller: TransformStreamDefaultController<\n        SingleRequestTextStreamPart<TOOLS>\n      >,\n    ) {\n      const chunkType = chunk.type;\n\n      switch (chunkType) {\n        // forward:\n        case 'text-delta':\n        case 'reasoning':\n        case 'reasoning-signature':\n        case 'redacted-reasoning':\n        case 'source':\n        case 'response-metadata':\n        case 'error': {\n          controller.enqueue(chunk);\n          break;\n        }\n\n        case 'file': {\n          controller.enqueue(\n            new DefaultGeneratedFileWithType({\n              data: chunk.data,\n              mimeType: chunk.mimeType,\n            }),\n          );\n          break;\n        }\n\n        // forward with less information:\n        case 'tool-call-delta': {\n          if (toolCallStreaming) {\n            if (!activeToolCalls[chunk.toolCallId]) {\n              controller.enqueue({\n                type: 'tool-call-streaming-start',\n                toolCallId: chunk.toolCallId,\n                toolName: chunk.toolName,\n              });\n\n              activeToolCalls[chunk.toolCallId] = true;\n            }\n\n            controller.enqueue({\n              type: 'tool-call-delta',\n              toolCallId: chunk.toolCallId,\n              toolName: chunk.toolName,\n              argsTextDelta: chunk.argsTextDelta,\n            });\n          }\n          break;\n        }\n\n        // process tool call:\n        case 'tool-call': {\n          try {\n            const toolCall = await parseToolCall({\n              toolCall: chunk,\n              tools,\n              repairToolCall,\n              system,\n              messages,\n            });\n\n            controller.enqueue(toolCall);\n\n            const tool = tools![toolCall.toolName];\n\n            if (tool.execute != null) {\n              const toolExecutionId = generateId(); // use our own id to guarantee uniqueness\n              outstandingToolResults.add(toolExecutionId);\n\n              // Note: we don't await the tool execution here (by leaving out 'await' on recordSpan),\n              // because we want to process the next chunk as soon as possible.\n              // This is important for the case where the tool execution takes a long time.\n              recordSpan({\n                name: 'ai.toolCall',\n                attributes: selectTelemetryAttributes({\n                  telemetry,\n                  attributes: {\n                    ...assembleOperationName({\n                      operationId: 'ai.toolCall',\n                      telemetry,\n                    }),\n                    'ai.toolCall.name': toolCall.toolName,\n                    'ai.toolCall.id': toolCall.toolCallId,\n                    'ai.toolCall.args': {\n                      output: () => JSON.stringify(toolCall.args),\n                    },\n                  },\n                }),\n                tracer,\n                fn: async span =>\n                  tool.execute!(toolCall.args, {\n                    toolCallId: toolCall.toolCallId,\n                    messages,\n                    abortSignal,\n                  }).then(\n                    (result: any) => {\n                      toolResultsStreamController!.enqueue({\n                        ...toolCall,\n                        type: 'tool-result',\n                        result,\n                      } as any);\n\n                      outstandingToolResults.delete(toolExecutionId);\n\n                      attemptClose();\n\n                      // record telemetry\n                      try {\n                        span.setAttributes(\n                          selectTelemetryAttributes({\n                            telemetry,\n                            attributes: {\n                              'ai.toolCall.result': {\n                                output: () => JSON.stringify(result),\n                              },\n                            },\n                          }),\n                        );\n                      } catch (ignored) {\n                        // JSON stringify might fail if the result is not serializable,\n                        // in which case we just ignore it. In the future we might want to\n                        // add an optional serialize method to the tool interface and warn\n                        // if the result is not serializable.\n                      }\n                    },\n                    (error: any) => {\n                      toolResultsStreamController!.enqueue({\n                        type: 'error',\n                        error: new ToolExecutionError({\n                          toolCallId: toolCall.toolCallId,\n                          toolName: toolCall.toolName,\n                          toolArgs: toolCall.args,\n                          cause: error,\n                        }),\n                      });\n\n                      outstandingToolResults.delete(toolExecutionId);\n                      attemptClose();\n                    },\n                  ),\n              });\n            }\n          } catch (error) {\n            toolResultsStreamController!.enqueue({\n              type: 'error',\n              error,\n            });\n          }\n\n          break;\n        }\n\n        case 'finish': {\n          finishChunk = {\n            type: 'finish',\n            finishReason: chunk.finishReason,\n            logprobs: chunk.logprobs,\n            usage: calculateLanguageModelUsage(chunk.usage),\n            experimental_providerMetadata: chunk.providerMetadata,\n          };\n          break;\n        }\n\n        default: {\n          const _exhaustiveCheck: never = chunkType;\n          throw new Error(`Unhandled chunk type: ${_exhaustiveCheck}`);\n        }\n      }\n    },\n\n    flush() {\n      canClose = true;\n      attemptClose();\n    },\n  });\n\n  // combine the generator stream and the tool results stream\n  return new ReadableStream<SingleRequestTextStreamPart<TOOLS>>({\n    async start(controller) {\n      // need to wait for both pipes so there are no dangling promises that\n      // can cause uncaught promise rejections when the stream is aborted\n      return Promise.all([\n        generatorStream.pipeThrough(forwardStream).pipeTo(\n          new WritableStream({\n            write(chunk) {\n              controller.enqueue(chunk);\n            },\n            close() {\n              // the generator stream controller is automatically closed when it's consumed\n            },\n          }),\n        ),\n        toolResultsStream.pipeTo(\n          new WritableStream({\n            write(chunk) {\n              controller.enqueue(chunk);\n            },\n            close() {\n              controller.close();\n            },\n          }),\n        ),\n      ]);\n    },\n  });\n}\n","import { AISDKError } from '@ai-sdk/provider';\nimport { SpeechModelResponseMetadata } from '../core/types/speech-model-response-metadata';\n\n/**\nError that is thrown when no speech audio was generated.\n */\nexport class NoSpeechGeneratedError extends AISDKError {\n  readonly responses: Array<SpeechModelResponseMetadata>;\n\n  constructor(options: { responses: Array<SpeechModelResponseMetadata> }) {\n    super({\n      name: 'AI_NoSpeechGeneratedError',\n      message: 'No speech audio generated.',\n    });\n\n    this.responses = options.responses;\n  }\n}\n","import {\n  GeneratedFile,\n  DefaultGeneratedFile,\n} from '../generate-text/generated-file';\n\n/**\n * A generated audio file.\n */\nexport interface GeneratedAudioFile extends GeneratedFile {\n  /**\n   * Audio format of the file (e.g., 'mp3', 'wav', etc.)\n   */\n  readonly format: string;\n}\n\nexport class DefaultGeneratedAudioFile\n  extends DefaultGeneratedFile\n  implements GeneratedAudioFile\n{\n  readonly format: string;\n\n  constructor({\n    data,\n    mimeType,\n  }: {\n    data: string | Uint8Array;\n    mimeType: string;\n  }) {\n    super({ data, mimeType });\n    let format = 'mp3';\n\n    // If format is not provided, try to determine it from the mimeType\n    if (mimeType) {\n      const mimeTypeParts = mimeType.split('/');\n\n      if (mimeTypeParts.length === 2) {\n        // Handle special cases for audio formats\n        if (mimeType !== 'audio/mpeg') {\n          format = mimeTypeParts[1];\n        }\n      }\n    }\n\n    if (!format) {\n      throw new Error(\n        'Audio format must be provided or determinable from mimeType',\n      );\n    }\n\n    this.format = format;\n  }\n}\n\nexport class DefaultGeneratedAudioFileWithType extends DefaultGeneratedAudioFile {\n  readonly type = 'audio';\n\n  constructor(options: {\n    data: string | Uint8Array;\n    mimeType: string;\n    format: string;\n  }) {\n    super(options);\n  }\n}\n","import { JSONValue, SpeechModelV1 } from '@ai-sdk/provider';\nimport { NoSpeechGeneratedError } from '../../errors/no-speech-generated-error';\nimport { prepareRetries } from '../prompt/prepare-retries';\nimport { ProviderOptions } from '../types/provider-metadata';\nimport { SpeechWarning } from '../types/speech-model';\nimport { SpeechModelResponseMetadata } from '../types/speech-model-response-metadata';\nimport { SpeechResult } from './generate-speech-result';\nimport {\n  audioMimeTypeSignatures,\n  detectMimeType,\n} from '../util/detect-mimetype';\nimport {\n  DefaultGeneratedAudioFile,\n  GeneratedAudioFile,\n} from './generated-audio-file';\n\n/**\nGenerates speech audio using a speech model.\n\n@param model - The speech model to use.\n@param text - The text to convert to speech.\n@param voice - The voice to use for speech generation.\n@param outputFormat - The output format to use for speech generation e.g. \"mp3\", \"wav\", etc.\n@param instructions - Instructions for the speech generation e.g. \"Speak in a slow and steady tone\".\n@param speed - The speed of the speech generation.\n@param providerOptions - Additional provider-specific options that are passed through to the provider\nas body parameters.\n@param maxRetries - Maximum number of retries. Set to 0 to disable retries. Default: 2.\n@param abortSignal - An optional abort signal that can be used to cancel the call.\n@param headers - Additional HTTP headers to be sent with the request. Only applicable for HTTP-based providers.\n\n@returns A result object that contains the generated audio data.\n */\nexport async function generateSpeech({\n  model,\n  text,\n  voice,\n  outputFormat,\n  instructions,\n  speed,\n  providerOptions = {},\n  maxRetries: maxRetriesArg,\n  abortSignal,\n  headers,\n}: {\n  /**\nThe speech model to use.\n     */\n  model: SpeechModelV1;\n\n  /**\nThe text to convert to speech.\n   */\n  text: string;\n\n  /**\nThe voice to use for speech generation.\n   */\n  voice?: string;\n\n  /**\n   * The desired output format for the audio e.g. \"mp3\", \"wav\", etc.\n   */\n  outputFormat?: 'mp3' | 'wav' | (string & {});\n\n  /**\n    Instructions for the speech generation e.g. \"Speak in a slow and steady tone\".\n  */\n  instructions?: string;\n\n  /**\n  The speed of the speech generation.\n   */\n  speed?: number;\n\n  /**\nAdditional provider-specific options that are passed through to the provider\nas body parameters.\n\nThe outer record is keyed by the provider name, and the inner\nrecord is keyed by the provider-specific metadata key.\n```ts\n{\n  \"openai\": {}\n}\n```\n     */\n  providerOptions?: ProviderOptions;\n\n  /**\nMaximum number of retries per speech model call. Set to 0 to disable retries.\n\n@default 2\n   */\n  maxRetries?: number;\n\n  /**\nAbort signal.\n */\n  abortSignal?: AbortSignal;\n\n  /**\nAdditional headers to include in the request.\nOnly applicable for HTTP-based providers.\n */\n  headers?: Record<string, string>;\n}): Promise<SpeechResult> {\n  const { retry } = prepareRetries({ maxRetries: maxRetriesArg });\n\n  const result = await retry(() =>\n    model.doGenerate({\n      text,\n      voice,\n      outputFormat,\n      instructions,\n      speed,\n      abortSignal,\n      headers,\n      providerOptions,\n    }),\n  );\n\n  if (!result.audio || result.audio.length === 0) {\n    throw new NoSpeechGeneratedError({ responses: [result.response] });\n  }\n\n  return new DefaultSpeechResult({\n    audio: new DefaultGeneratedAudioFile({\n      data: result.audio,\n      mimeType:\n        detectMimeType({\n          data: result.audio,\n          signatures: audioMimeTypeSignatures,\n        }) ?? 'audio/mp3',\n    }),\n    warnings: result.warnings,\n    responses: [result.response],\n    providerMetadata: result.providerMetadata,\n  });\n}\n\nclass DefaultSpeechResult implements SpeechResult {\n  readonly audio: GeneratedAudioFile;\n  readonly warnings: Array<SpeechWarning>;\n  readonly responses: Array<SpeechModelResponseMetadata>;\n  readonly providerMetadata: Record<string, Record<string, JSONValue>>;\n\n  constructor(options: {\n    audio: GeneratedAudioFile;\n    warnings: Array<SpeechWarning>;\n    responses: Array<SpeechModelResponseMetadata>;\n    providerMetadata: Record<string, Record<string, JSONValue>> | undefined;\n  }) {\n    this.audio = options.audio;\n    this.warnings = options.warnings;\n    this.responses = options.responses;\n    this.providerMetadata = options.providerMetadata ?? {};\n  }\n}\n","import { AISDKError } from '@ai-sdk/provider';\nimport { TranscriptionModelResponseMetadata } from '../core/types/transcription-model-response-metadata';\n\n/**\nError that is thrown when no transcript was generated.\n */\nexport class NoTranscriptGeneratedError extends AISDKError {\n  readonly responses: Array<TranscriptionModelResponseMetadata>;\n\n  constructor(options: {\n    responses: Array<TranscriptionModelResponseMetadata>;\n  }) {\n    super({\n      name: 'AI_NoTranscriptGeneratedError',\n      message: 'No transcript generated.',\n    });\n\n    this.responses = options.responses;\n  }\n}\n","import { JSONValue, TranscriptionModelV1 } from '@ai-sdk/provider';\nimport { NoTranscriptGeneratedError } from '../../errors/no-transcript-generated-error';\nimport { download } from '../../util/download';\nimport { DataContent } from '../prompt';\nimport { convertDataContentToUint8Array } from '../prompt/data-content';\nimport { prepareRetries } from '../prompt/prepare-retries';\nimport { ProviderOptions } from '../types/provider-metadata';\nimport { TranscriptionWarning } from '../types/transcription-model';\nimport { TranscriptionModelResponseMetadata } from '../types/transcription-model-response-metadata';\nimport {\n  audioMimeTypeSignatures,\n  detectMimeType,\n} from '../util/detect-mimetype';\nimport { TranscriptionResult } from './transcribe-result';\n\n/**\nGenerates transcripts using a transcription model.\n\n@param model - The transcription model to use.\n@param audio - The audio data to transcribe as DataContent (string | Uint8Array | ArrayBuffer | Buffer) or a URL.\n@param providerOptions - Additional provider-specific options that are passed through to the provider\nas body parameters.\n@param maxRetries - Maximum number of retries. Set to 0 to disable retries. Default: 2.\n@param abortSignal - An optional abort signal that can be used to cancel the call.\n@param headers - Additional HTTP headers to be sent with the request. Only applicable for HTTP-based providers.\n\n@returns A result object that contains the generated transcript.\n */\nexport async function transcribe({\n  model,\n  audio,\n  providerOptions = {},\n  maxRetries: maxRetriesArg,\n  abortSignal,\n  headers,\n}: {\n  /**\nThe transcription model to use.\n     */\n  model: TranscriptionModelV1;\n\n  /**\nThe audio data to transcribe.\n   */\n  audio: DataContent | URL;\n\n  /**\nAdditional provider-specific options that are passed through to the provider\nas body parameters.\n\nThe outer record is keyed by the provider name, and the inner\nrecord is keyed by the provider-specific metadata key.\n```ts\n{\n  \"openai\": {\n    \"temperature\": 0\n  }\n}\n```\n     */\n  providerOptions?: ProviderOptions;\n\n  /**\nMaximum number of retries per transcript model call. Set to 0 to disable retries.\n\n@default 2\n   */\n  maxRetries?: number;\n\n  /**\nAbort signal.\n */\n  abortSignal?: AbortSignal;\n\n  /**\nAdditional headers to include in the request.\nOnly applicable for HTTP-based providers.\n */\n  headers?: Record<string, string>;\n}): Promise<TranscriptionResult> {\n  const { retry } = prepareRetries({ maxRetries: maxRetriesArg });\n  const audioData =\n    audio instanceof URL\n      ? (await download({ url: audio })).data\n      : convertDataContentToUint8Array(audio);\n\n  const result = await retry(() =>\n    model.doGenerate({\n      audio: audioData,\n      abortSignal,\n      headers,\n      providerOptions,\n      mediaType:\n        detectMimeType({\n          data: audioData,\n          signatures: audioMimeTypeSignatures,\n        }) ?? 'audio/wav',\n    }),\n  );\n\n  if (!result.text) {\n    throw new NoTranscriptGeneratedError({ responses: [result.response] });\n  }\n\n  return new DefaultTranscriptionResult({\n    text: result.text,\n    segments: result.segments,\n    language: result.language,\n    durationInSeconds: result.durationInSeconds,\n    warnings: result.warnings,\n    responses: [result.response],\n    providerMetadata: result.providerMetadata,\n  });\n}\n\nclass DefaultTranscriptionResult implements TranscriptionResult {\n  readonly text: string;\n  readonly segments: Array<{\n    text: string;\n    startSecond: number;\n    endSecond: number;\n  }>;\n  readonly language: string | undefined;\n  readonly durationInSeconds: number | undefined;\n  readonly warnings: Array<TranscriptionWarning>;\n  readonly responses: Array<TranscriptionModelResponseMetadata>;\n  readonly providerMetadata: Record<string, Record<string, JSONValue>>;\n\n  constructor(options: {\n    text: string;\n    segments: Array<{\n      text: string;\n      startSecond: number;\n      endSecond: number;\n    }>;\n    language: string | undefined;\n    durationInSeconds: number | undefined;\n    warnings: Array<TranscriptionWarning>;\n    responses: Array<TranscriptionModelResponseMetadata>;\n    providerMetadata: Record<string, Record<string, JSONValue>> | undefined;\n  }) {\n    this.text = options.text;\n    this.segments = options.segments;\n    this.language = options.language;\n    this.durationInSeconds = options.durationInSeconds;\n    this.warnings = options.warnings;\n    this.responses = options.responses;\n    this.providerMetadata = options.providerMetadata ?? {};\n  }\n}\n","/**\n * Deeply merges two objects together.\n * - Properties from the second object override those in the first object with the same key\n * - For nested objects, the merge is performed recursively (deep merge)\n * - Arrays are replaced, not merged\n * - Primitive values are replaced\n * - If both inputs are undefined, returns undefined\n * - If one input is undefined, returns the other\n *\n * @param target The target object to merge into\n * @param source The source object to merge from\n * @returns A new object with the merged properties, or undefined if both inputs are undefined\n */\nexport function mergeObjects<T extends object, U extends object>(\n  target: T | undefined,\n  source: U | undefined,\n): (T & U) | T | U | undefined {\n  // If both inputs are undefined, return undefined\n  if (target === undefined && source === undefined) {\n    return undefined;\n  }\n\n  // If target is undefined, return source\n  if (target === undefined) {\n    return source;\n  }\n\n  // If source is undefined, return target\n  if (source === undefined) {\n    return target;\n  }\n\n  // Create a new object to avoid mutating the inputs\n  const result = { ...target } as T & U;\n\n  // Iterate through all keys in the source object\n  for (const key in source) {\n    if (Object.prototype.hasOwnProperty.call(source, key)) {\n      const sourceValue = source[key];\n\n      // Skip if the source value is undefined\n      if (sourceValue === undefined) continue;\n\n      // Get the target value if it exists\n      const targetValue =\n        key in target ? target[key as unknown as keyof T] : undefined;\n\n      // Check if both values are objects that can be deeply merged\n      const isSourceObject =\n        sourceValue !== null &&\n        typeof sourceValue === 'object' &&\n        !Array.isArray(sourceValue) &&\n        !(sourceValue instanceof Date) &&\n        !(sourceValue instanceof RegExp);\n\n      const isTargetObject =\n        targetValue !== null &&\n        targetValue !== undefined &&\n        typeof targetValue === 'object' &&\n        !Array.isArray(targetValue) &&\n        !(targetValue instanceof Date) &&\n        !(targetValue instanceof RegExp);\n\n      // If both values are mergeable objects, merge them recursively\n      if (isSourceObject && isTargetObject) {\n        result[key as keyof (T & U)] = mergeObjects(\n          targetValue as object,\n          sourceValue as object,\n        ) as any;\n      } else {\n        // For primitives, arrays, or when one value is not a mergeable object,\n        // simply override with the source value\n        result[key as keyof (T & U)] = sourceValue as any;\n      }\n    }\n  }\n\n  return result;\n}\n","import {\n  LanguageModelV1CallOptions,\n  LanguageModelV1ProviderMetadata,\n} from '@ai-sdk/provider';\nimport type { LanguageModelV1Middleware } from './language-model-v1-middleware';\nimport { mergeObjects } from '../util/merge-objects';\n\n/**\n * Applies default settings for a language model.\n */\nexport function defaultSettingsMiddleware({\n  settings,\n}: {\n  settings: Partial<\n    LanguageModelV1CallOptions & {\n      providerMetadata?: LanguageModelV1ProviderMetadata;\n    }\n  >;\n}): LanguageModelV1Middleware {\n  return {\n    middlewareVersion: 'v1',\n    transformParams: async ({ params }) => {\n      return {\n        ...settings,\n        ...params,\n        providerMetadata: mergeObjects(\n          settings.providerMetadata,\n          params.providerMetadata,\n        ),\n\n        // special case for temperature 0\n        // TODO remove when temperature defaults to undefined\n        temperature:\n          params.temperature === 0 || params.temperature == null\n            ? (settings.temperature ?? 0)\n            : params.temperature,\n      };\n    },\n  };\n}\n","/**\n * Returns the index of the start of the searchedText in the text, or null if it\n * is not found.\n */\nexport function getPotentialStartIndex(\n  text: string,\n  searchedText: string,\n): number | null {\n  // Return null immediately if searchedText is empty.\n  if (searchedText.length === 0) {\n    return null;\n  }\n\n  // Check if the searchedText exists as a direct substring of text.\n  const directIndex = text.indexOf(searchedText);\n  if (directIndex !== -1) {\n    return directIndex;\n  }\n\n  // Otherwise, look for the largest suffix of \"text\" that matches\n  // a prefix of \"searchedText\". We go from the end of text inward.\n  for (let i = text.length - 1; i >= 0; i--) {\n    const suffix = text.substring(i);\n    if (searchedText.startsWith(suffix)) {\n      return i;\n    }\n  }\n\n  return null;\n}\n","import type { LanguageModelV1StreamPart } from '@ai-sdk/provider';\nimport { getPotentialStartIndex } from '../util/get-potential-start-index';\nimport type { LanguageModelV1Middleware } from './language-model-v1-middleware';\n\n/**\n * Extract an XML-tagged reasoning section from the generated text and exposes it\n * as a `reasoning` property on the result.\n *\n * @param tagName - The name of the XML tag to extract reasoning from.\n * @param separator - The separator to use between reasoning and text sections.\n * @param startWithReasoning - Whether to start with reasoning tokens.\n */\nexport function extractReasoningMiddleware({\n  tagName,\n  separator = '\\n',\n  startWithReasoning = false,\n}: {\n  tagName: string;\n  separator?: string;\n  startWithReasoning?: boolean;\n}): LanguageModelV1Middleware {\n  const openingTag = `<${tagName}>`;\n  const closingTag = `<\\/${tagName}>`;\n\n  return {\n    middlewareVersion: 'v1',\n    wrapGenerate: async ({ doGenerate }) => {\n      const { text: rawText, ...rest } = await doGenerate();\n\n      if (rawText == null) {\n        return { text: rawText, ...rest };\n      }\n\n      const text = startWithReasoning ? openingTag + rawText : rawText;\n\n      const regexp = new RegExp(`${openingTag}(.*?)${closingTag}`, 'gs');\n      const matches = Array.from(text.matchAll(regexp));\n\n      if (!matches.length) {\n        return { text, ...rest };\n      }\n\n      const reasoning = matches.map(match => match[1]).join(separator);\n\n      let textWithoutReasoning = text;\n      for (let i = matches.length - 1; i >= 0; i--) {\n        const match = matches[i];\n\n        const beforeMatch = textWithoutReasoning.slice(0, match.index);\n        const afterMatch = textWithoutReasoning.slice(\n          match.index! + match[0].length,\n        );\n\n        textWithoutReasoning =\n          beforeMatch +\n          (beforeMatch.length > 0 && afterMatch.length > 0 ? separator : '') +\n          afterMatch;\n      }\n\n      return { ...rest, text: textWithoutReasoning, reasoning };\n    },\n\n    wrapStream: async ({ doStream }) => {\n      const { stream, ...rest } = await doStream();\n\n      let isFirstReasoning = true;\n      let isFirstText = true;\n      let afterSwitch = false;\n      let isReasoning = startWithReasoning;\n      let buffer = '';\n\n      return {\n        stream: stream.pipeThrough(\n          new TransformStream<\n            LanguageModelV1StreamPart,\n            LanguageModelV1StreamPart\n          >({\n            transform: (chunk, controller) => {\n              if (chunk.type !== 'text-delta') {\n                controller.enqueue(chunk);\n                return;\n              }\n\n              buffer += chunk.textDelta;\n\n              function publish(text: string) {\n                if (text.length > 0) {\n                  const prefix =\n                    afterSwitch &&\n                    (isReasoning ? !isFirstReasoning : !isFirstText)\n                      ? separator\n                      : '';\n\n                  controller.enqueue({\n                    type: isReasoning ? 'reasoning' : 'text-delta',\n                    textDelta: prefix + text,\n                  });\n                  afterSwitch = false;\n\n                  if (isReasoning) {\n                    isFirstReasoning = false;\n                  } else {\n                    isFirstText = false;\n                  }\n                }\n              }\n\n              do {\n                const nextTag = isReasoning ? closingTag : openingTag;\n                const startIndex = getPotentialStartIndex(buffer, nextTag);\n\n                // no opening or closing tag found, publish the buffer\n                if (startIndex == null) {\n                  publish(buffer);\n                  buffer = '';\n                  break;\n                }\n\n                // publish text before the tag\n                publish(buffer.slice(0, startIndex));\n\n                const foundFullMatch =\n                  startIndex + nextTag.length <= buffer.length;\n\n                if (foundFullMatch) {\n                  buffer = buffer.slice(startIndex + nextTag.length);\n                  isReasoning = !isReasoning;\n                  afterSwitch = true;\n                } else {\n                  buffer = buffer.slice(startIndex);\n                  break;\n                }\n              } while (true);\n            },\n          }),\n        ),\n        ...rest,\n      };\n    },\n  };\n}\n","import type { LanguageModelV1StreamPart } from '@ai-sdk/provider';\nimport type { LanguageModelV1Middleware } from './language-model-v1-middleware';\n\n/**\n * Simulates streaming chunks with the response from a generate call.\n */\nexport function simulateStreamingMiddleware(): LanguageModelV1Middleware {\n  return {\n    middlewareVersion: 'v1',\n    wrapStream: async ({ doGenerate }) => {\n      const result = await doGenerate();\n\n      const simulatedStream = new ReadableStream<LanguageModelV1StreamPart>({\n        start(controller) {\n          controller.enqueue({ type: 'response-metadata', ...result.response });\n\n          if (result.reasoning) {\n            if (typeof result.reasoning === 'string') {\n              controller.enqueue({\n                type: 'reasoning',\n                textDelta: result.reasoning,\n              });\n            } else {\n              for (const reasoning of result.reasoning) {\n                switch (reasoning.type) {\n                  case 'text': {\n                    controller.enqueue({\n                      type: 'reasoning',\n                      textDelta: reasoning.text,\n                    });\n                    if (reasoning.signature != null) {\n                      controller.enqueue({\n                        type: 'reasoning-signature',\n                        signature: reasoning.signature,\n                      });\n                    }\n                    break;\n                  }\n                  case 'redacted': {\n                    controller.enqueue({\n                      type: 'redacted-reasoning',\n                      data: reasoning.data,\n                    });\n                    break;\n                  }\n                }\n              }\n            }\n          }\n\n          if (result.text) {\n            controller.enqueue({\n              type: 'text-delta',\n              textDelta: result.text,\n            });\n          }\n\n          if (result.toolCalls) {\n            for (const toolCall of result.toolCalls) {\n              controller.enqueue({\n                type: 'tool-call-delta',\n                toolCallType: 'function',\n                toolCallId: toolCall.toolCallId,\n                toolName: toolCall.toolName,\n                argsTextDelta: toolCall.args,\n              });\n\n              controller.enqueue({\n                type: 'tool-call',\n                ...toolCall,\n              });\n            }\n          }\n\n          controller.enqueue({\n            type: 'finish',\n            finishReason: result.finishReason,\n            usage: result.usage,\n            logprobs: result.logprobs,\n            providerMetadata: result.providerMetadata,\n          });\n\n          controller.close();\n        },\n      });\n\n      return {\n        stream: simulatedStream,\n        rawCall: result.rawCall,\n        rawResponse: result.rawResponse,\n        warnings: result.warnings,\n      };\n    },\n  };\n}\n","import { LanguageModelV1, LanguageModelV1CallOptions } from '@ai-sdk/provider';\nimport { LanguageModelV1Middleware } from './language-model-v1-middleware';\nimport { asArray } from '../../util/as-array';\n\n/**\n * Wraps a LanguageModelV1 instance with middleware functionality.\n * This function allows you to apply middleware to transform parameters,\n * wrap generate operations, and wrap stream operations of a language model.\n *\n * @param options - Configuration options for wrapping the language model.\n * @param options.model - The original LanguageModelV1 instance to be wrapped.\n * @param options.middleware - The middleware to be applied to the language model. When multiple middlewares are provided, the first middleware will transform the input first, and the last middleware will be wrapped directly around the model.\n * @param options.modelId - Optional custom model ID to override the original model's ID.\n * @param options.providerId - Optional custom provider ID to override the original model's provider.\n * @returns A new LanguageModelV1 instance with middleware applied.\n */\nexport const wrapLanguageModel = ({\n  model,\n  middleware: middlewareArg,\n  modelId,\n  providerId,\n}: {\n  model: LanguageModelV1;\n  middleware: LanguageModelV1Middleware | LanguageModelV1Middleware[];\n  modelId?: string;\n  providerId?: string;\n}): LanguageModelV1 => {\n  return asArray(middlewareArg)\n    .reverse()\n    .reduce((wrappedModel, middleware) => {\n      return doWrap({ model: wrappedModel, middleware, modelId, providerId });\n    }, model);\n};\n\nconst doWrap = ({\n  model,\n  middleware: { transformParams, wrapGenerate, wrapStream },\n  modelId,\n  providerId,\n}: {\n  model: LanguageModelV1;\n  middleware: LanguageModelV1Middleware;\n  modelId?: string;\n  providerId?: string;\n}): LanguageModelV1 => {\n  async function doTransform({\n    params,\n    type,\n  }: {\n    params: LanguageModelV1CallOptions;\n    type: 'generate' | 'stream';\n  }) {\n    return transformParams ? await transformParams({ params, type }) : params;\n  }\n\n  return {\n    specificationVersion: 'v1',\n\n    provider: providerId ?? model.provider,\n    modelId: modelId ?? model.modelId,\n\n    defaultObjectGenerationMode: model.defaultObjectGenerationMode,\n    supportsImageUrls: model.supportsImageUrls,\n    supportsUrl: model.supportsUrl?.bind(model),\n    supportsStructuredOutputs: model.supportsStructuredOutputs,\n\n    async doGenerate(\n      params: LanguageModelV1CallOptions,\n    ): Promise<Awaited<ReturnType<LanguageModelV1['doGenerate']>>> {\n      const transformedParams = await doTransform({ params, type: 'generate' });\n      const doGenerate = async () => model.doGenerate(transformedParams);\n      const doStream = async () => model.doStream(transformedParams);\n      return wrapGenerate\n        ? wrapGenerate({\n            doGenerate,\n            doStream,\n            params: transformedParams,\n            model,\n          })\n        : doGenerate();\n    },\n\n    async doStream(\n      params: LanguageModelV1CallOptions,\n    ): Promise<Awaited<ReturnType<LanguageModelV1['doStream']>>> {\n      const transformedParams = await doTransform({ params, type: 'stream' });\n      const doGenerate = async () => model.doGenerate(transformedParams);\n      const doStream = async () => model.doStream(transformedParams);\n      return wrapStream\n        ? wrapStream({ doGenerate, doStream, params: transformedParams, model })\n        : doStream();\n    },\n  };\n};\n\n/**\n * @deprecated Use `wrapLanguageModel` instead.\n */\n// TODO remove in v5\nexport const experimental_wrapLanguageModel = wrapLanguageModel;\n","import { Message } from '@ai-sdk/ui-utils';\n\n/**\n * Appends a client message to the messages array.\n * If the last message in the array has the same id as the new message, it will be replaced.\n * Otherwise, the new message will be appended.\n */\nexport function appendClientMessage({\n  messages,\n  message,\n}: {\n  messages: Message[];\n  message: Message;\n}) {\n  return [\n    ...(messages.length > 0 && messages[messages.length - 1].id === message.id\n      ? messages.slice(0, -1)\n      : messages),\n    message,\n  ];\n}\n","import {\n  extractMaxToolInvocationStep,\n  FileUIPart,\n  Message,\n  ReasoningUIPart,\n  StepStartUIPart,\n  TextUIPart,\n  ToolInvocation,\n  ToolInvocationUIPart,\n} from '@ai-sdk/ui-utils';\nimport { ResponseMessage } from '../generate-text/step-result';\nimport { convertDataContentToBase64String } from './data-content';\nimport { AISDKError } from '@ai-sdk/provider';\n\n/**\n * Appends the ResponseMessage[] from the response to a Message[] (for useChat).\n * The messages are converted to Messages before being appended.\n * Timestamps are generated for the new messages.\n *\n * @returns A new Message[] with the response messages appended.\n */\nexport function appendResponseMessages({\n  messages,\n  responseMessages,\n  _internal: { currentDate = () => new Date() } = {},\n}: {\n  messages: Message[];\n  responseMessages: ResponseMessage[];\n\n  /**\nInternal. For test use only. May change without notice.\n     */\n  _internal?: {\n    currentDate?: () => Date;\n  };\n}): Message[] {\n  const clonedMessages = structuredClone(messages);\n\n  for (const message of responseMessages) {\n    const role = message.role;\n\n    // check if the last message is an assistant message:\n    const lastMessage = clonedMessages[clonedMessages.length - 1];\n    const isLastMessageAssistant = lastMessage.role === 'assistant';\n\n    switch (role) {\n      case 'assistant': {\n        function getToolInvocations(step: number) {\n          return (\n            typeof message.content === 'string'\n              ? []\n              : message.content.filter(part => part.type === 'tool-call')\n          ).map(call => ({\n            state: 'call' as const,\n            step,\n            args: call.args,\n            toolCallId: call.toolCallId,\n            toolName: call.toolName,\n          }));\n        }\n\n        const parts: Array<\n          | TextUIPart\n          | ReasoningUIPart\n          | ToolInvocationUIPart\n          | FileUIPart\n          | StepStartUIPart\n        > = [{ type: 'step-start' as const }]; // always start with a step-start part\n        let textContent = '';\n        let reasoningTextContent = undefined;\n\n        if (typeof message.content === 'string') {\n          textContent = message.content;\n          parts.push({\n            type: 'text' as const,\n            text: message.content,\n          });\n        } else {\n          let reasoningPart: ReasoningUIPart | undefined = undefined;\n          for (const part of message.content) {\n            switch (part.type) {\n              case 'text': {\n                reasoningPart = undefined; // reset the reasoning part\n\n                textContent += part.text;\n                parts.push({\n                  type: 'text' as const,\n                  text: part.text,\n                });\n                break;\n              }\n              case 'reasoning': {\n                if (reasoningPart == null) {\n                  reasoningPart = {\n                    type: 'reasoning' as const,\n                    reasoning: '',\n                    details: [],\n                  };\n                  parts.push(reasoningPart);\n                }\n\n                reasoningTextContent = (reasoningTextContent ?? '') + part.text;\n                reasoningPart.reasoning += part.text;\n                reasoningPart.details.push({\n                  type: 'text' as const,\n                  text: part.text,\n                  signature: part.signature,\n                });\n                break;\n              }\n              case 'redacted-reasoning': {\n                if (reasoningPart == null) {\n                  reasoningPart = {\n                    type: 'reasoning' as const,\n                    reasoning: '',\n                    details: [],\n                  };\n                  parts.push(reasoningPart);\n                }\n\n                reasoningPart.details.push({\n                  type: 'redacted' as const,\n                  data: part.data,\n                });\n                break;\n              }\n              case 'tool-call':\n                break;\n              case 'file':\n                if (part.data instanceof URL) {\n                  throw new AISDKError({\n                    name: 'InvalidAssistantFileData',\n                    message: 'File data cannot be a URL',\n                  });\n                }\n                parts.push({\n                  type: 'file' as const,\n                  mimeType: part.mimeType,\n                  data: convertDataContentToBase64String(part.data),\n                });\n                break;\n            }\n          }\n        }\n\n        if (isLastMessageAssistant) {\n          const maxStep = extractMaxToolInvocationStep(\n            lastMessage.toolInvocations,\n          );\n\n          lastMessage.parts ??= [];\n\n          lastMessage.content = textContent;\n          lastMessage.reasoning = reasoningTextContent;\n          lastMessage.parts.push(...parts);\n\n          lastMessage.toolInvocations = [\n            ...(lastMessage.toolInvocations ?? []),\n            ...getToolInvocations(maxStep === undefined ? 0 : maxStep + 1),\n          ];\n\n          getToolInvocations(maxStep === undefined ? 0 : maxStep + 1)\n            .map(call => ({\n              type: 'tool-invocation' as const,\n              toolInvocation: call,\n            }))\n            .forEach(part => {\n              lastMessage.parts!.push(part);\n            });\n        } else {\n          // last message was a user message, add the assistant message:\n          clonedMessages.push({\n            role: 'assistant',\n            id: message.id,\n            createdAt: currentDate(), // generate a createdAt date for the message, will be overridden by the client\n            content: textContent,\n            reasoning: reasoningTextContent,\n            toolInvocations: getToolInvocations(0),\n            parts: [\n              ...parts,\n              ...getToolInvocations(0).map(call => ({\n                type: 'tool-invocation' as const,\n                toolInvocation: call,\n              })),\n            ],\n          });\n        }\n\n        break;\n      }\n\n      case 'tool': {\n        // for tool call results, add the result to previous message:\n        lastMessage.toolInvocations ??= []; // ensure the toolInvocations array exists\n\n        if (lastMessage.role !== 'assistant') {\n          throw new Error(\n            `Tool result must follow an assistant message: ${lastMessage.role}`,\n          );\n        }\n\n        lastMessage.parts ??= [];\n\n        for (const contentPart of message.content) {\n          // find the tool call in the previous message:\n          const toolCall = lastMessage.toolInvocations.find(\n            call => call.toolCallId === contentPart.toolCallId,\n          );\n          const toolCallPart: ToolInvocationUIPart | undefined =\n            lastMessage.parts.find(\n              (part): part is ToolInvocationUIPart =>\n                part.type === 'tool-invocation' &&\n                part.toolInvocation.toolCallId === contentPart.toolCallId,\n            );\n\n          if (!toolCall) {\n            throw new Error('Tool call not found in previous message');\n          }\n\n          // add the result to the tool call:\n          toolCall.state = 'result';\n          const toolResult = toolCall as ToolInvocation & { state: 'result' };\n          toolResult.result = contentPart.result;\n\n          if (toolCallPart) {\n            toolCallPart.toolInvocation = toolResult;\n          } else {\n            lastMessage.parts.push({\n              type: 'tool-invocation' as const,\n              toolInvocation: toolResult,\n            });\n          }\n        }\n\n        break;\n      }\n\n      default: {\n        const _exhaustiveCheck: never = role;\n        throw new Error(`Unsupported message role: ${_exhaustiveCheck}`);\n      }\n    }\n  }\n\n  return clonedMessages;\n}\n","import { NoSuchModelError, ProviderV1 } from '@ai-sdk/provider';\nimport { EmbeddingModel, ImageModel, LanguageModel, Provider } from '../types';\n\n/**\n * Creates a custom provider with specified language models, text embedding models, and an optional fallback provider.\n *\n * @param {Object} options - The options for creating the custom provider.\n * @param {Record<string, LanguageModel>} [options.languageModels] - A record of language models, where keys are model IDs and values are LanguageModel instances.\n * @param {Record<string, EmbeddingModel<string>>} [options.textEmbeddingModels] - A record of text embedding models, where keys are model IDs and values are EmbeddingModel<string> instances.\n * @param {Record<string, ImageModel>} [options.imageModels] - A record of image models, where keys are model IDs and values are ImageModel instances.\n * @param {Provider} [options.fallbackProvider] - An optional fallback provider to use when a requested model is not found in the custom provider.\n * @returns {Provider} A Provider object with languageModel, textEmbeddingModel, and imageModel methods.\n *\n * @throws {NoSuchModelError} Throws when a requested model is not found and no fallback provider is available.\n */\nexport function customProvider<\n  LANGUAGE_MODELS extends Record<string, LanguageModel>,\n  EMBEDDING_MODELS extends Record<string, EmbeddingModel<string>>,\n  IMAGE_MODELS extends Record<string, ImageModel>,\n>({\n  languageModels,\n  textEmbeddingModels,\n  imageModels,\n  fallbackProvider,\n}: {\n  languageModels?: LANGUAGE_MODELS;\n  textEmbeddingModels?: EMBEDDING_MODELS;\n  imageModels?: IMAGE_MODELS;\n  fallbackProvider?: ProviderV1;\n}): Provider & {\n  languageModel(modelId: ExtractModelId<LANGUAGE_MODELS>): LanguageModel;\n  textEmbeddingModel(\n    modelId: ExtractModelId<EMBEDDING_MODELS>,\n  ): EmbeddingModel<string>;\n  imageModel(modelId: ExtractModelId<IMAGE_MODELS>): ImageModel;\n} {\n  return {\n    languageModel(modelId: ExtractModelId<LANGUAGE_MODELS>): LanguageModel {\n      if (languageModels != null && modelId in languageModels) {\n        return languageModels[modelId];\n      }\n\n      if (fallbackProvider) {\n        return fallbackProvider.languageModel(modelId);\n      }\n\n      throw new NoSuchModelError({ modelId, modelType: 'languageModel' });\n    },\n\n    textEmbeddingModel(\n      modelId: ExtractModelId<EMBEDDING_MODELS>,\n    ): EmbeddingModel<string> {\n      if (textEmbeddingModels != null && modelId in textEmbeddingModels) {\n        return textEmbeddingModels[modelId];\n      }\n\n      if (fallbackProvider) {\n        return fallbackProvider.textEmbeddingModel(modelId);\n      }\n\n      throw new NoSuchModelError({ modelId, modelType: 'textEmbeddingModel' });\n    },\n\n    imageModel(modelId: ExtractModelId<IMAGE_MODELS>): ImageModel {\n      if (imageModels != null && modelId in imageModels) {\n        return imageModels[modelId];\n      }\n\n      if (fallbackProvider?.imageModel) {\n        return fallbackProvider.imageModel(modelId);\n      }\n\n      throw new NoSuchModelError({ modelId, modelType: 'imageModel' });\n    },\n  };\n}\n\n/**\n * @deprecated Use `customProvider` instead.\n */\nexport const experimental_customProvider = customProvider;\n\ntype ExtractModelId<MODELS extends Record<string, unknown>> = Extract<\n  keyof MODELS,\n  string\n>;\n","import { AISDKError, NoSuchModelError } from '@ai-sdk/provider';\n\nconst name = 'AI_NoSuchProviderError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\nexport class NoSuchProviderError extends NoSuchModelError {\n  private readonly [symbol] = true; // used in isInstance\n\n  readonly providerId: string;\n  readonly availableProviders: string[];\n\n  constructor({\n    modelId,\n    modelType,\n    providerId,\n    availableProviders,\n    message = `No such provider: ${providerId} (available providers: ${availableProviders.join()})`,\n  }: {\n    modelId: string;\n    modelType: 'languageModel' | 'textEmbeddingModel';\n    providerId: string;\n    availableProviders: string[];\n    message?: string;\n  }) {\n    super({ errorName: name, modelId, modelType, message });\n\n    this.providerId = providerId;\n    this.availableProviders = availableProviders;\n  }\n\n  static isInstance(error: unknown): error is NoSuchProviderError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","import { NoSuchModelError, ProviderV1 } from '@ai-sdk/provider';\nimport { EmbeddingModel, ImageModel, LanguageModel } from '../types';\nimport { NoSuchProviderError } from './no-such-provider-error';\n\ntype ExtractLiteralUnion<T> = T extends string\n  ? string extends T\n    ? never\n    : T\n  : never;\n\nexport interface ProviderRegistryProvider<\n  PROVIDERS extends Record<string, ProviderV1> = Record<string, ProviderV1>,\n  SEPARATOR extends string = ':',\n> {\n  languageModel<KEY extends keyof PROVIDERS>(\n    id: KEY extends string\n      ? `${KEY & string}${SEPARATOR}${ExtractLiteralUnion<Parameters<NonNullable<PROVIDERS[KEY]['languageModel']>>[0]>}`\n      : never,\n  ): LanguageModel;\n  languageModel<KEY extends keyof PROVIDERS>(\n    id: KEY extends string ? `${KEY & string}${SEPARATOR}${string}` : never,\n  ): LanguageModel;\n\n  textEmbeddingModel<KEY extends keyof PROVIDERS>(\n    id: KEY extends string\n      ? `${KEY & string}${SEPARATOR}${ExtractLiteralUnion<Parameters<NonNullable<PROVIDERS[KEY]['textEmbeddingModel']>>[0]>}`\n      : never,\n  ): EmbeddingModel<string>;\n  textEmbeddingModel<KEY extends keyof PROVIDERS>(\n    id: KEY extends string ? `${KEY & string}${SEPARATOR}${string}` : never,\n  ): EmbeddingModel<string>;\n\n  imageModel<KEY extends keyof PROVIDERS>(\n    id: KEY extends string\n      ? `${KEY & string}${SEPARATOR}${ExtractLiteralUnion<Parameters<NonNullable<PROVIDERS[KEY]['imageModel']>>[0]>}`\n      : never,\n  ): ImageModel;\n  imageModel<KEY extends keyof PROVIDERS>(\n    id: KEY extends string ? `${KEY & string}${SEPARATOR}${string}` : never,\n  ): ImageModel;\n}\n\n/**\n * Creates a registry for the given providers.\n */\nexport function createProviderRegistry<\n  PROVIDERS extends Record<string, ProviderV1>,\n  SEPARATOR extends string = ':',\n>(\n  providers: PROVIDERS,\n  {\n    separator = ':' as SEPARATOR,\n  }: {\n    separator?: SEPARATOR;\n  } = {},\n): ProviderRegistryProvider<PROVIDERS, SEPARATOR> {\n  const registry = new DefaultProviderRegistry<PROVIDERS, SEPARATOR>({\n    separator,\n  });\n\n  for (const [id, provider] of Object.entries(providers)) {\n    registry.registerProvider({ id, provider } as {\n      id: keyof PROVIDERS;\n      provider: PROVIDERS[keyof PROVIDERS];\n    });\n  }\n\n  return registry;\n}\n\n/**\n * @deprecated Use `createProviderRegistry` instead.\n */\nexport const experimental_createProviderRegistry = createProviderRegistry;\n\nclass DefaultProviderRegistry<\n  PROVIDERS extends Record<string, ProviderV1>,\n  SEPARATOR extends string,\n> implements ProviderRegistryProvider<PROVIDERS, SEPARATOR>\n{\n  private providers: PROVIDERS = {} as PROVIDERS;\n  private separator: SEPARATOR;\n\n  constructor({ separator }: { separator: SEPARATOR }) {\n    this.separator = separator;\n  }\n\n  registerProvider<K extends keyof PROVIDERS>({\n    id,\n    provider,\n  }: {\n    id: K;\n    provider: PROVIDERS[K];\n  }): void {\n    this.providers[id] = provider;\n  }\n\n  private getProvider(id: string): ProviderV1 {\n    const provider = this.providers[id as keyof PROVIDERS];\n\n    if (provider == null) {\n      throw new NoSuchProviderError({\n        modelId: id,\n        modelType: 'languageModel',\n        providerId: id,\n        availableProviders: Object.keys(this.providers),\n      });\n    }\n\n    return provider;\n  }\n\n  private splitId(\n    id: string,\n    modelType: 'languageModel' | 'textEmbeddingModel' | 'imageModel',\n  ): [string, string] {\n    const index = id.indexOf(this.separator);\n\n    if (index === -1) {\n      throw new NoSuchModelError({\n        modelId: id,\n        modelType,\n        message:\n          `Invalid ${modelType} id for registry: ${id} ` +\n          `(must be in the format \"providerId${this.separator}modelId\")`,\n      });\n    }\n\n    return [id.slice(0, index), id.slice(index + this.separator.length)];\n  }\n\n  languageModel<KEY extends keyof PROVIDERS>(\n    id: `${KEY & string}${SEPARATOR}${string}`,\n  ): LanguageModel {\n    const [providerId, modelId] = this.splitId(id, 'languageModel');\n    const model = this.getProvider(providerId).languageModel?.(modelId);\n\n    if (model == null) {\n      throw new NoSuchModelError({ modelId: id, modelType: 'languageModel' });\n    }\n\n    return model;\n  }\n\n  textEmbeddingModel<KEY extends keyof PROVIDERS>(\n    id: `${KEY & string}${SEPARATOR}${string}`,\n  ): EmbeddingModel<string> {\n    const [providerId, modelId] = this.splitId(id, 'textEmbeddingModel');\n    const provider = this.getProvider(providerId);\n\n    const model = provider.textEmbeddingModel?.(modelId);\n\n    if (model == null) {\n      throw new NoSuchModelError({\n        modelId: id,\n        modelType: 'textEmbeddingModel',\n      });\n    }\n\n    return model;\n  }\n\n  imageModel<KEY extends keyof PROVIDERS>(\n    id: `${KEY & string}${SEPARATOR}${string}`,\n  ): ImageModel {\n    const [providerId, modelId] = this.splitId(id, 'imageModel');\n    const provider = this.getProvider(providerId);\n\n    const model = provider.imageModel?.(modelId);\n\n    if (model == null) {\n      throw new NoSuchModelError({ modelId: id, modelType: 'imageModel' });\n    }\n\n    return model;\n  }\n}\n","import { JSONSchema7 } from '@ai-sdk/provider';\nimport { jsonSchema } from '@ai-sdk/ui-utils';\nimport { z, ZodType } from 'zod';\nimport { MCPClientError } from '../../../errors';\nimport { inferParameters, tool, Tool, ToolExecutionOptions } from '../tool';\nimport {\n  JSONRPCError,\n  JSONRPCNotification,\n  JSONRPCRequest,\n  JSONRPCResponse,\n} from './json-rpc-message';\nimport {\n  createMcpTransport,\n  isCustomMcpTransport,\n  MCPTransport,\n  MCPTransportConfig,\n} from './mcp-transport';\nimport {\n  CallToolResult,\n  CallToolResultSchema,\n  Configuration as ClientConfiguration,\n  InitializeResultSchema,\n  LATEST_PROTOCOL_VERSION,\n  ListToolsResult,\n  ListToolsResultSchema,\n  McpToolSet,\n  Notification,\n  PaginatedRequest,\n  Request,\n  RequestOptions,\n  ServerCapabilities,\n  SUPPORTED_PROTOCOL_VERSIONS,\n  ToolSchemas,\n} from './types';\n\nconst CLIENT_VERSION = '1.0.0';\n\ninterface MCPClientConfig {\n  /** Transport configuration for connecting to the MCP server */\n  transport: MCPTransportConfig | MCPTransport;\n  /** Optional callback for uncaught errors */\n  onUncaughtError?: (error: unknown) => void;\n  /** Optional client name, defaults to 'ai-sdk-mcp-client' */\n  name?: string;\n}\n\nexport async function createMCPClient(\n  config: MCPClientConfig,\n): Promise<MCPClient> {\n  const client = new MCPClient(config);\n  await client.init();\n  return client;\n}\n\n/**\n * A lightweight MCP Client implementation\n *\n * The primary purpose of this client is tool conversion between MCP<>AI SDK\n * but can later be extended to support other MCP features\n *\n * Tool parameters are automatically inferred from the server's JSON schema\n * if not explicitly provided in the tools configuration\n *\n * This client is meant to be used to communicate with a single server. To communicate and fetch tools across multiple servers, it's recommended to create a new client instance per server.\n *\n * Not supported:\n * - Client options (e.g. sampling, roots) as they are not needed for tool conversion\n * - Accepting notifications\n * - Session management (when passing a sessionId to an instance of the Streamable HTTP transport)\n * - Resumable SSE streams\n */\nclass MCPClient {\n  private transport: MCPTransport;\n  private onUncaughtError?: (error: unknown) => void;\n  private clientInfo: ClientConfiguration;\n  private requestMessageId = 0;\n  private responseHandlers: Map<\n    number,\n    (response: JSONRPCResponse | Error) => void\n  > = new Map();\n  private serverCapabilities: ServerCapabilities = {};\n  private isClosed = true;\n\n  constructor({\n    transport: transportConfig,\n    name = 'ai-sdk-mcp-client',\n    onUncaughtError,\n  }: MCPClientConfig) {\n    this.onUncaughtError = onUncaughtError;\n\n    if (isCustomMcpTransport(transportConfig)) {\n      this.transport = transportConfig;\n    } else {\n      this.transport = createMcpTransport(transportConfig);\n    }\n\n    this.transport.onclose = () => this.onClose();\n    this.transport.onerror = (error: Error) => this.onError(error);\n    this.transport.onmessage = message => {\n      if ('method' in message) {\n        // This lightweight client implementation does not support\n        // receiving notifications or requests from server.\n        // If we get an unsupported message, we can safely ignore it and pass to the onError handler:\n        this.onError(\n          new MCPClientError({\n            message: 'Unsupported message type',\n          }),\n        );\n        return;\n      }\n\n      this.onResponse(message);\n    };\n\n    this.clientInfo = {\n      name,\n      version: CLIENT_VERSION,\n    };\n  }\n\n  async init(): Promise<this> {\n    try {\n      await this.transport.start();\n      this.isClosed = false;\n\n      const result = await this.request({\n        request: {\n          method: 'initialize',\n          params: {\n            protocolVersion: LATEST_PROTOCOL_VERSION,\n            capabilities: {},\n            clientInfo: this.clientInfo,\n          },\n        },\n        resultSchema: InitializeResultSchema,\n      });\n\n      if (result === undefined) {\n        throw new MCPClientError({\n          message: 'Server sent invalid initialize result',\n        });\n      }\n\n      if (!SUPPORTED_PROTOCOL_VERSIONS.includes(result.protocolVersion)) {\n        throw new MCPClientError({\n          message: `Server's protocol version is not supported: ${result.protocolVersion}`,\n        });\n      }\n\n      this.serverCapabilities = result.capabilities;\n\n      // Complete initialization handshake:\n      await this.notification({\n        method: 'notifications/initialized',\n      });\n\n      return this;\n    } catch (error) {\n      await this.close();\n      throw error;\n    }\n  }\n\n  async close(): Promise<void> {\n    if (this.isClosed) return;\n    await this.transport?.close();\n    this.onClose();\n  }\n\n  private assertCapability(method: string): void {\n    switch (method) {\n      case 'initialize':\n        break;\n      case 'tools/list':\n      case 'tools/call':\n        if (!this.serverCapabilities.tools) {\n          throw new MCPClientError({\n            message: `Server does not support tools`,\n          });\n        }\n        break;\n      default:\n        throw new MCPClientError({\n          message: `Unsupported method: ${method}`,\n        });\n    }\n  }\n\n  private async request<T extends ZodType<object>>({\n    request,\n    resultSchema,\n    options,\n  }: {\n    request: Request;\n    resultSchema: T;\n    options?: RequestOptions;\n  }): Promise<z.infer<T>> {\n    return new Promise((resolve, reject) => {\n      if (this.isClosed) {\n        return reject(\n          new MCPClientError({\n            message: 'Attempted to send a request from a closed client',\n          }),\n        );\n      }\n\n      this.assertCapability(request.method);\n\n      const signal = options?.signal;\n      signal?.throwIfAborted();\n\n      const messageId = this.requestMessageId++;\n      const jsonrpcRequest: JSONRPCRequest = {\n        ...request,\n        jsonrpc: '2.0',\n        id: messageId,\n      };\n\n      const cleanup = () => {\n        this.responseHandlers.delete(messageId);\n      };\n\n      this.responseHandlers.set(messageId, response => {\n        if (signal?.aborted) {\n          return reject(\n            new MCPClientError({\n              message: 'Request was aborted',\n              cause: signal.reason,\n            }),\n          );\n        }\n\n        if (response instanceof Error) {\n          return reject(response);\n        }\n\n        try {\n          const result = resultSchema.parse(response.result);\n          resolve(result);\n        } catch (error) {\n          const parseError = new MCPClientError({\n            message: 'Failed to parse server response',\n            cause: error,\n          });\n          reject(parseError);\n        }\n      });\n\n      this.transport.send(jsonrpcRequest).catch(error => {\n        cleanup();\n        reject(error);\n      });\n    });\n  }\n\n  private async listTools({\n    params,\n    options,\n  }: {\n    params?: PaginatedRequest['params'];\n    options?: RequestOptions;\n  } = {}): Promise<ListToolsResult> {\n    try {\n      return this.request({\n        request: { method: 'tools/list', params },\n        resultSchema: ListToolsResultSchema,\n        options,\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  private async callTool({\n    name,\n    args,\n    options,\n  }: {\n    name: string;\n    args: Record<string, unknown>;\n    options?: ToolExecutionOptions;\n  }): Promise<CallToolResult> {\n    try {\n      return this.request({\n        request: { method: 'tools/call', params: { name, arguments: args } },\n        resultSchema: CallToolResultSchema,\n        options: {\n          signal: options?.abortSignal,\n        },\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  private async notification(notification: Notification): Promise<void> {\n    const jsonrpcNotification: JSONRPCNotification = {\n      ...notification,\n      jsonrpc: '2.0',\n    };\n    await this.transport.send(jsonrpcNotification);\n  }\n\n  /**\n   * Returns a set of AI SDK tools from the MCP server\n   * @returns A record of tool names to their implementations\n   */\n  async tools<TOOL_SCHEMAS extends ToolSchemas = 'automatic'>({\n    schemas = 'automatic',\n  }: {\n    schemas?: TOOL_SCHEMAS;\n  } = {}): Promise<McpToolSet<TOOL_SCHEMAS>> {\n    const tools: Record<string, Tool> = {};\n\n    try {\n      const listToolsResult = await this.listTools();\n\n      for (const { name, description, inputSchema } of listToolsResult.tools) {\n        if (schemas !== 'automatic' && !(name in schemas)) {\n          continue;\n        }\n\n        const parameters =\n          schemas === 'automatic'\n            ? jsonSchema({\n                ...inputSchema,\n                properties: inputSchema.properties ?? {},\n                additionalProperties: false,\n              } as JSONSchema7)\n            : schemas[name].parameters;\n\n        const self = this;\n        const toolWithExecute = tool({\n          description,\n          parameters,\n          execute: async (\n            args: inferParameters<typeof parameters>,\n            options: ToolExecutionOptions,\n          ): Promise<CallToolResult> => {\n            options?.abortSignal?.throwIfAborted();\n\n            return self.callTool({\n              name,\n              args,\n              options,\n            });\n          },\n        });\n\n        tools[name] = toolWithExecute;\n      }\n\n      return tools as McpToolSet<TOOL_SCHEMAS>;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  private onClose(): void {\n    if (this.isClosed) return;\n\n    this.isClosed = true;\n    const error = new MCPClientError({\n      message: 'Connection closed',\n    });\n\n    for (const handler of this.responseHandlers.values()) {\n      handler(error);\n    }\n\n    this.responseHandlers.clear();\n  }\n\n  private onError(error: unknown): void {\n    if (this.onUncaughtError) {\n      this.onUncaughtError(error);\n    }\n  }\n\n  private onResponse(response: JSONRPCResponse | JSONRPCError): void {\n    const messageId = Number(response.id);\n    const handler = this.responseHandlers.get(messageId);\n\n    if (handler === undefined) {\n      throw new MCPClientError({\n        message: `Protocol error: Received a response for an unknown message ID: ${JSON.stringify(\n          response,\n        )}`,\n      });\n    }\n\n    this.responseHandlers.delete(messageId);\n\n    handler(\n      'result' in response\n        ? response\n        : new MCPClientError({\n            message: response.error.message,\n            cause: response.error,\n          }),\n    );\n  }\n}\n","import { Schema } from '@ai-sdk/ui-utils';\nimport { z } from 'zod';\nimport { ToolResultContent } from '../prompt/tool-result-content';\nimport { CoreMessage } from '../prompt/message';\n\nexport type ToolParameters = z.ZodTypeAny | Schema<any>;\n\nexport type inferParameters<PARAMETERS extends ToolParameters> =\n  PARAMETERS extends Schema<any>\n    ? PARAMETERS['_type']\n    : PARAMETERS extends z.ZodTypeAny\n      ? z.infer<PARAMETERS>\n      : never;\n\nexport interface ToolExecutionOptions {\n  /**\n   * The ID of the tool call. You can use it e.g. when sending tool-call related information with stream data.\n   */\n  toolCallId: string;\n\n  /**\n   * Messages that were sent to the language model to initiate the response that contained the tool call.\n   * The messages **do not** include the system prompt nor the assistant response that contained the tool call.\n   */\n  messages: CoreMessage[];\n\n  /**\n   * An optional abort signal that indicates that the overall operation should be aborted.\n   */\n  abortSignal?: AbortSignal;\n}\n\n/**\nA tool contains the description and the schema of the input that the tool expects.\nThis enables the language model to generate the input.\n\nThe tool can also contain an optional execute function for the actual execution function of the tool.\n */\nexport type Tool<PARAMETERS extends ToolParameters = any, RESULT = any> = {\n  /**\nThe schema of the input that the tool expects. The language model will use this to generate the input.\nIt is also used to validate the output of the language model.\nUse descriptions to make the input understandable for the language model.\n   */\n  parameters: PARAMETERS;\n\n  /**\nAn optional description of what the tool does.\nWill be used by the language model to decide whether to use the tool.\nNot used for provider-defined tools.\n   */\n  description?: string;\n\n  /**\nOptional conversion function that maps the tool result to multi-part tool content for LLMs.\n   */\n  experimental_toToolResultContent?: (result: RESULT) => ToolResultContent;\n\n  /**\nAn async function that is called with the arguments from the tool call and produces a result.\nIf not provided, the tool will not be executed automatically.\n\n@args is the input of the tool call.\n@options.abortSignal is a signal that can be used to abort the tool call.\n   */\n  execute?: (\n    args: inferParameters<PARAMETERS>,\n    options: ToolExecutionOptions,\n  ) => PromiseLike<RESULT>;\n} & (\n  | {\n      /**\nFunction tool.\n       */\n      type?: undefined | 'function';\n    }\n  | {\n      /**\nProvider-defined tool.\n       */\n      type: 'provider-defined';\n\n      /**\nThe ID of the tool. Should follow the format `<provider-name>.<tool-name>`.\n       */\n      id: `${string}.${string}`;\n\n      /**\nThe arguments for configuring the tool. Must match the expected arguments defined by the provider for this tool.\n       */\n      args: Record<string, unknown>;\n    }\n);\n\n/**\n * @deprecated Use `Tool` instead.\n */\n// TODO remove in v5\nexport type CoreTool<\n  PARAMETERS extends ToolParameters = any,\n  RESULT = any,\n> = Tool<PARAMETERS, RESULT>;\n\n/**\nHelper function for inferring the execute args of a tool.\n */\n// Note: special type inference is needed for the execute function args to make sure they are inferred correctly.\nexport function tool<PARAMETERS extends ToolParameters, RESULT>(\n  tool: Tool<PARAMETERS, RESULT> & {\n    execute: (\n      args: inferParameters<PARAMETERS>,\n      options: ToolExecutionOptions,\n    ) => PromiseLike<RESULT>;\n  },\n): Tool<PARAMETERS, RESULT> & {\n  execute: (\n    args: inferParameters<PARAMETERS>,\n    options: ToolExecutionOptions,\n  ) => PromiseLike<RESULT>;\n};\nexport function tool<PARAMETERS extends ToolParameters, RESULT>(\n  tool: Tool<PARAMETERS, RESULT> & {\n    execute?: undefined;\n  },\n): Tool<PARAMETERS, RESULT> & {\n  execute: undefined;\n};\nexport function tool<PARAMETERS extends ToolParameters, RESULT = any>(\n  tool: Tool<PARAMETERS, RESULT>,\n): Tool<PARAMETERS, RESULT> {\n  return tool;\n}\n","import { createEventSourceParserStream } from '@ai-sdk/provider-utils';\nimport { MCPClientError } from '../../../errors';\nimport { JSONRPCMessage, JSONRPCMessageSchema } from './json-rpc-message';\nimport { MCPTransport } from './mcp-transport';\n\nexport class SseMCPTransport implements MCPTransport {\n  private endpoint?: URL;\n  private abortController?: AbortController;\n  private url: URL;\n  private connected = false;\n  private sseConnection?: {\n    close: () => void;\n  };\n  private headers?: Record<string, string>;\n\n  onclose?: () => void;\n  onerror?: (error: unknown) => void;\n  onmessage?: (message: JSONRPCMessage) => void;\n\n  constructor({\n    url,\n    headers,\n  }: {\n    url: string;\n    headers?: Record<string, string>;\n  }) {\n    this.url = new URL(url);\n    this.headers = headers;\n  }\n\n  async start(): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      if (this.connected) {\n        return resolve();\n      }\n\n      this.abortController = new AbortController();\n\n      const establishConnection = async () => {\n        try {\n          const headers = new Headers(this.headers);\n          headers.set('Accept', 'text/event-stream');\n          const response = await fetch(this.url.href, {\n            headers,\n            signal: this.abortController?.signal,\n          });\n\n          if (!response.ok || !response.body) {\n            const error = new MCPClientError({\n              message: `MCP SSE Transport Error: ${response.status} ${response.statusText}`,\n            });\n            this.onerror?.(error);\n            return reject(error);\n          }\n\n          const stream = response.body\n            .pipeThrough(new TextDecoderStream())\n            .pipeThrough(createEventSourceParserStream());\n\n          const reader = stream.getReader();\n\n          const processEvents = async () => {\n            try {\n              while (true) {\n                const { done, value } = await reader.read();\n\n                if (done) {\n                  if (this.connected) {\n                    this.connected = false;\n                    throw new MCPClientError({\n                      message:\n                        'MCP SSE Transport Error: Connection closed unexpectedly',\n                    });\n                  }\n                  return;\n                }\n\n                const { event, data } = value;\n\n                if (event === 'endpoint') {\n                  this.endpoint = new URL(data, this.url);\n\n                  if (this.endpoint.origin !== this.url.origin) {\n                    throw new MCPClientError({\n                      message: `MCP SSE Transport Error: Endpoint origin does not match connection origin: ${this.endpoint.origin}`,\n                    });\n                  }\n\n                  this.connected = true;\n                  resolve();\n                } else if (event === 'message') {\n                  try {\n                    const message = JSONRPCMessageSchema.parse(\n                      JSON.parse(data),\n                    );\n                    this.onmessage?.(message);\n                  } catch (error) {\n                    const e = new MCPClientError({\n                      message:\n                        'MCP SSE Transport Error: Failed to parse message',\n                      cause: error,\n                    });\n                    this.onerror?.(e);\n                    // We do not throw here so we continue processing events after reporting the error\n                  }\n                }\n              }\n            } catch (error) {\n              if (error instanceof Error && error.name === 'AbortError') {\n                return;\n              }\n\n              this.onerror?.(error);\n              reject(error);\n            }\n          };\n\n          this.sseConnection = {\n            close: () => reader.cancel(),\n          };\n\n          processEvents();\n        } catch (error) {\n          if (error instanceof Error && error.name === 'AbortError') {\n            return;\n          }\n\n          this.onerror?.(error);\n          reject(error);\n        }\n      };\n\n      establishConnection();\n    });\n  }\n\n  async close(): Promise<void> {\n    this.connected = false;\n    this.sseConnection?.close();\n    this.abortController?.abort();\n    this.onclose?.();\n  }\n\n  async send(message: JSONRPCMessage): Promise<void> {\n    if (!this.endpoint || !this.connected) {\n      throw new MCPClientError({\n        message: 'MCP SSE Transport Error: Not connected',\n      });\n    }\n\n    try {\n      const headers = new Headers(this.headers);\n      headers.set('Content-Type', 'application/json');\n      const init = {\n        method: 'POST',\n        headers,\n        body: JSON.stringify(message),\n        signal: this.abortController?.signal,\n      };\n\n      const response = await fetch(this.endpoint, init);\n\n      if (!response.ok) {\n        const text = await response.text().catch(() => null);\n        const error = new MCPClientError({\n          message: `MCP SSE Transport Error: POSTing to endpoint (HTTP ${response.status}): ${text}`,\n        });\n        this.onerror?.(error);\n        return;\n      }\n    } catch (error) {\n      this.onerror?.(error);\n      return;\n    }\n  }\n}\n\nexport function deserializeMessage(line: string): JSONRPCMessage {\n  return JSONRPCMessageSchema.parse(JSON.parse(line));\n}\n","import { z } from 'zod';\nimport { BaseParamsSchema, RequestSchema, ResultSchema } from './types';\n\nconst JSONRPC_VERSION = '2.0';\n\nconst JSONRPCRequestSchema = z\n  .object({\n    jsonrpc: z.literal(JSONRPC_VERSION),\n    id: z.union([z.string(), z.number().int()]),\n  })\n  .merge(RequestSchema)\n  .strict();\n\nexport type JSONRPCRequest = z.infer<typeof JSONRPCRequestSchema>;\n\nconst JSONRPCResponseSchema = z\n  .object({\n    jsonrpc: z.literal(JSONRPC_VERSION),\n    id: z.union([z.string(), z.number().int()]),\n    result: ResultSchema,\n  })\n  .strict();\n\nexport type JSONRPCResponse = z.infer<typeof JSONRPCResponseSchema>;\n\nconst JSONRPCErrorSchema = z\n  .object({\n    jsonrpc: z.literal(JSONRPC_VERSION),\n    id: z.union([z.string(), z.number().int()]),\n    error: z.object({\n      code: z.number().int(),\n      message: z.string(),\n      data: z.optional(z.unknown()),\n    }),\n  })\n  .strict();\n\nexport type JSONRPCError = z.infer<typeof JSONRPCErrorSchema>;\n\nconst JSONRPCNotificationSchema = z\n  .object({\n    jsonrpc: z.literal(JSONRPC_VERSION),\n  })\n  .merge(\n    z.object({\n      method: z.string(),\n      params: z.optional(BaseParamsSchema),\n    }),\n  )\n  .strict();\n\nexport type JSONRPCNotification = z.infer<typeof JSONRPCNotificationSchema>;\n\nexport const JSONRPCMessageSchema = z.union([\n  JSONRPCRequestSchema,\n  JSONRPCNotificationSchema,\n  JSONRPCResponseSchema,\n  JSONRPCErrorSchema,\n]);\n\nexport type JSONRPCMessage = z.infer<typeof JSONRPCMessageSchema>;\n","import { z } from 'zod';\nimport {\n  inferParameters,\n  Tool,\n  ToolExecutionOptions,\n  ToolParameters,\n} from '../tool';\n\nexport const LATEST_PROTOCOL_VERSION = '2024-11-05';\nexport const SUPPORTED_PROTOCOL_VERSIONS = [\n  LATEST_PROTOCOL_VERSION,\n  '2024-10-07',\n];\n\nexport type ToolSchemas =\n  | Record<string, { parameters: ToolParameters }>\n  | 'automatic'\n  | undefined;\n\nexport type McpToolSet<TOOL_SCHEMAS extends ToolSchemas = 'automatic'> =\n  TOOL_SCHEMAS extends Record<string, { parameters: ToolParameters }>\n    ? {\n        [K in keyof TOOL_SCHEMAS]: Tool<\n          TOOL_SCHEMAS[K]['parameters'],\n          CallToolResult\n        > & {\n          execute: (\n            args: inferParameters<TOOL_SCHEMAS[K]['parameters']>,\n            options: ToolExecutionOptions,\n          ) => PromiseLike<CallToolResult>;\n        };\n      }\n    : {\n        [k: string]: Tool<z.ZodUnknown, CallToolResult> & {\n          execute: (\n            args: unknown,\n            options: ToolExecutionOptions,\n          ) => PromiseLike<CallToolResult>;\n        };\n      };\n\nconst ClientOrServerImplementationSchema = z\n  .object({\n    name: z.string(),\n    version: z.string(),\n  })\n  .passthrough();\nexport type Configuration = z.infer<typeof ClientOrServerImplementationSchema>;\n\nexport const BaseParamsSchema = z\n  .object({\n    _meta: z.optional(z.object({}).passthrough()),\n  })\n  .passthrough();\ntype BaseParams = z.infer<typeof BaseParamsSchema>;\nexport const ResultSchema = BaseParamsSchema;\n\nexport const RequestSchema = z.object({\n  method: z.string(),\n  params: z.optional(BaseParamsSchema),\n});\nexport type Request = z.infer<typeof RequestSchema>;\nexport type RequestOptions = {\n  signal?: AbortSignal;\n  timeout?: number;\n  maxTotalTimeout?: number;\n};\n\nexport type Notification = z.infer<typeof RequestSchema>;\n\nconst ServerCapabilitiesSchema = z\n  .object({\n    experimental: z.optional(z.object({}).passthrough()),\n    logging: z.optional(z.object({}).passthrough()),\n    prompts: z.optional(\n      z\n        .object({\n          listChanged: z.optional(z.boolean()),\n        })\n        .passthrough(),\n    ),\n    resources: z.optional(\n      z\n        .object({\n          subscribe: z.optional(z.boolean()),\n          listChanged: z.optional(z.boolean()),\n        })\n        .passthrough(),\n    ),\n    tools: z.optional(\n      z\n        .object({\n          listChanged: z.optional(z.boolean()),\n        })\n        .passthrough(),\n    ),\n  })\n  .passthrough();\nexport type ServerCapabilities = z.infer<typeof ServerCapabilitiesSchema>;\n\nexport const InitializeResultSchema = ResultSchema.extend({\n  protocolVersion: z.string(),\n  capabilities: ServerCapabilitiesSchema,\n  serverInfo: ClientOrServerImplementationSchema,\n  instructions: z.optional(z.string()),\n});\nexport type InitializeResult = z.infer<typeof InitializeResultSchema>;\n\nexport type PaginatedRequest = Request & {\n  params?: BaseParams & {\n    cursor?: string;\n  };\n};\n\nconst PaginatedResultSchema = ResultSchema.extend({\n  nextCursor: z.optional(z.string()),\n});\n\nconst ToolSchema = z\n  .object({\n    name: z.string(),\n    description: z.optional(z.string()),\n    inputSchema: z\n      .object({\n        type: z.literal('object'),\n        properties: z.optional(z.object({}).passthrough()),\n      })\n      .passthrough(),\n  })\n  .passthrough();\nexport type MCPTool = z.infer<typeof ToolSchema>;\nexport const ListToolsResultSchema = PaginatedResultSchema.extend({\n  tools: z.array(ToolSchema),\n});\nexport type ListToolsResult = z.infer<typeof ListToolsResultSchema>;\n\nconst TextContentSchema = z\n  .object({\n    type: z.literal('text'),\n    text: z.string(),\n  })\n  .passthrough();\nconst ImageContentSchema = z\n  .object({\n    type: z.literal('image'),\n    data: z.string().base64(),\n    mimeType: z.string(),\n  })\n  .passthrough();\nconst ResourceContentsSchema = z\n  .object({\n    /**\n     * The URI of this resource.\n     */\n    uri: z.string(),\n    /**\n     * The MIME type of this resource, if known.\n     */\n    mimeType: z.optional(z.string()),\n  })\n  .passthrough();\nconst TextResourceContentsSchema = ResourceContentsSchema.extend({\n  text: z.string(),\n});\nconst BlobResourceContentsSchema = ResourceContentsSchema.extend({\n  blob: z.string().base64(),\n});\nconst EmbeddedResourceSchema = z\n  .object({\n    type: z.literal('resource'),\n    resource: z.union([TextResourceContentsSchema, BlobResourceContentsSchema]),\n  })\n  .passthrough();\n\nexport const CallToolResultSchema = ResultSchema.extend({\n  content: z.array(\n    z.union([TextContentSchema, ImageContentSchema, EmbeddedResourceSchema]),\n  ),\n  isError: z.boolean().default(false).optional(),\n}).or(\n  ResultSchema.extend({\n    toolResult: z.unknown(),\n  }),\n);\nexport type CallToolResult = z.infer<typeof CallToolResultSchema>;\n","import { MCPClientError } from '../../../errors';\nimport { JSONRPCMessage } from './json-rpc-message';\nimport { SseMCPTransport } from './mcp-sse-transport';\n\n/**\n * Transport interface for MCP (Model Context Protocol) communication.\n * Maps to the `Transport` interface in the MCP spec.\n */\nexport interface MCPTransport {\n  /**\n   * Initialize and start the transport\n   */\n  start(): Promise<void>;\n\n  /**\n   * Send a JSON-RPC message through the transport\n   * @param message The JSON-RPC message to send\n   */\n  send(message: JSONRPCMessage): Promise<void>;\n\n  /**\n   * Clean up and close the transport\n   */\n  close(): Promise<void>;\n\n  /**\n   * Event handler for transport closure\n   */\n  onclose?: () => void;\n\n  /**\n   * Event handler for transport errors\n   */\n  onerror?: (error: Error) => void;\n\n  /**\n   * Event handler for received messages\n   */\n  onmessage?: (message: JSONRPCMessage) => void;\n}\n\nexport type MCPTransportConfig = {\n  type: 'sse';\n\n  /**\n   * The URL of the MCP server.\n   */\n  url: string;\n\n  /**\n   * Additional HTTP headers to be sent with requests.\n   */\n  headers?: Record<string, string>;\n};\n\nexport function createMcpTransport(config: MCPTransportConfig): MCPTransport {\n  if (config.type !== 'sse') {\n    throw new MCPClientError({\n      message:\n        'Unsupported or invalid transport configuration. If you are using a custom transport, make sure it implements the MCPTransport interface.',\n    });\n  }\n\n  return new SseMCPTransport(config);\n}\n\nexport function isCustomMcpTransport(\n  transport: MCPTransportConfig | MCPTransport,\n): transport is MCPTransport {\n  return (\n    'start' in transport &&\n    typeof transport.start === 'function' &&\n    'send' in transport &&\n    typeof transport.send === 'function' &&\n    'close' in transport &&\n    typeof transport.close === 'function'\n  );\n}\n","import { InvalidArgumentError } from '../../errors/invalid-argument-error';\n\n/**\n * Calculates the cosine similarity between two vectors. This is a useful metric for\n * comparing the similarity of two vectors such as embeddings.\n *\n * @param vector1 - The first vector.\n * @param vector2 - The second vector.\n * @param options - Optional configuration.\n * @param options.throwErrorForEmptyVectors - If true, throws an error for empty vectors. Default: false.\n *\n * @returns The cosine similarity between vector1 and vector2.\n * @returns 0 if either vector is the zero vector.\n *\n * @throws {InvalidArgumentError} If throwErrorForEmptyVectors is true and vectors are empty.\n * @throws {InvalidArgumentError} If the vectors do not have the same length.\n */\nexport function cosineSimilarity(\n  vector1: number[],\n  vector2: number[],\n  // TODO remove throw option in 5.0\n  options?: {\n    /**\n     * @deprecated will be removed in 5.0\n     */\n    throwErrorForEmptyVectors?: boolean;\n  },\n): number {\n  if (vector1.length !== vector2.length) {\n    throw new InvalidArgumentError({\n      parameter: 'vector1,vector2',\n      value: { vector1Length: vector1.length, vector2Length: vector2.length },\n      message: `Vectors must have the same length`,\n    });\n  }\n\n  const n = vector1.length;\n\n  if (n === 0) {\n    if (options?.throwErrorForEmptyVectors) {\n      throw new InvalidArgumentError({\n        parameter: 'vector1',\n        value: vector1,\n        message: 'Vectors cannot be empty',\n      });\n    }\n\n    return 0; // Return 0 for empty vectors if no error is thrown\n  }\n\n  let magnitudeSquared1 = 0;\n  let magnitudeSquared2 = 0;\n  let dotProduct = 0;\n\n  for (let i = 0; i < n; i++) {\n    const value1 = vector1[i];\n    const value2 = vector2[i];\n\n    magnitudeSquared1 += value1 * value1;\n    magnitudeSquared2 += value2 * value2;\n    dotProduct += value1 * value2;\n  }\n\n  return magnitudeSquared1 === 0 || magnitudeSquared2 === 0\n    ? 0\n    : dotProduct /\n        (Math.sqrt(magnitudeSquared1) * Math.sqrt(magnitudeSquared2));\n}\n","import { delay as delayFunction } from '@ai-sdk/provider-utils';\n\n/**\n * Creates a ReadableStream that emits the provided values with an optional delay between each value.\n *\n * @param options - The configuration options\n * @param options.chunks - Array of values to be emitted by the stream\n * @param options.initialDelayInMs - Optional initial delay in milliseconds before emitting the first value (default: 0). Can be set to `null` to skip the initial delay. The difference between `initialDelayInMs: null` and `initialDelayInMs: 0` is that `initialDelayInMs: null` will emit the values without any delay, while `initialDelayInMs: 0` will emit the values with a delay of 0 milliseconds.\n * @param options.chunkDelayInMs - Optional delay in milliseconds between emitting each value (default: 0). Can be set to `null` to skip the delay. The difference between `chunkDelayInMs: null` and `chunkDelayInMs: 0` is that `chunkDelayInMs: null` will emit the values without any delay, while `chunkDelayInMs: 0` will emit the values with a delay of 0 milliseconds.\n * @returns A ReadableStream that emits the provided values\n */\nexport function simulateReadableStream<T>({\n  chunks,\n  initialDelayInMs = 0,\n  chunkDelayInMs = 0,\n  _internal,\n}: {\n  chunks: T[];\n  initialDelayInMs?: number | null;\n  chunkDelayInMs?: number | null;\n  _internal?: {\n    delay?: (ms: number | null) => Promise<void>;\n  };\n}): ReadableStream<T> {\n  const delay = _internal?.delay ?? delayFunction;\n\n  let index = 0;\n\n  return new ReadableStream({\n    async pull(controller) {\n      if (index < chunks.length) {\n        await delay(index === 0 ? initialDelayInMs : chunkDelayInMs);\n        controller.enqueue(chunks[index++]);\n      } else {\n        controller.close();\n      }\n    },\n  });\n}\n","import {\n  AssistantMessage,\n  DataMessage,\n  formatAssistantStreamPart,\n} from '@ai-sdk/ui-utils';\n\n/**\nYou can pass the thread and the latest message into the `AssistantResponse`. This establishes the context for the response.\n */\ntype AssistantResponseSettings = {\n  /**\nThe thread ID that the response is associated with.\n   */\n  threadId: string;\n\n  /**\nThe ID of the latest message that the response is associated with.\n */\n  messageId: string;\n};\n\n/**\nThe process parameter is a callback in which you can run the assistant on threads, and send messages and data messages to the client.\n */\ntype AssistantResponseCallback = (options: {\n  /**\nForwards an assistant message (non-streaming) to the client.\n   */\n  sendMessage: (message: AssistantMessage) => void;\n\n  /**\nSend a data message to the client. You can use this to provide information for rendering custom UIs while the assistant is processing the thread.\n */\n  sendDataMessage: (message: DataMessage) => void;\n\n  /**\nForwards the assistant response stream to the client. Returns the `Run` object after it completes, or when it requires an action.\n   */\n  forwardStream: (stream: any) => Promise<any | undefined>;\n}) => Promise<void>;\n\n/**\nThe `AssistantResponse` allows you to send a stream of assistant update to `useAssistant`.\nIt is designed to facilitate streaming assistant responses to the `useAssistant` hook.\nIt receives an assistant thread and a current message, and can send messages and data messages to the client.\n */\nexport function AssistantResponse(\n  { threadId, messageId }: AssistantResponseSettings,\n  process: AssistantResponseCallback,\n): Response {\n  const stream = new ReadableStream({\n    async start(controller) {\n      const textEncoder = new TextEncoder();\n\n      const sendMessage = (message: AssistantMessage) => {\n        controller.enqueue(\n          textEncoder.encode(\n            formatAssistantStreamPart('assistant_message', message),\n          ),\n        );\n      };\n\n      const sendDataMessage = (message: DataMessage) => {\n        controller.enqueue(\n          textEncoder.encode(\n            formatAssistantStreamPart('data_message', message),\n          ),\n        );\n      };\n\n      const sendError = (errorMessage: string) => {\n        controller.enqueue(\n          textEncoder.encode(formatAssistantStreamPart('error', errorMessage)),\n        );\n      };\n\n      const forwardStream = async (stream: any) => {\n        let result: any | undefined = undefined;\n\n        for await (const value of stream) {\n          switch (value.event) {\n            case 'thread.message.created': {\n              controller.enqueue(\n                textEncoder.encode(\n                  formatAssistantStreamPart('assistant_message', {\n                    id: value.data.id,\n                    role: 'assistant',\n                    content: [{ type: 'text', text: { value: '' } }],\n                  }),\n                ),\n              );\n              break;\n            }\n\n            case 'thread.message.delta': {\n              const content = value.data.delta.content?.[0];\n\n              if (content?.type === 'text' && content.text?.value != null) {\n                controller.enqueue(\n                  textEncoder.encode(\n                    formatAssistantStreamPart('text', content.text.value),\n                  ),\n                );\n              }\n\n              break;\n            }\n\n            case 'thread.run.completed':\n            case 'thread.run.requires_action': {\n              result = value.data;\n              break;\n            }\n          }\n        }\n\n        return result;\n      };\n\n      // send the threadId and messageId as the first message:\n      controller.enqueue(\n        textEncoder.encode(\n          formatAssistantStreamPart('assistant_control_data', {\n            threadId,\n            messageId,\n          }),\n        ),\n      );\n\n      try {\n        await process({\n          sendMessage,\n          sendDataMessage,\n          forwardStream,\n        });\n      } catch (error) {\n        sendError((error as any).message ?? `${error}`);\n      } finally {\n        controller.close();\n      }\n    },\n    pull(controller) {},\n    cancel() {},\n  });\n\n  return new Response(stream, {\n    status: 200,\n    headers: {\n      'Content-Type': 'text/plain; charset=utf-8',\n    },\n  });\n}\n","import { formatDataStreamPart } from '@ai-sdk/ui-utils';\nimport { DataStreamWriter } from '../core/data-stream/data-stream-writer';\nimport { mergeStreams } from '../core/util/merge-streams';\nimport { prepareResponseHeaders } from '../core/util/prepare-response-headers';\nimport {\n  createCallbacksTransformer,\n  StreamCallbacks,\n} from './stream-callbacks';\nimport { StreamData } from './stream-data';\n\ntype LangChainImageDetail = 'auto' | 'low' | 'high';\n\ntype LangChainMessageContentText = {\n  type: 'text';\n  text: string;\n};\n\ntype LangChainMessageContentImageUrl = {\n  type: 'image_url';\n  image_url:\n    | string\n    | {\n        url: string;\n        detail?: LangChainImageDetail;\n      };\n};\n\ntype LangChainMessageContentComplex =\n  | LangChainMessageContentText\n  | LangChainMessageContentImageUrl\n  | (Record<string, any> & {\n      type?: 'text' | 'image_url' | string;\n    })\n  | (Record<string, any> & {\n      type?: never;\n    });\n\ntype LangChainMessageContent = string | LangChainMessageContentComplex[];\n\ntype LangChainAIMessageChunk = {\n  content: LangChainMessageContent;\n};\n\n// LC stream event v2\ntype LangChainStreamEvent = {\n  event: string;\n  data: any;\n};\n\nfunction toDataStreamInternal(\n  stream:\n    | ReadableStream<LangChainStreamEvent>\n    | ReadableStream<LangChainAIMessageChunk>\n    | ReadableStream<string>,\n  callbacks?: StreamCallbacks,\n) {\n  return stream\n    .pipeThrough(\n      new TransformStream<\n        LangChainStreamEvent | LangChainAIMessageChunk | string\n      >({\n        transform: async (value, controller) => {\n          // text stream:\n          if (typeof value === 'string') {\n            controller.enqueue(value);\n            return;\n          }\n\n          // LC stream events v2:\n          if ('event' in value) {\n            // chunk is AIMessage Chunk for on_chat_model_stream event:\n            if (value.event === 'on_chat_model_stream') {\n              forwardAIMessageChunk(\n                value.data?.chunk as LangChainAIMessageChunk,\n                controller,\n              );\n            }\n            return;\n          }\n\n          // AI Message chunk stream:\n          forwardAIMessageChunk(value, controller);\n        },\n      }),\n    )\n    .pipeThrough(createCallbacksTransformer(callbacks))\n    .pipeThrough(new TextDecoderStream())\n    .pipeThrough(\n      new TransformStream({\n        transform: async (chunk, controller) => {\n          controller.enqueue(formatDataStreamPart('text', chunk));\n        },\n      }),\n    );\n}\n\n/**\nConverts LangChain output streams to an AI SDK Data Stream.\n\nThe following streams are supported:\n- `LangChainAIMessageChunk` streams (LangChain `model.stream` output)\n- `string` streams (LangChain `StringOutputParser` output)\n */\nexport function toDataStream(\n  stream:\n    | ReadableStream<LangChainStreamEvent>\n    | ReadableStream<LangChainAIMessageChunk>\n    | ReadableStream<string>,\n  callbacks?: StreamCallbacks,\n) {\n  return toDataStreamInternal(stream, callbacks).pipeThrough(\n    new TextEncoderStream(),\n  );\n}\n\nexport function toDataStreamResponse(\n  stream:\n    | ReadableStream<LangChainStreamEvent>\n    | ReadableStream<LangChainAIMessageChunk>\n    | ReadableStream<string>,\n  options?: {\n    init?: ResponseInit;\n    data?: StreamData;\n    callbacks?: StreamCallbacks;\n  },\n) {\n  const dataStream = toDataStreamInternal(\n    stream,\n    options?.callbacks,\n  ).pipeThrough(new TextEncoderStream());\n  const data = options?.data;\n  const init = options?.init;\n\n  const responseStream = data\n    ? mergeStreams(data.stream, dataStream)\n    : dataStream;\n\n  return new Response(responseStream, {\n    status: init?.status ?? 200,\n    statusText: init?.statusText,\n    headers: prepareResponseHeaders(init?.headers, {\n      contentType: 'text/plain; charset=utf-8',\n      dataStreamVersion: 'v1',\n    }),\n  });\n}\n\nexport function mergeIntoDataStream(\n  stream:\n    | ReadableStream<LangChainStreamEvent>\n    | ReadableStream<LangChainAIMessageChunk>\n    | ReadableStream<string>,\n  options: { dataStream: DataStreamWriter; callbacks?: StreamCallbacks },\n) {\n  options.dataStream.merge(toDataStreamInternal(stream, options.callbacks));\n}\n\nfunction forwardAIMessageChunk(\n  chunk: LangChainAIMessageChunk,\n  controller: TransformStreamDefaultController<any>,\n) {\n  if (typeof chunk.content === 'string') {\n    controller.enqueue(chunk.content);\n  } else {\n    const content: LangChainMessageContentComplex[] = chunk.content;\n    for (const item of content) {\n      if (item.type === 'text') {\n        controller.enqueue(item.text);\n      }\n    }\n  }\n}\n","/**\n * Configuration options and helper callback methods for stream lifecycle events.\n */\nexport interface StreamCallbacks {\n  /** `onStart`: Called once when the stream is initialized. */\n  onStart?: () => Promise<void> | void;\n\n  /**\n   * `onCompletion`: Called for each tokenized message.\n   *\n   * @deprecated Use `onFinal` instead.\n   */\n  onCompletion?: (completion: string) => Promise<void> | void;\n\n  /** `onFinal`: Called once when the stream is closed with the final completion message. */\n  onFinal?: (completion: string) => Promise<void> | void;\n\n  /** `onToken`: Called for each tokenized message. */\n  onToken?: (token: string) => Promise<void> | void;\n\n  /** `onText`: Called for each text chunk. */\n  onText?: (text: string) => Promise<void> | void;\n}\n\n/**\n * Creates a transform stream that encodes input messages and invokes optional callback functions.\n * The transform stream uses the provided callbacks to execute custom logic at different stages of the stream's lifecycle.\n * - `onStart`: Called once when the stream is initialized.\n * - `onToken`: Called for each tokenized message.\n * - `onCompletion`: Called every time a completion message is received. This can occur multiple times when using e.g. OpenAI functions\n * - `onFinal`: Called once when the stream is closed with the final completion message.\n *\n * This function is useful when you want to process a stream of messages and perform specific actions during the stream's lifecycle.\n *\n * @param {StreamCallbacks} [callbacks] - An object containing the callback functions.\n * @return {TransformStream<string, Uint8Array>} A transform stream that encodes input messages as Uint8Array and allows the execution of custom logic through callbacks.\n *\n * @example\n * const callbacks = {\n *   onStart: async () => console.log('Stream started'),\n *   onToken: async (token) => console.log(`Token: ${token}`),\n *   onCompletion: async (completion) => console.log(`Completion: ${completion}`)\n *   onFinal: async () => data.close()\n * };\n * const transformer = createCallbacksTransformer(callbacks);\n */\nexport function createCallbacksTransformer(\n  callbacks: StreamCallbacks | undefined = {},\n): TransformStream<string, Uint8Array> {\n  const textEncoder = new TextEncoder();\n  let aggregatedResponse = '';\n\n  return new TransformStream({\n    async start(): Promise<void> {\n      if (callbacks.onStart) await callbacks.onStart();\n    },\n\n    async transform(message, controller): Promise<void> {\n      controller.enqueue(textEncoder.encode(message));\n\n      aggregatedResponse += message;\n\n      if (callbacks.onToken) await callbacks.onToken(message);\n      if (callbacks.onText && typeof message === 'string') {\n        await callbacks.onText(message);\n      }\n    },\n\n    async flush(): Promise<void> {\n      if (callbacks.onCompletion) {\n        await callbacks.onCompletion(aggregatedResponse);\n      }\n      if (callbacks.onFinal) {\n        await callbacks.onFinal(aggregatedResponse);\n      }\n    },\n  });\n}\n","import { convertAsyncIteratorToReadableStream } from '@ai-sdk/provider-utils';\nimport { formatDataStreamPart } from '@ai-sdk/ui-utils';\nimport { DataStreamWriter } from '../core/data-stream/data-stream-writer';\nimport { mergeStreams } from '../core/util/merge-streams';\nimport { prepareResponseHeaders } from '../core/util/prepare-response-headers';\nimport {\n  createCallbacksTransformer,\n  StreamCallbacks,\n} from './stream-callbacks';\nimport { StreamData } from './stream-data';\n\ntype EngineResponse = {\n  delta: string;\n};\n\nfunction toDataStreamInternal(\n  stream: AsyncIterable<EngineResponse>,\n  callbacks?: StreamCallbacks,\n) {\n  const trimStart = trimStartOfStream();\n\n  return convertAsyncIteratorToReadableStream(stream[Symbol.asyncIterator]())\n    .pipeThrough(\n      new TransformStream({\n        async transform(message, controller): Promise<void> {\n          controller.enqueue(trimStart(message.delta));\n        },\n      }),\n    )\n    .pipeThrough(createCallbacksTransformer(callbacks))\n    .pipeThrough(new TextDecoderStream())\n    .pipeThrough(\n      new TransformStream({\n        transform: async (chunk, controller) => {\n          controller.enqueue(formatDataStreamPart('text', chunk));\n        },\n      }),\n    );\n}\n\nexport function toDataStream(\n  stream: AsyncIterable<EngineResponse>,\n  callbacks?: StreamCallbacks,\n) {\n  return toDataStreamInternal(stream, callbacks).pipeThrough(\n    new TextEncoderStream(),\n  );\n}\n\nexport function toDataStreamResponse(\n  stream: AsyncIterable<EngineResponse>,\n  options: {\n    init?: ResponseInit;\n    data?: StreamData;\n    callbacks?: StreamCallbacks;\n  } = {},\n) {\n  const { init, data, callbacks } = options;\n  const dataStream = toDataStreamInternal(stream, callbacks).pipeThrough(\n    new TextEncoderStream(),\n  );\n  const responseStream = data\n    ? mergeStreams(data.stream, dataStream)\n    : dataStream;\n\n  return new Response(responseStream, {\n    status: init?.status ?? 200,\n    statusText: init?.statusText,\n    headers: prepareResponseHeaders(init?.headers, {\n      contentType: 'text/plain; charset=utf-8',\n      dataStreamVersion: 'v1',\n    }),\n  });\n}\n\nexport function mergeIntoDataStream(\n  stream: AsyncIterable<EngineResponse>,\n  options: {\n    dataStream: DataStreamWriter;\n    callbacks?: StreamCallbacks;\n  },\n) {\n  options.dataStream.merge(toDataStreamInternal(stream, options.callbacks));\n}\n\nfunction trimStartOfStream(): (text: string) => string {\n  let isStreamStart = true;\n\n  return (text: string): string => {\n    if (isStreamStart) {\n      text = text.trimStart();\n      if (text) isStreamStart = false;\n    }\n    return text;\n  };\n}\n","import { JSONValue, formatDataStreamPart } from '@ai-sdk/ui-utils';\nimport { HANGING_STREAM_WARNING_TIME_MS } from '../util/constants';\n\n/**\n * A stream wrapper to send custom JSON-encoded data back to the client.\n *\n * @deprecated Please use `createDataStream`, `createDataStreamResponse`, and `pipeDataStreamToResponse` instead.\n */\nexport class StreamData {\n  private encoder = new TextEncoder();\n\n  private controller: ReadableStreamController<Uint8Array> | null = null;\n  public stream: ReadableStream<Uint8Array>;\n\n  private isClosed: boolean = false;\n  private warningTimeout: NodeJS.Timeout | null = null;\n\n  constructor() {\n    const self = this;\n\n    this.stream = new ReadableStream({\n      start: async controller => {\n        self.controller = controller;\n\n        // Set a timeout to show a warning if the stream is not closed within 3 seconds\n        if (process.env.NODE_ENV === 'development') {\n          self.warningTimeout = setTimeout(() => {\n            console.warn(\n              'The data stream is hanging. Did you forget to close it with `data.close()`?',\n            );\n          }, HANGING_STREAM_WARNING_TIME_MS);\n        }\n      },\n      pull: controller => {\n        // No-op: we don't need to do anything special on pull\n      },\n      cancel: reason => {\n        this.isClosed = true;\n      },\n    });\n  }\n\n  async close(): Promise<void> {\n    if (this.isClosed) {\n      throw new Error('Data Stream has already been closed.');\n    }\n\n    if (!this.controller) {\n      throw new Error('Stream controller is not initialized.');\n    }\n\n    this.controller.close();\n    this.isClosed = true;\n\n    // Clear the warning timeout if the stream is closed\n    if (this.warningTimeout) {\n      clearTimeout(this.warningTimeout);\n    }\n  }\n\n  append(value: JSONValue): void {\n    if (this.isClosed) {\n      throw new Error('Data Stream has already been closed.');\n    }\n\n    if (!this.controller) {\n      throw new Error('Stream controller is not initialized.');\n    }\n\n    this.controller.enqueue(\n      this.encoder.encode(formatDataStreamPart('data', [value])),\n    );\n  }\n\n  appendMessageAnnotation(value: JSONValue): void {\n    if (this.isClosed) {\n      throw new Error('Data Stream has already been closed.');\n    }\n\n    if (!this.controller) {\n      throw new Error('Stream controller is not initialized.');\n    }\n\n    this.controller.enqueue(\n      this.encoder.encode(formatDataStreamPart('message_annotations', [value])),\n    );\n  }\n}\n","/**\n * Warning time for notifying developers that a stream is hanging in dev mode\n * using a console.warn.\n */\nexport const HANGING_STREAM_WARNING_TIME_MS = 15 * 1000;\n"],"names":["createIdGenerator","generateId","formatDataStreamPart","jsonSchema","AISDKError","name","marker","symbol","_a","_a","name","name","attributes","_a","embedding","usage","embeddings","_a","usage","AISDKError","name","marker","symbol","_a","convertBase64ToUint8Array","_a","TypeValidationError","AISDKError","name","marker","symbol","_a","text","AISDKError","name","marker","symbol","_a","_a","convertBase64ToUint8Array","convertUint8ArrayToBase64","AISDKError","name","marker","symbol","_a","_a","convertUint8ArrayToBase64","convertBase64ToUint8Array","AISDKError","name","marker","symbol","_a","_a","z","_a","AISDKError","name","marker","symbol","_a","_a","processBlock","content","tool","i","z","z","z","z","z","z","z","z","z","safeValidateTypes","safeValidateTypes","_a","generateId","_a","span","_b","_c","_d","result","object","TypeValidationError","createIdGenerator","_a","_a","originalGenerateId","createIdGenerator","generateId","now","_a","doStreamSpan","object","_b","error","createIdGenerator","AISDKError","name","marker","symbol","_a","AISDKError","getErrorMessage","name","marker","symbol","_a","asSchema","object","name","tool","asSchema","text","text","safeParseJSON","safeValidateTypes","asSchema","AISDKError","getErrorMessage","name","marker","symbol","_a","AISDKError","name","marker","symbol","_a","AISDKError","getErrorMessage","name","marker","symbol","_a","asSchema","tool","safeValidateTypes","safeParseJSON","text","tool","originalGenerateId","createIdGenerator","generateId","_a","text","tool","span","_b","_c","_d","_e","_f","result","safeParseJSON","safeValidateTypes","asSchema","parsePartialJson","AISDKError","APICallError","InvalidPromptError","JSONParseError","TypeValidationError","UnsupportedFunctionalityError","AISDKError","name","marker","symbol","_a","AISDKError","name","marker","symbol","_a","text","asSchema","parsePartialJson","safeParseJSON","safeValidateTypes","InvalidArgumentError","delay","AISDKError","createIdGenerator","formatDataStreamPart","result","tool","originalGenerateId","createIdGenerator","originalGenerateMessageId","now","generateId","text","_a","AISDKError","stepType","stream","tool","doStreamSpan","stepReasoning","stepFiles","activeReasoningText","getErrorMessage","formatDataStreamPart","AISDKError","text","_a","AISDKError","_a","_a","text","text","_a","AISDKError","_a","getToolInvocations","NoSuchModelError","AISDKError","NoSuchModelError","name","marker","symbol","_a","NoSuchModelError","NoSuchModelError","_a","tool","z","z","z","_a","_b","_c","text","name","_a","_a","delay","formatAssistantStreamPart","process","_a","stream","formatDataStreamPart","_a","formatDataStreamPart","mergeIntoDataStream","toDataStream","toDataStreamResponse","formatDataStreamPart","toDataStreamInternal","formatDataStreamPart","toDataStream","toDataStreamResponse","_a","mergeIntoDataStream","text","formatDataStreamPart","formatDataStreamPart"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA,SAA2B,4BAA4B;;AMAvD,SAAS,kBAAkB;ACC3B,SAAS,OAAO,iBAAiB,oBAAoB;;AKDrD,SAAiB,aAAa;;;AeK9B,SAAS,SAAS;;;;;;;;;;;A3BFX,SAAS,iBAAiB,EAC/B,OAAA,EACA,UAAU,IAAM,oBAAA,EAClB,EAGqC;IACnC,IAAI;IAEJ,MAAM,wBAAyC,CAAC,CAAA;IAEhD,MAAM,SAAS,IAAI,eAAe;QAChC,OAAM,aAAA,EAAe;YACnB,aAAa;QACf;IACF,CAAC;IAED,SAAS,YAAY,IAAA,EAAwB;QAC3C,IAAI;YACF,WAAW,OAAA,CAAQ,IAAI;QACzB,EAAA,OAAS,OAAO,CAEhB;IACF;IAEA,IAAI;QACF,MAAM,SAAS,QAAQ;YACrB,OAAM,IAAA,EAAwB;gBAC5B,YAAY,IAAI;YAClB;YACA,WAAU,IAAA,EAAM;gBACd,+LAAY,uBAAA,EAAqB,QAAQ;oBAAC,IAAI;iBAAC,CAAC;YAClD;YACA,wBAAuB,UAAA,EAAY;gBACjC,+LAAY,uBAAA,EAAqB,uBAAuB;oBAAC,UAAU;iBAAC,CAAC;YACvE;YACA,aAAY,MAAA,EAAQ;gBAClB,+LAAY,uBAAA,EAAqB,UAAU,MAAM,CAAC;YACpD;YACA,OAAM,SAAA,EAAW;gBACf,sBAAsB,IAAA,CAAA,CACnB,YAAY;oBACX,MAAM,SAAS,UAAU,SAAA,CAAU;oBACnC,MAAO,KAAM;wBACX,MAAM,EAAE,IAAA,EAAM,KAAA,CAAM,CAAA,GAAI,MAAM,OAAO,IAAA,CAAK;wBAC1C,IAAI,MAAM;wBACV,YAAY,KAAK;oBACnB;gBACF,CAAA,EAAG,EAAE,KAAA,CAAM,CAAA,UAAS;oBAClB,YAAY,0MAAA,EAAqB,SAAS,QAAQ,KAAK,CAAC,CAAC;gBAC3D,CAAC;YAEL;YACA;QACF,CAAC;QAED,IAAI,QAAQ;YACV,sBAAsB,IAAA,CACpB,OAAO,KAAA,CAAM,CAAA,UAAS;gBACpB,8LAAY,wBAAA,EAAqB,SAAS,QAAQ,KAAK,CAAC,CAAC;YAC3D,CAAC;QAEL;IACF,EAAA,OAAS,OAAO;QACd,+LAAY,uBAAA,EAAqB,SAAS,QAAQ,KAAK,CAAC,CAAC;IAC3D;IAMA,MAAM,iBAAgC,IAAI,QAAQ,OAAM,YAAW;QACjE,MAAO,sBAAsB,MAAA,GAAS,EAAG;YACvC,MAAM,sBAAsB,KAAA,CAAM;QACpC;QACA,QAAQ;IACV,CAAC;IAED,eAAe,OAAA,CAAQ,MAAM;QAC3B,IAAI;YACF,WAAW,KAAA,CAAM;QACnB,EAAA,OAAS,OAAO,CAEhB;IACF,CAAC;IAED,OAAO;AACT;;AC1FO,SAAS,uBACd,OAAA,EACA,EACE,WAAA,EACA,iBAAA,EACF,EACA;IACA,MAAM,kBAAkB,IAAI,QAAQ,WAAA,OAAA,UAAW,CAAC,CAAC;IAEjD,IAAI,CAAC,gBAAgB,GAAA,CAAI,cAAc,GAAG;QACxC,gBAAgB,GAAA,CAAI,gBAAgB,WAAW;IACjD;IAEA,IAAI,sBAAsB,KAAA,GAAW;QACnC,gBAAgB,GAAA,CAAI,2BAA2B,iBAAiB;IAClE;IAEA,OAAO;AACT;;ACdO,SAAS,yBAAyB,EACvC,MAAA,EACA,UAAA,EACA,OAAA,EACA,OAAA,EACA,OAAA,EACF,EAGa;IACX,OAAO,IAAI,SACT,iBAAiB;QAAE;QAAS;IAAQ,CAAC,EAAE,WAAA,CAAY,IAAI,kBAAkB,CAAC,GAC1E;QACE;QACA;QACA,SAAS,uBAAuB,SAAS;YACvC,aAAa;YACb,mBAAmB;QACrB,CAAC;IACH;AAEJ;;ACzBO,SAAS,2BACd,OAAA,EACA,EACE,WAAA,EACA,iBAAA,EACF,EACA;IACA,MAAM,kBAA8D,CAAC;IAErE,IAAI,WAAW,MAAM;QACnB,KAAA,MAAW,CAAC,KAAK,KAAK,CAAA,IAAK,OAAO,OAAA,CAAQ,OAAO,EAAG;YAClD,eAAA,CAAgB,GAAG,CAAA,GAAI;QACzB;IACF;IAEA,IAAI,eAAA,CAAgB,cAAc,CAAA,IAAK,MAAM;QAC3C,eAAA,CAAgB,cAAc,CAAA,GAAI;IACpC;IAEA,IAAI,sBAAsB,KAAA,GAAW;QACnC,eAAA,CAAgB,yBAAyB,CAAA,GAAI;IAC/C;IAEA,OAAO;AACT;;ACnBO,SAAS,sBAAsB,EACpC,QAAA,EACA,MAAA,EACA,UAAA,EACA,OAAA,EACA,MAAA,EACF,EAMS;IACP,SAAS,SAAA,CAAU,UAAA,OAAA,SAAU,KAAK,YAAY,OAAO;IAErD,MAAM,SAAS,OAAO,SAAA,CAAU;IAChC,MAAM,OAAO,YAAY;QACvB,IAAI;YACF,MAAO,KAAM;gBACX,MAAM,EAAE,IAAA,EAAM,KAAA,CAAM,CAAA,GAAI,MAAM,OAAO,IAAA,CAAK;gBAC1C,IAAI,MAAM;gBACV,SAAS,KAAA,CAAM,KAAK;YACtB;QACF,EAAA,OAAS,OAAO;YACd,MAAM;QACR,SAAE;YACA,SAAS,GAAA,CAAI;QACf;IACF;IAEA,KAAK;AACP;;AC9BO,SAAS,yBACd,QAAA,EACA,EACE,MAAA,EACA,UAAA,EACA,OAAA,EACA,OAAA,EACA,OAAA,EACF,EAIM;IACN,sBAAsB;QACpB;QACA;QACA;QACA,SAAS,2BAA2B,SAAS;YAC3C,aAAa;YACb,mBAAmB;QACrB,CAAC;QACD,QAAQ,iBAAiB;YAAE;YAAS;QAAQ,CAAC,EAAE,WAAA,CAC7C,IAAI,kBAAkB;IAE1B,CAAC;AACH;;AC7BA,IAAM,OAAO;AACb,IAAM,SAAS,CAAA,gBAAA,EAAmB,IAAI,EAAA;AACtC,IAAM,SAAS,OAAO,GAAA,CAAI,MAAM;AAJhC,IAAA;AAMO,IAAM,uBAAN,0KAAmC,aAAA,CAAW;IAMnD,YAAY,EACV,SAAA,EACA,KAAA,EACA,OAAA,EACF,CAIG;QACD,KAAA,CAAM;YACJ;YACA,SAAS,CAAA,+BAAA,EAAkC,SAAS,CAAA,EAAA,EAAK,OAAO,EAAA;QAClE,CAAC;QAjBH,IAAA,CAAkB,GAAA,GAAU;QAmB1B,IAAA,CAAK,SAAA,GAAY;QACjB,IAAA,CAAK,KAAA,GAAQ;IACf;IAEA,OAAO,WAAW,KAAA,EAA+C;QAC/D,kKAAO,cAAA,CAAW,SAAA,CAAU,OAAO,MAAM;IAC3C;AACF;AA1BoB,KAAA;;;;AELpB,IAAMK,QAAO;AACb,IAAMC,UAAS,CAAA,gBAAA,EAAmBD,KAAI,EAAA;AACtC,IAAME,UAAS,OAAO,GAAA,CAAID,OAAM;AAJhC,IAAAE;AAWO,IAAM,aAAN,yKAAyBJ,cAAAA,CAAW;IAQzC,YAAY,EACV,OAAA,EACA,MAAA,EACA,MAAA,EACF,CAIG;QACD,KAAA,CAAM;YAAE,MAAAC;YAAM;QAAQ,CAAC;QAhBzB,IAAA,CAAkBG,IAAAA,GAAU;QAkB1B,IAAA,CAAK,MAAA,GAAS;QACd,IAAA,CAAK,MAAA,GAAS;QAGd,IAAA,CAAK,SAAA,GAAY,MAAA,CAAO,OAAO,MAAA,GAAS,CAAC,CAAA;IAC3C;IAEA,OAAO,WAAW,KAAA,EAAqC;QACrD,mKAAOJ,aAAAA,CAAW,SAAA,CAAU,OAAOE,OAAM;IAC3C;AACF;AA5BoBE,MAAAD;;ADAb,IAAM,8BACX,CAAC,EACC,aAAa,CAAA,EACb,mBAAmB,GAAA,EACnB,gBAAgB,CAAA,EAClB,GAAI,CAAC,CAAA,GACL,OAAe,IACb,6BAA6B,GAAG;YAC9B;YACA,WAAW;YACX;QACF,CAAC;AAEL,eAAe,6BACb,CAAA,EACA,EACE,UAAA,EACA,SAAA,EACA,aAAA,EACF,EACA,SAAoB,CAAC,CAAA,EACJ;IACjB,IAAI;QACF,OAAO,MAAM,EAAE;IACjB,EAAA,OAAS,OAAO;QACd,6KAAI,eAAA,EAAa,KAAK,GAAG;YACvB,MAAM;QACR;QAEA,IAAI,eAAe,GAAG;YACpB,MAAM;QACR;QAEA,MAAM,wLAAe,kBAAA,EAAgB,KAAK;QAC1C,MAAM,YAAY,CAAC;eAAG;YAAQ,KAAK;SAAA;QACnC,MAAM,YAAY,UAAU,MAAA;QAE5B,IAAI,YAAY,YAAY;YAC1B,MAAM,IAAI,WAAW;gBACnB,SAAS,CAAA,aAAA,EAAgB,SAAS,CAAA,uBAAA,EAA0B,YAAY,EAAA;gBACxE,QAAQ;gBACR,QAAQ;YACV,CAAC;QACH;QAEA,IACE,iBAAiB,qKACjB,eAAA,CAAa,UAAA,CAAW,KAAK,KAC7B,MAAM,WAAA,KAAgB,QACtB,aAAa,YACb;YACA,OAAM,gLAAA,EAAM,SAAS;YACrB,OAAO,6BACL,GACA;gBAAE;gBAAY,WAAW,gBAAgB;gBAAW;YAAc,GAClE;QAEJ;QAEA,IAAI,cAAc,GAAG;YACnB,MAAM;QACR;QAEA,MAAM,IAAI,WAAW;YACnB,SAAS,CAAA,aAAA,EAAgB,SAAS,CAAA,qCAAA,EAAwC,YAAY,CAAA,CAAA,CAAA;YACtF,QAAQ;YACR,QAAQ;QACV,CAAC;IACH;AACF;;AExEO,SAAS,eAAe,EAC7B,UAAA,EACF,EAKE;IACA,IAAI,cAAc,MAAM;QACtB,IAAI,CAAC,OAAO,SAAA,CAAU,UAAU,GAAG;YACjC,MAAM,IAAI,qBAAqB;gBAC7B,WAAW;gBACX,OAAO;gBACP,SAAS;YACX,CAAC;QACH;QAEA,IAAI,aAAa,GAAG;YAClB,MAAM,IAAI,qBAAqB;gBAC7B,WAAW;gBACX,OAAO;gBACP,SAAS;YACX,CAAC;QACH;IACF;IAEA,MAAM,mBAAmB,cAAA,OAAA,aAAc;IAEvC,OAAO;QACL,YAAY;QACZ,OAAO,4BAA4B;YAAE,YAAY;QAAiB,CAAC;IACrE;AACF;;ACvCO,SAAS,sBAAsB,EACpC,WAAA,EACA,SAAA,EACF,EAGG;IACD,OAAO;QAAA,4CAAA;QAEL,kBAAkB,GAAG,WAAW,GAAA,CAC9B,aAAA,OAAA,KAAA,IAAA,UAAW,UAAA,KAAc,OAAO,CAAA,CAAA,EAAI,UAAU,UAAU,EAAA,GAAK,EAC/D,EAAA;QACA,iBAAiB,aAAA,OAAA,KAAA,IAAA,UAAW,UAAA;QAAA,kCAAA;QAG5B,kBAAkB;QAClB,2BAA2B,aAAA,OAAA,KAAA,IAAA,UAAW,UAAA;IACxC;AACF;;AChBO,SAAS,2BAA2B,EACzC,KAAA,EACA,QAAA,EACA,SAAA,EACA,OAAA,EACF,EAKe;IAdf,IAAAE;IAeE,OAAO;QACL,qBAAqB,MAAM,QAAA;QAC3B,eAAe,MAAM,OAAA;QAAA,YAAA;QAGrB,GAAG,OAAO,OAAA,CAAQ,QAAQ,EAAE,MAAA,CAAO,CAAC,YAAY,CAAC,KAAK,KAAK,CAAA,KAAM;YAC/D,UAAA,CAAW,CAAA,YAAA,EAAe,GAAG,EAAE,CAAA,GAAI;YACnC,OAAO;QACT,GAAG,CAAC,CAAe,CAAA;QAAA,8BAAA;QAGnB,GAAG,OAAO,OAAA,CAAA,CAAQA,OAAA,aAAA,OAAA,KAAA,IAAA,UAAW,QAAA,KAAX,OAAAA,OAAuB,CAAC,CAAC,EAAE,MAAA,CAC3C,CAAC,YAAY,CAAC,KAAK,KAAK,CAAA,KAAM;YAC5B,UAAA,CAAW,CAAA,sBAAA,EAAyB,GAAG,EAAE,CAAA,GAAI;YAC7C,OAAO;QACT,GACA,CAAC,EACH;QAAA,kBAAA;QAGA,GAAG,OAAO,OAAA,CAAQ,WAAA,OAAA,UAAW,CAAC,CAAC,EAAE,MAAA,CAAO,CAAC,YAAY,CAAC,KAAK,KAAK,CAAA,KAAM;YACpE,IAAI,UAAU,KAAA,GAAW;gBACvB,UAAA,CAAW,CAAA,mBAAA,EAAsB,GAAG,EAAE,CAAA,GAAI;YAC5C;YACA,OAAO;QACT,GAAG,CAAC,CAAe,CAAA;IACrB;AACF;;;AErCO,IAAM,aAAqB;IAChC,YAAkB;QAChB,OAAO;IACT;IAEA,iBACEC,MAAAA,EACA,IAAA,EACA,IAAA,EACA,IAAA,EACiB;QACjB,IAAI,OAAO,SAAS,YAAY;YAC9B,OAAO,KAAK,QAAQ;QACtB;QACA,IAAI,OAAO,SAAS,YAAY;YAC9B,OAAO,KAAK,QAAQ;QACtB;QACA,IAAI,OAAO,SAAS,YAAY;YAC9B,OAAO,KAAK,QAAQ;QACtB;IACF;AACF;AAEA,IAAM,WAAiB;IACrB,cAAc;QACZ,OAAO;IACT;IACA,eAAe;QACb,OAAO,IAAA;IACT;IACA,gBAAgB;QACd,OAAO,IAAA;IACT;IACA,WAAW;QACT,OAAO,IAAA;IACT;IACA,UAAU;QACR,OAAO,IAAA;IACT;IACA,WAAW;QACT,OAAO,IAAA;IACT;IACA,YAAY;QACV,OAAO,IAAA;IACT;IACA,aAAa;QACX,OAAO,IAAA;IACT;IACA,MAAM;QACJ,OAAO,IAAA;IACT;IACA,cAAc;QACZ,OAAO;IACT;IACA,kBAAkB;QAChB,OAAO,IAAA;IACT;AACF;AAEA,IAAM,kBAA+B;IACnC,SAAS;IACT,QAAQ;IACR,YAAY;AACd;;ADjEO,SAAS,UAAU,EACxB,YAAY,KAAA,EACZ,MAAA,EACF,GAGI,CAAC,CAAA,EAAW;IACd,IAAI,CAAC,WAAW;QACd,OAAO;IACT;IAEA,IAAI,QAAQ;QACV,OAAO;IACT;IAEA,6IAAO,QAAA,CAAM,SAAA,CAAU,IAAI;AAC7B;;AEjBO,SAAS,WAAc,EAC5B,MAAAC,MAAAA,EACA,MAAA,EACA,UAAA,EACA,EAAA,EACA,cAAc,IAAA,EAChB,EAMG;IACD,OAAO,OAAO,eAAA,CAAgBA,QAAM;QAAE;IAAW,GAAG,OAAM,SAAQ;QAChE,IAAI;YACF,MAAM,SAAS,MAAM,GAAG,IAAI;YAE5B,IAAI,aAAa;gBACf,KAAK,GAAA,CAAI;YACX;YAEA,OAAO;QACT,EAAA,OAAS,OAAO;YACd,IAAI;gBACF,IAAI,iBAAiB,OAAO;oBAC1B,KAAK,eAAA,CAAgB;wBACnB,MAAM,MAAM,IAAA;wBACZ,SAAS,MAAM,OAAA;wBACf,OAAO,MAAM,KAAA;oBACf,CAAC;oBACD,KAAK,SAAA,CAAU;wBACb,MAAM,uJAAA,CAAe,KAAA;wBACrB,SAAS,MAAM,OAAA;oBACjB,CAAC;gBACH,OAAO;oBACL,KAAK,SAAA,CAAU;wBAAE,4IAAM,iBAAA,CAAe,KAAA;oBAAM,CAAC;gBAC/C;YACF,SAAE;gBAEA,KAAK,GAAA,CAAI;YACX;YAEA,MAAM;QACR;IACF,CAAC;AACH;;AC5CO,SAAS,0BAA0B,EACxC,SAAA,EACA,UAAA,EACF,EASe;IAEb,IAAA,CAAI,aAAA,OAAA,KAAA,IAAA,UAAW,SAAA,MAAc,MAAM;QACjC,OAAO,CAAC;IACV;IAEA,OAAO,OAAO,OAAA,CAAQ,UAAU,EAAE,MAAA,CAAO,CAACC,aAAY,CAAC,KAAK,KAAK,CAAA,KAAM;QACrE,IAAI,UAAU,KAAA,GAAW;YACvB,OAAOA;QACT;QAGA,IACE,OAAO,UAAU,YACjB,WAAW,SACX,OAAO,MAAM,KAAA,KAAU,YACvB;YAEA,IAAA,CAAI,aAAA,OAAA,KAAA,IAAA,UAAW,YAAA,MAAiB,OAAO;gBACrC,OAAOA;YACT;YAEA,MAAM,SAAS,MAAM,KAAA,CAAM;YAE3B,OAAO,WAAW,KAAA,IACdA,cACA;gBAAE,GAAGA,WAAAA;gBAAY,CAAC,GAAG,CAAA,EAAG;YAAO;QACrC;QAGA,IACE,OAAO,UAAU,YACjB,YAAY,SACZ,OAAO,MAAM,MAAA,KAAW,YACxB;YAEA,IAAA,CAAI,aAAA,OAAA,KAAA,IAAA,UAAW,aAAA,MAAkB,OAAO;gBACtC,OAAOA;YACT;YAEA,MAAM,SAAS,MAAM,MAAA,CAAO;YAE5B,OAAO,WAAW,KAAA,IACdA,cACA;gBAAE,GAAGA,WAAAA;gBAAY,CAAC,GAAG,CAAA,EAAG;YAAO;QACrC;QAGA,OAAO;YAAE,GAAGA,WAAAA;YAAY,CAAC,GAAG,CAAA,EAAG;QAAM;IACvC,GAAG,CAAC,CAAC;AACP;;AC3CA,eAAsB,MAAa,EACjC,KAAA,EACA,KAAA,EACA,YAAY,aAAA,EACZ,WAAA,EACA,OAAA,EACA,wBAAwB,SAAA,EAC1B,EAiCgC;IAC9B,MAAM,EAAE,UAAA,EAAY,KAAA,CAAM,CAAA,GAAI,eAAe;QAAE,YAAY;IAAc,CAAC;IAE1E,MAAM,0BAA0B,2BAA2B;QACzD;QACA;QACA;QACA,UAAU;YAAE;QAAW;IACzB,CAAC;IAED,MAAM,SAAS,UAAU,SAAS;IAElC,OAAO,WAAW;QAChB,MAAM;QACN,YAAY,0BAA0B;YACpC;YACA,YAAY;gBACV,GAAG,sBAAsB;oBAAE,aAAa;oBAAY;gBAAU,CAAC,CAAA;gBAC/D,GAAG,uBAAA;gBACH,YAAY;oBAAE,OAAO,IAAM,KAAK,SAAA,CAAU,KAAK;gBAAE;YACnD;QACF,CAAC;QACD;QACA,IAAI,OAAM,SAAQ;YAChB,MAAM,EAAE,SAAA,EAAW,KAAA,EAAO,WAAA,CAAY,CAAA,GAAI,MAAM,MAAM,IAAA,2DAAA;gBAEpD,WAAW;oBACT,MAAM;oBACN,YAAY,0BAA0B;wBACpC;wBACA,YAAY;4BACV,GAAG,sBAAsB;gCACvB,aAAa;gCACb;4BACF,CAAC,CAAA;4BACD,GAAG,uBAAA;4BAAA,6DAAA;4BAEH,aAAa;gCAAE,OAAO,IAAM;wCAAC,KAAK,SAAA,CAAU,KAAK,CAAC;qCAAA;4BAAE;wBACtD;oBACF,CAAC;oBACD;oBACA,IAAI,OAAM,gBAAe;wBAvGnC,IAAAC;wBAwGY,MAAM,gBAAgB,MAAM,MAAM,OAAA,CAAQ;4BACxC,QAAQ;gCAAC,KAAK;6BAAA;4BACd;4BACA;wBACF,CAAC;wBAED,MAAMC,aAAY,cAAc,UAAA,CAAW,CAAC,CAAA;wBAC5C,MAAMC,SAAAA,CAAQF,OAAA,cAAc,KAAA,KAAd,OAAAA,OAAuB;4BAAE,QAAQ;wBAAI;wBAEnD,YAAY,aAAA,CACV,0BAA0B;4BACxB;4BACA,YAAY;gCACV,iBAAiB;oCACf,QAAQ,IACN,cAAc,UAAA,CAAW,GAAA,CAAI,CAAAC,aAC3B,KAAK,SAAA,CAAUA,UAAS;gCAE9B;gCACA,mBAAmBC,OAAM,MAAA;4BAC3B;wBACF,CAAC;wBAGH,OAAO;4BACL,WAAAD;4BACA,OAAAC;4BACA,aAAa,cAAc,WAAA;wBAC7B;oBACF;gBACF,CAAC;YAGH,KAAK,aAAA,CACH,0BAA0B;gBACxB;gBACA,YAAY;oBACV,gBAAgB;wBAAE,QAAQ,IAAM,KAAK,SAAA,CAAU,SAAS;oBAAE;oBAC1D,mBAAmB,MAAM,MAAA;gBAC3B;YACF,CAAC;YAGH,OAAO,IAAI,mBAAmB;gBAAE;gBAAO;gBAAW;gBAAO;YAAY,CAAC;QACxE;IACF,CAAC;AACH;AAEA,IAAM,qBAAN,MAA8D;IAM5D,YAAY,OAAA,CAKT;QACD,IAAA,CAAK,KAAA,GAAQ,QAAQ,KAAA;QACrB,IAAA,CAAK,SAAA,GAAY,QAAQ,SAAA;QACzB,IAAA,CAAK,KAAA,GAAQ,QAAQ,KAAA;QACrB,IAAA,CAAK,WAAA,GAAc,QAAQ,WAAA;IAC7B;AACF;;ACjKO,SAAS,WAAc,KAAA,EAAY,SAAA,EAA0B;IAClE,IAAI,aAAa,GAAG;QAClB,MAAM,IAAI,MAAM,kCAAkC;IACpD;IAEA,MAAM,SAAS,CAAC,CAAA;IAChB,IAAA,IAAS,IAAI,GAAG,IAAI,MAAM,MAAA,EAAQ,KAAK,UAAW;QAChD,OAAO,IAAA,CAAK,MAAM,KAAA,CAAM,GAAG,IAAI,SAAS,CAAC;IAC3C;IAEA,OAAO;AACT;;ACQA,eAAsB,UAAiB,EACrC,KAAA,EACA,MAAA,EACA,YAAY,aAAA,EACZ,WAAA,EACA,OAAA,EACA,wBAAwB,SAAA,EAC1B,EAiCoC;IAClC,MAAM,EAAE,UAAA,EAAY,KAAA,CAAM,CAAA,GAAI,eAAe;QAAE,YAAY;IAAc,CAAC;IAE1E,MAAM,0BAA0B,2BAA2B;QACzD;QACA;QACA;QACA,UAAU;YAAE;QAAW;IACzB,CAAC;IAED,MAAM,SAAS,UAAU,SAAS;IAElC,OAAO,WAAW;QAChB,MAAM;QACN,YAAY,0BAA0B;YACpC;YACA,YAAY;gBACV,GAAG,sBAAsB;oBAAE,aAAa;oBAAgB;gBAAU,CAAC,CAAA;gBACnE,GAAG,uBAAA;gBAAA,6DAAA;gBAEH,aAAa;oBACX,OAAO,IAAM,OAAO,GAAA,CAAI,CAAA,QAAS,KAAK,SAAA,CAAU,KAAK,CAAC;gBACxD;YACF;QACF,CAAC;QACD;QACA,IAAI,OAAM,SAAQ;YAChB,MAAM,uBAAuB,MAAM,oBAAA;YAInC,IAAI,wBAAwB,MAAM;gBAChC,MAAM,EAAE,YAAAC,WAAAA,EAAY,KAAA,CAAM,CAAA,GAAI,MAAM,MAAM,MAAM;oBAE9C,OAAO,WAAW;wBAChB,MAAM;wBACN,YAAY,0BAA0B;4BACpC;4BACA,YAAY;gCACV,GAAG,sBAAsB;oCACvB,aAAa;oCACb;gCACF,CAAC,CAAA;gCACD,GAAG,uBAAA;gCAAA,6DAAA;gCAEH,aAAa;oCACX,OAAO,IAAM,OAAO,GAAA,CAAI,CAAA,QAAS,KAAK,SAAA,CAAU,KAAK,CAAC;gCACxD;4BACF;wBACF,CAAC;wBACD;wBACA,IAAI,OAAM,gBAAe;4BAtHrC,IAAAC;4BAuHc,MAAM,gBAAgB,MAAM,MAAM,OAAA,CAAQ;gCACxC;gCACA;gCACA;4BACF,CAAC;4BAED,MAAMD,cAAa,cAAc,UAAA;4BACjC,MAAME,SAAAA,CAAQD,OAAA,cAAc,KAAA,KAAd,OAAAA,OAAuB;gCAAE,QAAQ;4BAAI;4BAEnD,YAAY,aAAA,CACV,0BAA0B;gCACxB;gCACA,YAAY;oCACV,iBAAiB;wCACf,QAAQ,IACND,YAAW,GAAA,CAAI,CAAA,YAAa,KAAK,SAAA,CAAU,SAAS,CAAC;oCACzD;oCACA,mBAAmBE,OAAM,MAAA;gCAC3B;4BACF,CAAC;4BAGH,OAAO;gCAAE,YAAAF;gCAAY,OAAAE;4BAAM;wBAC7B;oBACF,CAAC;gBACH,CAAC;gBAED,KAAK,aAAA,CACH,0BAA0B;oBACxB;oBACA,YAAY;wBACV,iBAAiB;4BACf,QAAQ,IACNF,YAAW,GAAA,CAAI,CAAA,YAAa,KAAK,SAAA,CAAU,SAAS,CAAC;wBACzD;wBACA,mBAAmB,MAAM,MAAA;oBAC3B;gBACF,CAAC;gBAGH,OAAO,IAAI,uBAAuB;oBAAE;oBAAQ,YAAAA;oBAAY;gBAAM,CAAC;YACjE;YAGA,MAAM,cAAc,WAAW,QAAQ,oBAAoB;YAG3D,MAAM,aAA+B,CAAC,CAAA;YACtC,IAAI,SAAS;YAEb,KAAA,MAAW,SAAS,YAAa;gBAC/B,MAAM,EAAE,YAAY,kBAAA,EAAoB,KAAA,CAAM,CAAA,GAAI,MAAM,MAAM,MAAM;oBAElE,OAAO,WAAW;wBAChB,MAAM;wBACN,YAAY,0BAA0B;4BACpC;4BACA,YAAY;gCACV,GAAG,sBAAsB;oCACvB,aAAa;oCACb;gCACF,CAAC,CAAA;gCACD,GAAG,uBAAA;gCAAA,6DAAA;gCAEH,aAAa;oCACX,OAAO,IAAM,MAAM,GAAA,CAAI,CAAA,QAAS,KAAK,SAAA,CAAU,KAAK,CAAC;gCACvD;4BACF;wBACF,CAAC;wBACD;wBACA,IAAI,OAAM,gBAAe;4BA7LrC,IAAAC;4BA8Lc,MAAM,gBAAgB,MAAM,MAAM,OAAA,CAAQ;gCACxC,QAAQ;gCACR;gCACA;4BACF,CAAC;4BAED,MAAMD,cAAa,cAAc,UAAA;4BACjC,MAAME,SAAAA,CAAQD,OAAA,cAAc,KAAA,KAAd,OAAAA,OAAuB;gCAAE,QAAQ;4BAAI;4BAEnD,YAAY,aAAA,CACV,0BAA0B;gCACxB;gCACA,YAAY;oCACV,iBAAiB;wCACf,QAAQ,IACND,YAAW,GAAA,CAAI,CAAA,YAAa,KAAK,SAAA,CAAU,SAAS,CAAC;oCACzD;oCACA,mBAAmBE,OAAM,MAAA;gCAC3B;4BACF,CAAC;4BAGH,OAAO;gCAAE,YAAAF;gCAAY,OAAAE;4BAAM;wBAC7B;oBACF,CAAC;gBACH,CAAC;gBAED,WAAW,IAAA,CAAK,GAAG,kBAAkB;gBACrC,UAAU,MAAM,MAAA;YAClB;YAEA,KAAK,aAAA,CACH,0BAA0B;gBACxB;gBACA,YAAY;oBACV,iBAAiB;wBACf,QAAQ,IACN,WAAW,GAAA,CAAI,CAAA,YAAa,KAAK,SAAA,CAAU,SAAS,CAAC;oBACzD;oBACA,mBAAmB;gBACrB;YACF,CAAC;YAGH,OAAO,IAAI,uBAAuB;gBAChC;gBACA;gBACA,OAAO;oBAAE;gBAAO;YAClB,CAAC;QACH;IACF,CAAC;AACH;AAEA,IAAM,yBAAN,MAAsE;IAKpE,YAAY,OAAA,CAIT;QACD,IAAA,CAAK,MAAA,GAAS,QAAQ,MAAA;QACtB,IAAA,CAAK,UAAA,GAAa,QAAQ,UAAA;QAC1B,IAAA,CAAK,KAAA,GAAQ,QAAQ,KAAA;IACvB;AACF;;AC9PA,IAAME,QAAO;AACb,IAAMC,UAAS,CAAA,gBAAA,EAAmBD,KAAI,EAAA;AACtC,IAAME,UAAS,OAAO,GAAA,CAAID,OAAM;AALhC,IAAAE;AAaO,IAAM,wBAAN,0KAAoCJ,aAAAA,CAAW;IAQpD,YAAY,EACV,UAAU,qBAAA,EACV,KAAA,EACA,SAAA,EACF,CAIG;QACD,KAAA,CAAM;YAAE,MAAAC;YAAM;YAAS;QAAM,CAAC;QAhBhC,IAAA,CAAkBG,IAAAA,GAAU;QAkB1B,IAAA,CAAK,SAAA,GAAY;IACnB;IAEA,OAAO,WAAW,KAAA,EAAgD;QAChE,mKAAOJ,aAAAA,CAAW,SAAA,CAAU,OAAOE,OAAM;IAC3C;AACF;AAxBoBE,MAAAD;;ACWb,IAAM,uBAAN,MAAoD;IAMzD,YAAY,EACV,IAAA,EACA,QAAA,EACF,CAGG;QACD,MAAM,eAAe,gBAAgB;QACrC,IAAA,CAAK,UAAA,GAAa,eAAe,KAAA,IAAY;QAC7C,IAAA,CAAK,cAAA,GAAiB,eAAe,OAAO,KAAA;QAC5C,IAAA,CAAK,QAAA,GAAW;IAClB;IAAA,yEAAA;IAGA,IAAI,SAAS;QACX,IAAI,IAAA,CAAK,UAAA,IAAc,MAAM;YAC3B,IAAA,CAAK,UAAA,4KAAa,4BAAA,EAA0B,IAAA,CAAK,cAAe;QAClE;QACA,OAAO,IAAA,CAAK,UAAA;IACd;IAAA,yEAAA;IAGA,IAAI,aAAa;QACf,IAAI,IAAA,CAAK,cAAA,IAAkB,MAAM;YAC/B,IAAA,CAAK,cAAA,OAAiB,iMAAA,EAA0B,IAAA,CAAK,UAAW;QAClE;QACA,OAAO,IAAA,CAAK,cAAA;IACd;AACF;AAEO,IAAM,+BAAN,cAA2C,qBAAqB;IAGrE,YAAY,OAAA,CAA0D;QACpE,KAAA,CAAM,OAAO;QAHf,IAAA,CAAS,IAAA,GAAO;IAIhB;AACF;;ACjEO,IAAM,0BAA0B;IACrC;QACE,UAAU;QACV,aAAa;YAAC;YAAM;YAAM,EAAI;SAAA;QAC9B,cAAc;IAChB;IACA;QACE,UAAU;QACV,aAAa;YAAC;YAAM;YAAM;YAAM,EAAI;SAAA;QACpC,cAAc;IAChB;IACA;QACE,UAAU;QACV,aAAa;YAAC;YAAM,GAAI;SAAA;QACxB,cAAc;IAChB;IACA;QACE,UAAU;QACV,aAAa;YAAC;YAAM;YAAM;YAAM,EAAI;SAAA;QACpC,cAAc;IAChB;IACA;QACE,UAAU;QACV,aAAa;YAAC;YAAM,EAAI;SAAA;QACxB,cAAc;IAChB;IACA;QACE,UAAU;QACV,aAAa;YAAC;YAAM;YAAM;YAAM,CAAI;SAAA;QACpC,cAAc;IAChB;IACA;QACE,UAAU;QACV,aAAa;YAAC;YAAM;YAAM;YAAM,EAAI;SAAA;QACpC,cAAc;IAChB;IACA;QACE,UAAU;QACV,aAAa;YACX;YAAM;YAAM;YAAM;YAAM;YAAM;YAAM;YAAM;YAAM;YAAM;YAAM;YAAM;SACpE;QACA,cAAc;IAChB;IACA;QACE,UAAU;QACV,aAAa;YACX;YAAM;YAAM;YAAM;YAAM;YAAM;YAAM;YAAM;YAAM;YAAM;YAAM;YAAM;SACpE;QACA,cAAc;IAChB;CACF;AAEO,IAAM,0BAA0B;IACrC;QACE,UAAU;QACV,aAAa;YAAC;YAAM,GAAI;SAAA;QACxB,cAAc;IAChB;IACA;QACE,UAAU;QACV,aAAa;YAAC;YAAM;YAAM;YAAM,EAAI;SAAA;QACpC,cAAc;IAChB;IACA;QACE,UAAU;QACV,aAAa;YAAC;YAAM;YAAM;YAAM,EAAI;SAAA;QACpC,cAAc;IAChB;IACA;QACE,UAAU;QACV,aAAa;YAAC;YAAM;YAAM;YAAM,EAAI;SAAA;QACpC,cAAc;IAChB;IACA;QACE,UAAU;QACV,aAAa;YAAC;YAAM;YAAM;YAAM,CAAI;SAAA;QACpC,cAAc;IAChB;IACA;QACE,UAAU;QACV,aAAa;YAAC;YAAM;YAAM;YAAM,GAAI;SAAA;QACpC,cAAc;IAChB;CACF;AAEA,IAAM,WAAW,CAAC,SAA8B;IAC9C,MAAM,QACJ,OAAO,SAAS,oLAAWE,4BAAAA,EAA0B,IAAI,IAAI;IAC/D,MAAM,UAAA,CACF,KAAA,CAAM,CAAC,CAAA,GAAI,GAAA,KAAS,KAAA,CACpB,KAAA,CAAM,CAAC,CAAA,GAAI,GAAA,KAAS,KAAA,CACpB,KAAA,CAAM,CAAC,CAAA,GAAI,GAAA,KAAS,IACrB,KAAA,CAAM,CAAC,CAAA,GAAI;IAGd,OAAO,MAAM,KAAA,CAAM,UAAU,EAAE;AACjC;AAEA,SAAS,sBAAsB,IAAA,EAAgD;IAC7E,MAAM,SACH,OAAO,SAAS,YAAY,KAAK,UAAA,CAAW,MAAM,KAClD,OAAO,SAAS,YACf,KAAK,MAAA,GAAS,MACd,IAAA,CAAK,CAAC,CAAA,KAAM,MAAA,MAAA;IACZ,IAAA,CAAK,CAAC,CAAA,KAAM,MAAA,MAAA;IACZ,IAAA,CAAK,CAAC,CAAA,KAAM;IAEhB,OAAO,SAAS,SAAS,IAAI,IAAI;AACnC;AAEO,SAAS,eAAe,EAC7B,IAAA,EACA,UAAA,EACF,EAGwD;IACtD,MAAM,gBAAgB,sBAAsB,IAAI;IAEhD,KAAA,MAAW,aAAa,WAAY;QAClC,IACE,OAAO,kBAAkB,WACrB,cAAc,UAAA,CAAW,UAAU,YAAY,IAC/C,cAAc,MAAA,IAAU,UAAU,WAAA,CAAY,MAAA,IAC9C,UAAU,WAAA,CAAY,KAAA,CACpB,CAAC,MAAM,QAAU,aAAA,CAAc,KAAK,CAAA,KAAM,OAEhD;YACA,OAAO,UAAU,QAAA;QACnB;IACF;IAEA,OAAO,KAAA;AACT;;ACvGA,eAAsB,cAAc,EAClC,KAAA,EACA,MAAA,EACA,IAAI,CAAA,EACJ,IAAA,EACA,WAAA,EACA,IAAA,EACA,eAAA,EACA,YAAY,aAAA,EACZ,WAAA,EACA,OAAA,EACF,EAgEiC;IA3GjC,IAAAC;IA4GE,MAAM,EAAE,KAAA,CAAM,CAAA,GAAI,eAAe;QAAE,YAAY;IAAc,CAAC;IAI9D,MAAM,mBAAA,CAAmBA,OAAA,MAAM,gBAAA,KAAN,OAAAA,OAA0B;IAGnD,MAAM,YAAY,KAAK,IAAA,CAAK,IAAI,gBAAgB;IAChD,MAAM,kBAAkB,MAAM,IAAA,CAAK;QAAE,QAAQ;IAAU,GAAG,CAAC,GAAG,MAAM;QAClE,IAAI,IAAI,YAAY,GAAG;YACrB,OAAO;QACT;QAEA,MAAM,YAAY,IAAI;QACtB,OAAO,cAAc,IAAI,mBAAmB;IAC9C,CAAC;IACD,MAAM,UAAU,MAAM,QAAQ,GAAA,CAC5B,gBAAgB,GAAA,CAAI,OAAM,iBACxB,MAAM,IACJ,MAAM,UAAA,CAAW;gBACf;gBACA,GAAG;gBACH;gBACA;gBACA;gBACA;gBACA;gBACA,iBAAiB,mBAAA,OAAA,kBAAmB,CAAC;YACvC,CAAC;IAMP,MAAM,SAAsC,CAAC,CAAA;IAC7C,MAAM,WAA0C,CAAC,CAAA;IACjD,MAAM,YAA+C,CAAC,CAAA;IACtD,KAAA,MAAW,UAAU,QAAS;QAC5B,OAAO,IAAA,IACF,OAAO,MAAA,CAAO,GAAA,CACf,CAAA,UAAM;YApJd,IAAAA;YAqJU,OAAA,IAAI,qBAAqB;gBACvB,MAAM;gBACN,UAAA,CACEA,OAAA,eAAe;oBACb,MAAM;oBACN,YAAY;gBACd,CAAC,CAAA,KAHD,OAAAA,OAGM;YACV,CAAC;QAAA;QAGP,SAAS,IAAA,CAAK,GAAG,OAAO,QAAQ;QAChC,UAAU,IAAA,CAAK,OAAO,QAAQ;IAChC;IAEA,IAAI,CAAC,OAAO,MAAA,EAAQ;QAClB,MAAM,IAAI,sBAAsB;YAAE;QAAU,CAAC;IAC/C;IAEA,OAAO,IAAI,2BAA2B;QAAE;QAAQ;QAAU;IAAU,CAAC;AACvE;AAEA,IAAM,6BAAN,MAAgE;IAK9D,YAAY,OAAA,CAIT;QACD,IAAA,CAAK,MAAA,GAAS,QAAQ,MAAA;QACtB,IAAA,CAAK,QAAA,GAAW,QAAQ,QAAA;QACxB,IAAA,CAAK,SAAA,GAAY,QAAQ,SAAA;IAC3B;IAEA,IAAI,QAAQ;QACV,OAAO,IAAA,CAAK,MAAA,CAAO,CAAC,CAAA;IACtB;AACF;;;;AEvLA,IAAMG,QAAO;AACb,IAAMC,UAAS,CAAA,gBAAA,EAAmBD,KAAI,EAAA;AACtC,IAAME,UAAS,OAAO,GAAA,CAAID,OAAM;AAPhC,IAAAE;AAoBO,IAAM,yBAAN,0KAAqCJ,aAAAA,CAAW;IAuBrD,YAAY,EACV,UAAU,sBAAA,EACV,KAAA,EACA,MAAAK,KAAAA,EACA,QAAA,EACA,KAAA,EACA,YAAA,EACF,CAOG;QACD,KAAA,CAAM;YAAE,MAAAJ;YAAM;YAAS;QAAM,CAAC;QArChC,IAAA,CAAkBG,IAAAA,GAAU;QAuC1B,IAAA,CAAK,IAAA,GAAOC;QACZ,IAAA,CAAK,QAAA,GAAW;QAChB,IAAA,CAAK,KAAA,GAAQ;QACb,IAAA,CAAK,YAAA,GAAe;IACtB;IAEA,OAAO,WAAW,KAAA,EAAiD;QACjE,mKAAOL,aAAAA,CAAW,SAAA,CAAU,OAAOE,OAAM;IAC3C;AACF;AAhDoBE,MAAAD;;ACnBpB,IAAMI,QAAO;AACb,IAAMC,UAAS,CAAA,gBAAA,EAAmBD,KAAI,EAAA;AACtC,IAAME,UAAS,OAAO,GAAA,CAAID,OAAM;AAJhC,IAAAE;AAMO,IAAM,gBAAN,0KAA4BJ,aAAAA,CAAW;IAO5C,YAAY,EACV,GAAA,EACA,UAAA,EACA,UAAA,EACA,KAAA,EACA,UAAU,SAAS,OACf,CAAA,mBAAA,EAAsB,GAAG,CAAA,EAAA,EAAK,UAAU,CAAA,CAAA,EAAI,UAAU,EAAA,GACtD,CAAA,mBAAA,EAAsB,GAAG,CAAA,EAAA,EAAK,KAAK,EAAA,EACzC,CAMG;QACD,KAAA,CAAM;YAAE,MAAAC;YAAM;YAAS;QAAM,CAAC;QArBhC,IAAA,CAAkBG,IAAAA,GAAU;QAuB1B,IAAA,CAAK,GAAA,GAAM;QACX,IAAA,CAAK,UAAA,GAAa;QAClB,IAAA,CAAK,UAAA,GAAa;IACpB;IAEA,OAAO,WAAW,KAAA,EAAwC;QACxD,mKAAOJ,aAAAA,CAAW,SAAA,CAAU,OAAOE,OAAM;IAC3C;AACF;AA/BoBE,MAAAD;;ACLpB,eAAsB,SAAS,EAAE,GAAA,CAAI,CAAA,EAGlC;IALH,IAAAE;IAME,MAAM,UAAU,IAAI,QAAA,CAAS;IAC7B,IAAI;QACF,MAAM,WAAW,MAAM,MAAM,OAAO;QAEpC,IAAI,CAAC,SAAS,EAAA,EAAI;YAChB,MAAM,IAAI,cAAc;gBACtB,KAAK;gBACL,YAAY,SAAS,MAAA;gBACrB,YAAY,SAAS,UAAA;YACvB,CAAC;QACH;QAEA,OAAO;YACL,MAAM,IAAI,WAAW,MAAM,SAAS,WAAA,CAAY,CAAC;YACjD,UAAA,CAAUA,OAAA,SAAS,OAAA,CAAQ,GAAA,CAAI,cAAc,CAAA,KAAnC,OAAAA,OAAwC,KAAA;QACpD;IACF,EAAA,OAAS,OAAO;QACd,IAAI,cAAc,UAAA,CAAW,KAAK,GAAG;YACnC,MAAM;QACR;QAEA,MAAM,IAAI,cAAc;YAAE,KAAK;YAAS,OAAO;QAAM,CAAC;IACxD;AACF;;;AE3BA,IAAMI,QAAO;AACb,IAAMC,UAAS,CAAA,gBAAA,EAAmBD,KAAI,EAAA;AACtC,IAAME,UAAS,OAAO,GAAA,CAAID,OAAM;AAJhC,IAAAE;AAMO,IAAM,0BAAN,0KAAsCJ,aAAAA,CAAW;IAKtD,YAAY,EACV,OAAA,EACA,KAAA,EACA,UAAU,CAAA,4FAAA,EAA+F,OAAO,OAAO,CAAA,CAAA,CAAA,EACzH,CAIG;QACD,KAAA,CAAM;YAAE,MAAAC;YAAM;YAAS;QAAM,CAAC;QAbhC,IAAA,CAAkBG,IAAAA,GAAU;QAe1B,IAAA,CAAK,OAAA,GAAU;IACjB;IAEA,OAAO,WAAW,KAAA,EAAkD;QAClE,mKAAOJ,aAAAA,CAAW,SAAA,CAAU,OAAOE,OAAM;IAC3C;AACF;AArBoBE,MAAAD;;ADQb,IAAM,wMAA4C,IAAA,CAAE,KAAA,CAAM;wLAC/D,IAAA,CAAE,MAAA,CAAO;wLACT,IAAA,CAAE,UAAA,CAAW,UAAU;wLACvB,IAAA,CAAE,UAAA,CAAW,WAAW;IACxB,wLAAA,CAAE,MAAA,CAAA,yEAAA;IAEA,CAAC,UAAiC;QArBtC,IAAAE,MAAA;QAsBM,OAAA,CAAA,KAAA,CAAAA,OAAA,WAAW,MAAA,KAAX,OAAA,KAAA,IAAAA,KAAmB,QAAA,CAAS,MAAA,KAA5B,OAAA,KAAsC;IAAA,GACxC;QAAE,SAAS;IAAmB;CAEjC;AAQM,SAAS,iCAAiC,OAAA,EAA8B;IAC7E,IAAI,OAAO,YAAY,UAAU;QAC/B,OAAO;IACT;IAEA,IAAI,mBAAmB,aAAa;QAClC,gLAAOC,4BAAAA,EAA0B,IAAI,WAAW,OAAO,CAAC;IAC1D;IAEA,gLAAOA,4BAAAA,EAA0B,OAAO;AAC1C;AAQO,SAAS,+BACd,OAAA,EACY;IACZ,IAAI,mBAAmB,YAAY;QACjC,OAAO;IACT;IAEA,IAAI,OAAO,YAAY,UAAU;QAC/B,IAAI;YACF,gLAAOC,4BAAAA,EAA0B,OAAO;QAC1C,EAAA,OAAS,OAAO;YACd,MAAM,IAAI,wBAAwB;gBAChC,SACE;gBACF;gBACA,OAAO;YACT,CAAC;QACH;IACF;IAEA,IAAI,mBAAmB,aAAa;QAClC,OAAO,IAAI,WAAW,OAAO;IAC/B;IAEA,MAAM,IAAI,wBAAwB;QAAE;IAAQ,CAAC;AAC/C;AAQO,SAAS,wBAAwB,UAAA,EAAgC;IACtE,IAAI;QACF,OAAO,IAAI,YAAY,EAAE,MAAA,CAAO,UAAU;IAC5C,EAAA,OAAS,OAAO;QACd,MAAM,IAAI,MAAM,mCAAmC;IACrD;AACF;;AExFA,IAAME,QAAO;AACb,IAAMC,UAAS,CAAA,gBAAA,EAAmBD,KAAI,EAAA;AACtC,IAAME,UAAS,OAAO,GAAA,CAAID,OAAM;AAJhC,IAAAE;AAMO,IAAM,0BAAN,0KAAsCJ,aAAAA,CAAW;IAKtD,YAAY,EACV,IAAA,EACA,UAAU,CAAA,uBAAA,EAA0B,IAAI,CAAA,yDAAA,CAAA,EAC1C,CAGG;QACD,KAAA,CAAM;YAAE,MAAAC;YAAM;QAAQ,CAAC;QAXzB,IAAA,CAAkBG,IAAAA,GAAU;QAa1B,IAAA,CAAK,IAAA,GAAO;IACd;IAEA,OAAO,WAAW,KAAA,EAAkD;QAClE,mKAAOJ,aAAAA,CAAW,SAAA,CAAU,OAAOE,OAAM;IAC3C;AACF;AAnBoBE,MAAAD;;ACPb,SAAS,aAAa,OAAA,EAG3B;IACA,IAAI;QACF,MAAM,CAAC,QAAQ,aAAa,CAAA,GAAI,QAAQ,KAAA,CAAM,GAAG;QACjD,OAAO;YACL,UAAU,OAAO,KAAA,CAAM,GAAG,CAAA,CAAE,CAAC,CAAA,CAAE,KAAA,CAAM,GAAG,CAAA,CAAE,CAAC,CAAA;YAC3C;QACF;IACF,EAAA,OAAS,OAAO;QACd,OAAO;YACL,UAAU,KAAA;YACV,eAAe,KAAA;QACjB;IACF;AACF;;ACOA,eAAsB,6BAA6B,EACjD,MAAA,EACA,yBAAyB,IAAA,EACzB,mBAAmB,IAAM,KAAA,EACzB,yBAAyB,QAAA,EAC3B,EAKmC;IACjC,MAAM,mBAAmB,MAAM,eAC7B,OAAO,QAAA,EACP,wBACA,wBACA;IAGF,OAAO;WACD,OAAO,MAAA,IAAU,OACjB;YAAC;gBAAE,MAAM;gBAAmB,SAAS,OAAO,MAAA;YAAO,CAAC;SAAA,GACpD,CAAC,CAAA;WACF,OAAO,QAAA,CAAS,GAAA,CAAI,CAAA,UACrB,8BAA8B,SAAS,gBAAgB;KAE3D;AACF;AASO,SAAS,8BACd,OAAA,EACA,gBAAA,EAIwB;IAhE1B,IAAAE,MAAA,IAAA,IAAA,IAAA,IAAA;IAiEE,MAAM,OAAO,QAAQ,IAAA;IACrB,OAAQ,MAAM;QACZ,KAAK;YAAU;gBACb,OAAO;oBACL,MAAM;oBACN,SAAS,QAAQ,OAAA;oBACjB,kBAAA,CACEA,OAAA,QAAQ,eAAA,KAAR,OAAAA,OAA2B,QAAQ,6BAAA;gBACvC;YACF;QAEA,KAAK;YAAQ;gBACX,IAAI,OAAO,QAAQ,OAAA,KAAY,UAAU;oBACvC,OAAO;wBACL,MAAM;wBACN,SAAS;4BAAC;gCAAE,MAAM;gCAAQ,MAAM,QAAQ,OAAA;4BAAQ,CAAC;yBAAA;wBACjD,kBAAA,CACE,KAAA,QAAQ,eAAA,KAAR,OAAA,KAA2B,QAAQ,6BAAA;oBACvC;gBACF;gBAEA,OAAO;oBACL,MAAM;oBACN,SAAS,QAAQ,OAAA,CACd,GAAA,CAAI,CAAA,OAAQ,+BAA+B,MAAM,gBAAgB,CAAC,EAElE,MAAA,CAAO,CAAA,OAAQ,KAAK,IAAA,KAAS,UAAU,KAAK,IAAA,KAAS,EAAE;oBAC1D,kBAAA,CACE,KAAA,QAAQ,eAAA,KAAR,OAAA,KAA2B,QAAQ,6BAAA;gBACvC;YACF;QAEA,KAAK;YAAa;gBAChB,IAAI,OAAO,QAAQ,OAAA,KAAY,UAAU;oBACvC,OAAO;wBACL,MAAM;wBACN,SAAS;4BAAC;gCAAE,MAAM;gCAAQ,MAAM,QAAQ,OAAA;4BAAQ,CAAC;yBAAA;wBACjD,kBAAA,CACE,KAAA,QAAQ,eAAA,KAAR,OAAA,KAA2B,QAAQ,6BAAA;oBACvC;gBACF;gBAEA,OAAO;oBACL,MAAM;oBACN,SAAS,QAAQ,OAAA,CACd,MAAA,CAAA,2BAAA;oBAEC,CAAA,OAAQ,KAAK,IAAA,KAAS,UAAU,KAAK,IAAA,KAAS,IAE/C,GAAA,CAAI,CAAA,SAAQ;wBAlHvB,IAAAA;wBAmHY,MAAM,kBAAA,CACJA,OAAA,KAAK,eAAA,KAAL,OAAAA,OAAwB,KAAK,6BAAA;wBAE/B,OAAQ,KAAK,IAAA,EAAM;4BACjB,KAAK;gCAAQ;oCACX,OAAO;wCACL,MAAM;wCACN,MACE,KAAK,IAAA,YAAgB,MACjB,KAAK,IAAA,GACL,iCAAiC,KAAK,IAAI;wCAChD,UAAU,KAAK,QAAA;wCACf,UAAU,KAAK,QAAA;wCACf,kBAAkB;oCACpB;gCACF;4BACA,KAAK;gCAAa;oCAChB,OAAO;wCACL,MAAM;wCACN,MAAM,KAAK,IAAA;wCACX,WAAW,KAAK,SAAA;wCAChB,kBAAkB;oCACpB;gCACF;4BACA,KAAK;gCAAsB;oCACzB,OAAO;wCACL,MAAM;wCACN,MAAM,KAAK,IAAA;wCACX,kBAAkB;oCACpB;gCACF;4BACA,KAAK;gCAAQ;oCACX,OAAO;wCACL,MAAM;wCACN,MAAM,KAAK,IAAA;wCACX,kBAAkB;oCACpB;gCACF;4BACA,KAAK;gCAAa;oCAChB,OAAO;wCACL,MAAM;wCACN,YAAY,KAAK,UAAA;wCACjB,UAAU,KAAK,QAAA;wCACf,MAAM,KAAK,IAAA;wCACX,kBAAkB;oCACpB;gCACF;wBACF;oBACF,CAAC;oBACH,kBAAA,CACE,KAAA,QAAQ,eAAA,KAAR,OAAA,KAA2B,QAAQ,6BAAA;gBACvC;YACF;QAEA,KAAK;YAAQ;gBACX,OAAO;oBACL,MAAM;oBACN,SAAS,QAAQ,OAAA,CAAQ,GAAA,CAAI,CAAA,SAAK;wBA5K1C,IAAAA;wBA4K8C,OAAA;4BACpC,MAAM;4BACN,YAAY,KAAK,UAAA;4BACjB,UAAU,KAAK,QAAA;4BACf,QAAQ,KAAK,MAAA;4BACb,SAAS,KAAK,oBAAA;4BACd,SAAS,KAAK,OAAA;4BACd,kBAAA,CACEA,OAAA,KAAK,eAAA,KAAL,OAAAA,OAAwB,KAAK,6BAAA;wBACjC;oBAAA,CAAE;oBACF,kBAAA,CACE,KAAA,QAAQ,eAAA,KAAR,OAAA,KAA2B,QAAQ,6BAAA;gBACvC;YACF;QAEA;YAAS;gBACP,MAAM,mBAA0B;gBAChC,MAAM,IAAI,wBAAwB;oBAAE,MAAM;gBAAiB,CAAC;YAC9D;IACF;AACF;AAKA,eAAe,eACb,QAAA,EACA,sBAAA,EACA,sBAAA,EACA,gBAAA,EAC6E;IAC7E,MAAM,OAAO,SACV,MAAA,CAAO,CAAA,UAAW,QAAQ,IAAA,KAAS,MAAM,EACzC,GAAA,CAAI,CAAA,UAAW,QAAQ,OAAO,EAC9B,MAAA,CAAO,CAAC,UACP,MAAM,OAAA,CAAQ,OAAO,GAEtB,IAAA,CAAK,EACL,MAAA,CACC,CAAC,OACC,KAAK,IAAA,KAAS,WAAW,KAAK,IAAA,KAAS,QAM1C,MAAA,CACC,CAAC,OACC,CAAA,CAAE,KAAK,IAAA,KAAS,WAAW,2BAA2B,IAAA,GAEzD,GAAA,CAAI,CAAA,OAAS,KAAK,IAAA,KAAS,UAAU,KAAK,KAAA,GAAQ,KAAK,IAAK,EAC5D,GAAA,CAAI,CAAA,OAAA,uBAAA;QAEH,OAAO,SAAS,YAAA,CACf,KAAK,UAAA,CAAW,OAAO,KAAK,KAAK,UAAA,CAAW,QAAQ,CAAA,IACjD,IAAI,IAAI,IAAI,IACZ,MAEL,MAAA,CAAO,CAAC,QAAwB,iBAAiB,GAAG,EAIpD,MAAA,CAAO,CAAA,MAAO,CAAC,iBAAiB,GAAG,CAAC;IAGvC,MAAM,mBAAmB,MAAM,QAAQ,GAAA,CACrC,KAAK,GAAA,CAAI,OAAM,MAAA,CAAQ;YACrB;YACA,MAAM,MAAM,uBAAuB;gBAAE;YAAI,CAAC;QAC5C,CAAA,CAAE;IAGJ,OAAO,OAAO,WAAA,CACZ,iBAAiB,GAAA,CAAI,CAAC,EAAE,GAAA,EAAK,IAAA,CAAK,CAAA,GAAM;YAAC,IAAI,QAAA,CAAS;YAAG,IAAI;SAAC;AAElE;AAUA,SAAS,+BACP,IAAA,EACA,gBAAA,EAO0B;IA1Q5B,IAAAA,MAAA,IAAA,IAAA;IA2QE,IAAI,KAAK,IAAA,KAAS,QAAQ;QACxB,OAAO;YACL,MAAM;YACN,MAAM,KAAK,IAAA;YACX,kBAAA,CACEA,OAAA,KAAK,eAAA,KAAL,OAAAA,OAAwB,KAAK,6BAAA;QACjC;IACF;IAEA,IAAI,WAA+B,KAAK,QAAA;IACxC,IAAI;IACJ,IAAI;IACJ,IAAI;IAEJ,MAAM,OAAO,KAAK,IAAA;IAClB,OAAQ,MAAM;QACZ,KAAK;YACH,OAAO,KAAK,KAAA;YACZ;QACF,KAAK;YACH,OAAO,KAAK,IAAA;YACZ;QACF;YACE,MAAM,IAAI,MAAM,CAAA,uBAAA,EAA0B,IAAI,EAAE;IACpD;IAIA,IAAI;QACF,UAAU,OAAO,SAAS,WAAW,IAAI,IAAI,IAAI,IAAI;IACvD,EAAA,OAAS,OAAO;QACd,UAAU;IACZ;IAKA,IAAI,mBAAmB,KAAK;QAE1B,IAAI,QAAQ,QAAA,KAAa,SAAS;YAChC,MAAM,EAAE,UAAU,eAAA,EAAiB,aAAA,CAAc,CAAA,GAAI,aACnD,QAAQ,QAAA,CAAS;YAGnB,IAAI,mBAAmB,QAAQ,iBAAiB,MAAM;gBACpD,MAAM,IAAI,MAAM,CAAA,gCAAA,EAAmC,IAAI,EAAE;YAC3D;YAEA,WAAW;YACX,iBAAiB,+BAA+B,aAAa;QAC/D,OAAO;YAML,MAAM,iBAAiB,gBAAA,CAAiB,QAAQ,QAAA,CAAS,CAAC,CAAA;YAC1D,IAAI,gBAAgB;gBAClB,iBAAiB,eAAe,IAAA;gBAChC,YAAA,OAAA,WAAA,WAAa,eAAe,QAAA;YAC9B,OAAO;gBACL,iBAAiB;YACnB;QACF;IACF,OAAO;QAGL,iBAAiB,+BAA+B,OAAO;IACzD;IAIA,OAAQ,MAAM;QACZ,KAAK;YAAS;gBAKZ,IAAI,0BAA0B,YAAY;oBACxC,WAAA,CACE,KAAA,eAAe;wBACb,MAAM;wBACN,YAAY;oBACd,CAAC,CAAA,KAHD,OAAA,KAGM;gBACV;gBACA,OAAO;oBACL,MAAM;oBACN,OAAO;oBACP;oBACA,kBAAA,CACE,KAAA,KAAK,eAAA,KAAL,OAAA,KAAwB,KAAK,6BAAA;gBACjC;YACF;QAEA,KAAK;YAAQ;gBAEX,IAAI,YAAY,MAAM;oBACpB,MAAM,IAAI,MAAM,CAAA,kCAAA,CAAoC;gBACtD;gBAEA,OAAO;oBACL,MAAM;oBACN,MACE,0BAA0B,aACtB,iCAAiC,cAAc,IAC/C;oBACN,UAAU,KAAK,QAAA;oBACf;oBACA,kBAAA,CACE,KAAA,KAAK,eAAA,KAAL,OAAA,KAAwB,KAAK,6BAAA;gBACjC;YACF;IACF;AACF;;ACtXO,SAAS,oBAAoB,EAClC,SAAA,EACA,WAAA,EACA,IAAA,EACA,IAAA,EACA,eAAA,EACA,gBAAA,EACA,aAAA,EACA,IAAA,EACF,EAGE;IACA,IAAI,aAAa,MAAM;QACrB,IAAI,CAAC,OAAO,SAAA,CAAU,SAAS,GAAG;YAChC,MAAM,IAAI,qBAAqB;gBAC7B,WAAW;gBACX,OAAO;gBACP,SAAS;YACX,CAAC;QACH;QAEA,IAAI,YAAY,GAAG;YACjB,MAAM,IAAI,qBAAqB;gBAC7B,WAAW;gBACX,OAAO;gBACP,SAAS;YACX,CAAC;QACH;IACF;IAEA,IAAI,eAAe,MAAM;QACvB,IAAI,OAAO,gBAAgB,UAAU;YACnC,MAAM,IAAI,qBAAqB;gBAC7B,WAAW;gBACX,OAAO;gBACP,SAAS;YACX,CAAC;QACH;IACF;IAEA,IAAI,QAAQ,MAAM;QAChB,IAAI,OAAO,SAAS,UAAU;YAC5B,MAAM,IAAI,qBAAqB;gBAC7B,WAAW;gBACX,OAAO;gBACP,SAAS;YACX,CAAC;QACH;IACF;IAEA,IAAI,QAAQ,MAAM;QAChB,IAAI,OAAO,SAAS,UAAU;YAC5B,MAAM,IAAI,qBAAqB;gBAC7B,WAAW;gBACX,OAAO;gBACP,SAAS;YACX,CAAC;QACH;IACF;IAEA,IAAI,mBAAmB,MAAM;QAC3B,IAAI,OAAO,oBAAoB,UAAU;YACvC,MAAM,IAAI,qBAAqB;gBAC7B,WAAW;gBACX,OAAO;gBACP,SAAS;YACX,CAAC;QACH;IACF;IAEA,IAAI,oBAAoB,MAAM;QAC5B,IAAI,OAAO,qBAAqB,UAAU;YACxC,MAAM,IAAI,qBAAqB;gBAC7B,WAAW;gBACX,OAAO;gBACP,SAAS;YACX,CAAC;QACH;IACF;IAEA,IAAI,QAAQ,MAAM;QAChB,IAAI,CAAC,OAAO,SAAA,CAAU,IAAI,GAAG;YAC3B,MAAM,IAAI,qBAAqB;gBAC7B,WAAW;gBACX,OAAO;gBACP,SAAS;YACX,CAAC;QACH;IACF;IAEA,OAAO;QACL;QAAA,2CAAA;QAEA,aAAa,eAAA,OAAA,cAAe;QAC5B;QACA;QACA;QACA;QACA,eACE,iBAAiB,QAAQ,cAAc,MAAA,GAAS,IAC5C,gBACA,KAAA;QACN;IACF;AACF;;;;;AEjGO,SAAS,mBAAmB,WAAA,EAA0C;IAd7E,IAAAE,MAAA,IAAA;IAeE,MAAM,QAAuB,CAAC,CAAA;IAE9B,KAAA,MAAW,cAAc,YAAa;QACpC,IAAI;QAEJ,IAAI;YACF,MAAM,IAAI,IAAI,WAAW,GAAG;QAC9B,EAAA,OAAS,OAAO;YACd,MAAM,IAAI,MAAM,CAAA,aAAA,EAAgB,WAAW,GAAG,EAAE;QAClD;QAEA,OAAQ,IAAI,QAAA,EAAU;YACpB,KAAK;YACL,KAAK;gBAAU;oBACb,IAAA,CAAIA,OAAA,WAAW,WAAA,KAAX,OAAA,KAAA,IAAAA,KAAwB,UAAA,CAAW,WAAW;wBAChD,MAAM,IAAA,CAAK;4BAAE,MAAM;4BAAS,OAAO;wBAAI,CAAC;oBAC1C,OAAO;wBACL,IAAI,CAAC,WAAW,WAAA,EAAa;4BAC3B,MAAM,IAAI,MACR;wBAEJ;wBAEA,MAAM,IAAA,CAAK;4BACT,MAAM;4BACN,MAAM;4BACN,UAAU,WAAW,WAAA;wBACvB,CAAC;oBACH;oBACA;gBACF;YAEA,KAAK;gBAAS;oBACZ,IAAI;oBACJ,IAAI;oBACJ,IAAI;oBAEJ,IAAI;wBACF,CAAC,QAAQ,aAAa,CAAA,GAAI,WAAW,GAAA,CAAI,KAAA,CAAM,GAAG;wBAClD,WAAW,OAAO,KAAA,CAAM,GAAG,CAAA,CAAE,CAAC,CAAA,CAAE,KAAA,CAAM,GAAG,CAAA,CAAE,CAAC,CAAA;oBAC9C,EAAA,OAAS,OAAO;wBACd,MAAM,IAAI,MAAM,CAAA,2BAAA,EAA8B,WAAW,GAAG,EAAE;oBAChE;oBAEA,IAAI,YAAY,QAAQ,iBAAiB,MAAM;wBAC7C,MAAM,IAAI,MAAM,CAAA,yBAAA,EAA4B,WAAW,GAAG,EAAE;oBAC9D;oBAEA,IAAA,CAAI,KAAA,WAAW,WAAA,KAAX,OAAA,KAAA,IAAA,GAAwB,UAAA,CAAW,WAAW;wBAChD,MAAM,IAAA,CAAK;4BACT,MAAM;4BACN,OAAO,+BAA+B,aAAa;wBACrD,CAAC;oBACH,OAAA,IAAA,CAAW,KAAA,WAAW,WAAA,KAAX,OAAA,KAAA,IAAA,GAAwB,UAAA,CAAW,UAAU;wBACtD,MAAM,IAAA,CAAK;4BACT,MAAM;4BACN,MAAM,wBACJ,+BAA+B,aAAa;wBAEhD,CAAC;oBACH,OAAO;wBACL,IAAI,CAAC,WAAW,WAAA,EAAa;4BAC3B,MAAM,IAAI,MACR;wBAEJ;wBAEA,MAAM,IAAA,CAAK;4BACT,MAAM;4BACN,MAAM;4BACN,UAAU,WAAW,WAAA;wBACvB,CAAC;oBACH;oBAEA;gBACF;YAEA;gBAAS;oBACP,MAAM,IAAI,MAAM,CAAA,0BAAA,EAA6B,IAAI,QAAQ,EAAE;gBAC7D;QACF;IACF;IAEA,OAAO;AACT;;AChGA,IAAME,QAAO;AACb,IAAMC,UAAS,CAAA,gBAAA,EAAmBD,KAAI,EAAA;AACtC,IAAME,UAAS,OAAO,GAAA,CAAID,OAAM;AALhC,IAAAE;AAOO,IAAM,yBAAN,0KAAqCJ,aAAAA,CAAW;IAKrD,YAAY,EACV,eAAA,EACA,OAAA,EACF,CAGG;QACD,KAAA,CAAM;YAAE,MAAAC;YAAM;QAAQ,CAAC;QAXzB,IAAA,CAAkBG,IAAAA,GAAU;QAa1B,IAAA,CAAK,eAAA,GAAkB;IACzB;IAEA,OAAO,WAAW,KAAA,EAAiD;QACjE,OAAOJ,yKAAAA,CAAW,SAAA,CAAU,OAAOE,OAAM;IAC3C;AACF;AAnBoBE,MAAAD;;ACab,SAAS,sBACd,QAAA,EACA,OAAA,EACA;IAxBF,IAAAE,MAAA;IAyBE,MAAM,QAAA,CAAQA,OAAA,WAAA,OAAA,KAAA,IAAA,QAAS,KAAA,KAAT,OAAAA,OAAmB,CAAC;IAClC,MAAM,eAA8B,CAAC,CAAA;IAErC,IAAA,IAAS,IAAI,GAAG,IAAI,SAAS,MAAA,EAAQ,IAAK;QACxC,MAAM,UAAU,QAAA,CAAS,CAAC,CAAA;QAC1B,MAAM,gBAAgB,MAAM,SAAS,MAAA,GAAS;QAC9C,MAAM,EAAE,IAAA,EAAM,OAAA,EAAS,wBAAA,CAAyB,CAAA,GAAI;QAEpD,OAAQ,MAAM;YACZ,KAAK;gBAAU;oBACb,aAAa,IAAA,CAAK;wBAChB,MAAM;wBACN;oBACF,CAAC;oBACD;gBACF;YAEA,KAAK;gBAAQ;oBACX,IAAI,QAAQ,KAAA,IAAS,MAAM;wBACzB,aAAa,IAAA,CAAK;4BAChB,MAAM;4BACN,SAAS,2BACL;gCACE;oCAAE,MAAM;oCAAQ,MAAM;gCAAQ;mCAC3B,mBAAmB,wBAAwB;6BAChD,GACA;wBACN,CAAC;oBACH,OAAO;wBACL,MAAM,YAAY,QAAQ,KAAA,CACvB,MAAA,CAAO,CAAA,OAAQ,KAAK,IAAA,KAAS,MAAM,EACnC,GAAA,CAAI,CAAA,OAAA,CAAS;gCACZ,MAAM;gCACN,MAAM,KAAK,IAAA;4BACb,CAAA,CAAE;wBAEJ,aAAa,IAAA,CAAK;4BAChB,MAAM;4BACN,SAAS,2BACL,CAAC;mCAAG,WAAW;mCAAG,mBAAmB,wBAAwB,CAAC;6BAAA,GAC9D;wBACN,CAAC;oBACH;oBACA;gBACF;YAEA,KAAK;gBAAa;oBAChB,IAAI,QAAQ,KAAA,IAAS,MAAM;wBAOzB,IAASC,gBAAT,WAAwB;4BACtB,MAAMC,WAA4B,CAAC,CAAA;4BAEnC,KAAA,MAAW,QAAQ,MAAO;gCACxB,OAAQ,KAAK,IAAA,EAAM;oCACjB,KAAK;oCACL,KAAK;wCAAQ;4CACXA,SAAQ,IAAA,CAAK,IAAI;4CACjB;wCACF;oCACA,KAAK;wCAAa;4CAChB,KAAA,MAAW,UAAU,KAAK,OAAA,CAAS;gDACjC,OAAQ,OAAO,IAAA,EAAM;oDACnB,KAAK;wDACHA,SAAQ,IAAA,CAAK;4DACX,MAAM;4DACN,MAAM,OAAO,IAAA;4DACb,WAAW,OAAO,SAAA;wDACpB,CAAC;wDACD;oDACF,KAAK;wDACHA,SAAQ,IAAA,CAAK;4DACX,MAAM;4DACN,MAAM,OAAO,IAAA;wDACf,CAAC;wDACD;gDACJ;4CACF;4CACA;wCACF;oCACA,KAAK;wCACHA,SAAQ,IAAA,CAAK;4CACX,MAAM;4CACN,YAAY,KAAK,cAAA,CAAe,UAAA;4CAChC,UAAU,KAAK,cAAA,CAAe,QAAA;4CAC9B,MAAM,KAAK,cAAA,CAAe,IAAA;wCAC5B,CAAC;wCACD;oCACF;wCAAS;4CACP,MAAM,mBAA0B;4CAChC,MAAM,IAAI,MAAM,CAAA,kBAAA,EAAqB,gBAAgB,EAAE;wCACzD;gCACF;4BACF;4BAEA,aAAa,IAAA,CAAK;gCAChB,MAAM;gCACN,SAAAA;4BACF,CAAC;4BAGD,MAAM,kBAAkB,MACrB,MAAA,CACC,CACE,OAMA,KAAK,IAAA,KAAS,mBAEjB,GAAA,CAAI,CAAA,OAAQ,KAAK,cAAc;4BAGlC,IAAI,gBAAgB,MAAA,GAAS,GAAG;gCAC9B,aAAa,IAAA,CAAK;oCAChB,MAAM;oCACN,SAAS,gBAAgB,GAAA,CACvB,CAAC,mBAAmC;wCAClC,IAAI,CAAA,CAAE,YAAY,cAAA,GAAiB;4CACjC,MAAM,IAAI,uBAAuB;gDAC/B,iBAAiB;gDACjB,SACE,wCACA,KAAK,SAAA,CAAU,cAAc;4CACjC,CAAC;wCACH;wCAEA,MAAM,EAAE,UAAA,EAAY,QAAA,EAAU,MAAA,CAAO,CAAA,GAAI;wCAEzC,MAAMC,QAAO,KAAA,CAAM,QAAQ,CAAA;wCAC3B,OAAA,CAAOA,SAAA,OAAA,KAAA,IAAAA,MAAM,gCAAA,KAAoC,OAC7C;4CACE,MAAM;4CACN;4CACA;4CACA,QAAQA,MAAK,gCAAA,CAAiC,MAAM;4CACpD,sBACEA,MAAK,gCAAA,CAAiC,MAAM;wCAChD,IACA;4CACE,MAAM;4CACN;4CACA;4CACA;wCACF;oCACN;gCAEJ,CAAC;4BACH;4BAGA,QAAQ,CAAC,CAAA;4BACT,0BAA0B;4BAC1B;wBACF;wBA1GS,IAAA,eAAAF;wBANT,IAAI,cAAc;wBAClB,IAAI,0BAA0B;wBAC9B,IAAI,QAEA,CAAC,CAAA;wBA8GL,KAAA,MAAW,QAAQ,QAAQ,KAAA,CAAO;4BAChC,OAAQ,KAAK,IAAA,EAAM;gCACjB,KAAK;oCAAQ;wCACX,IAAI,yBAAyB;4CAC3BA,cAAa;wCACf;wCACA,MAAM,IAAA,CAAK,IAAI;wCACf;oCACF;gCACA,KAAK;gCACL,KAAK;oCAAa;wCAChB,MAAM,IAAA,CAAK,IAAI;wCACf;oCACF;gCACA,KAAK;oCAAmB;wCACtB,IAAA,CAAA,CAAK,KAAA,KAAK,cAAA,CAAe,IAAA,KAApB,OAAA,KAA4B,CAAA,MAAO,aAAa;4CACnDA,cAAa;wCACf;wCACA,MAAM,IAAA,CAAK,IAAI;wCACf,0BAA0B;wCAC1B;oCACF;4BACF;wBACF;wBAEAA,cAAa;wBAEb;oBACF;oBAEA,MAAM,kBAAkB,QAAQ,eAAA;oBAEhC,IAAI,mBAAmB,QAAQ,gBAAgB,MAAA,KAAW,GAAG;wBAC3D,aAAa,IAAA,CAAK;4BAAE,MAAM;4BAAa;wBAAQ,CAAC;wBAChD;oBACF;oBAEA,MAAM,UAAU,gBAAgB,MAAA,CAAO,CAAC,KAAK,mBAAmB;wBAhOxE,IAAAD;wBAiOU,OAAO,KAAK,GAAA,CAAI,KAAA,CAAKA,OAAA,eAAe,IAAA,KAAf,OAAAA,OAAuB,CAAC;oBAC/C,GAAG,CAAC;oBAEJ,IAAA,IAASI,KAAI,GAAGA,MAAK,SAASA,KAAK;wBACjC,MAAM,kBAAkB,gBAAgB,MAAA,CACtC,CAAA,mBAAe;4BAtO3B,IAAAJ;4BAsO+B,OAAA,CAAA,CAAAA,OAAA,eAAe,IAAA,KAAf,OAAAA,OAAuB,CAAA,MAAOI;wBAAA;wBAGnD,IAAI,gBAAgB,MAAA,KAAW,GAAG;4BAChC;wBACF;wBAGA,aAAa,IAAA,CAAK;4BAChB,MAAM;4BACN,SAAS;mCACH,iBAAiB,WAAWA,OAAM,IAClC;oCAAC;wCAAE,MAAM;wCAAiB,MAAM;oCAAQ,CAAC;iCAAA,GACzC,CAAC,CAAA;mCACF,gBAAgB,GAAA,CACjB,CAAC,EAAE,UAAA,EAAY,QAAA,EAAU,IAAA,CAAK,CAAA,GAAA,CAAqB;wCACjD,MAAM;wCACN;wCACA;wCACA;oCACF,CAAA;6BAEJ;wBACF,CAAC;wBAGD,aAAa,IAAA,CAAK;4BAChB,MAAM;4BACN,SAAS,gBAAgB,GAAA,CAAI,CAAC,mBAAmC;gCAC/D,IAAI,CAAA,CAAE,YAAY,cAAA,GAAiB;oCACjC,MAAM,IAAI,uBAAuB;wCAC/B,iBAAiB;wCACjB,SACE,wCACA,KAAK,SAAA,CAAU,cAAc;oCACjC,CAAC;gCACH;gCAEA,MAAM,EAAE,UAAA,EAAY,QAAA,EAAU,MAAA,CAAO,CAAA,GAAI;gCAEzC,MAAMD,QAAO,KAAA,CAAM,QAAQ,CAAA;gCAC3B,OAAA,CAAOA,SAAA,OAAA,KAAA,IAAAA,MAAM,gCAAA,KAAoC,OAC7C;oCACE,MAAM;oCACN;oCACA;oCACA,QAAQA,MAAK,gCAAA,CAAiC,MAAM;oCACpD,sBACEA,MAAK,gCAAA,CAAiC,MAAM;gCAChD,IACA;oCACE,MAAM;oCACN;oCACA;oCACA;gCACF;4BACN,CAAC;wBACH,CAAC;oBACH;oBAEA,IAAI,WAAW,CAAC,eAAe;wBAC7B,aAAa,IAAA,CAAK;4BAAE,MAAM;4BAAa;wBAAQ,CAAC;oBAClD;oBAEA;gBACF;YAEA,KAAK;gBAAQ;oBAEX;gBACF;YAEA;gBAAS;oBACP,MAAM,mBAA0B;oBAChC,MAAM,IAAI,uBAAuB;wBAC/B,iBAAiB;wBACjB,SAAS,CAAA,kBAAA,EAAqB,gBAAgB,EAAA;oBAChD,CAAC;gBACH;QACF;IACF;IAEA,OAAO;AACT;;;;AGtTO,IAAM,sMAAwCI,IAAAA,CAAE,IAAA,CAAK,wLAC1DA,IAAAA,CAAE,KAAA,CAAM;4LACNA,IAAAA,CAAE,IAAA,CAAK;4LACPA,IAAAA,CAAE,MAAA,CAAO;4LACTA,IAAAA,CAAE,MAAA,CAAO;4LACTA,IAAAA,CAAE,OAAA,CAAQ;4LACVA,IAAAA,CAAE,MAAA,qLAAOA,IAAAA,CAAE,MAAA,CAAO,GAAG,eAAe;2LACpCA,KAAAA,CAAE,KAAA,CAAM,eAAe;KACxB;;ADUI,IAAM,6MAAsDC,IAAAA,CAAE,MAAA,qLACnEA,IAAAA,CAAE,MAAA,CAAO,uLACTA,IAAAA,CAAE,MAAA,qLAAOA,IAAAA,CAAE,MAAA,CAAO,GAAG,eAAe;;;AGT/B,IAAM,8MAAwDE,IAAAA,CAAE,KAAA,qLACrEA,IAAAA,CAAE,KAAA,CAAM;IACNA,wLAAAA,CAAE,MAAA,CAAO;QAAE,0LAAMA,IAAAA,CAAE,OAAA,CAAQ,MAAM;QAAG,0LAAMA,IAAAA,CAAE,MAAA,CAAO;IAAE,CAAC;IACtDA,wLAAAA,CAAE,MAAA,CAAO;QACP,0LAAMA,IAAAA,CAAE,OAAA,CAAQ,OAAO;QACvB,0LAAMA,IAAAA,CAAE,MAAA,CAAO;QACf,UAAUA,wLAAAA,CAAE,MAAA,CAAO,EAAE,QAAA,CAAS;IAChC,CAAC;CACF;;ADiBI,IAAM,qMAAsCC,IAAAA,CAAE,MAAA,CAAO;IAC1D,0LAAMA,IAAAA,CAAE,OAAA,CAAQ,MAAM;IACtB,0LAAMA,IAAAA,CAAE,MAAA,CAAO;IACf,iBAAiB,uBAAuB,QAAA,CAAS;IACjD,+BAA+B,uBAAuB,QAAA,CAAS;AACjE,CAAC;AAqCM,IAAM,sMAAwCA,IAAAA,CAAE,MAAA,CAAO;IAC5D,0LAAMA,IAAAA,CAAE,OAAA,CAAQ,OAAO;IACvB,OAAOA,wLAAAA,CAAE,KAAA,CAAM;QAAC;4LAAmBA,IAAAA,CAAE,UAAA,CAAW,GAAG,CAAC;KAAC;IACrD,8LAAUA,IAAAA,CAAE,MAAA,CAAO,EAAE,QAAA,CAAS;IAC9B,iBAAiB,uBAAuB,QAAA,CAAS;IACjD,+BAA+B,uBAAuB,QAAA,CAAS;AACjE,CAAC;AA0CM,IAAM,oMAAsCA,KAAAA,CAAE,MAAA,CAAO;IAC1D,0LAAMA,IAAAA,CAAE,OAAA,CAAQ,MAAM;IACtB,0LAAMA,IAAAA,CAAE,KAAA,CAAM;QAAC;4LAAmBA,IAAAA,CAAE,UAAA,CAAW,GAAG,CAAC;KAAC;IACpD,8LAAUA,IAAAA,CAAE,MAAA,CAAO,EAAE,QAAA,CAAS;IAC9B,8LAAUA,IAAAA,CAAE,MAAA,CAAO;IACnB,iBAAiB,uBAAuB,QAAA,CAAS;IACjD,+BAA+B,uBAAuB,QAAA,CAAS;AACjE,CAAC;AAkCM,IAAM,0MAAgDA,IAAAA,CAAE,MAAA,CAAO;IACpE,0LAAMA,IAAAA,CAAE,OAAA,CAAQ,WAAW;IAC3B,MAAMA,wLAAAA,CAAE,MAAA,CAAO;IACf,iBAAiB,uBAAuB,QAAA,CAAS;IACjD,+BAA+B,uBAAuB,QAAA,CAAS;AACjE,CAAC;AA6BM,IAAM,kNACXA,IAAAA,CAAE,MAAA,CAAO;IACP,0LAAMA,IAAAA,CAAE,OAAA,CAAQ,oBAAoB;IACpC,0LAAMA,IAAAA,CAAE,MAAA,CAAO;IACf,iBAAiB,uBAAuB,QAAA,CAAS;IACjD,+BAA+B,uBAAuB,QAAA,CAAS;AACjE,CAAC;AAuCI,IAAM,yMAA8CA,IAAAA,CAAE,MAAA,CAAO;IAClE,0LAAMA,IAAAA,CAAE,OAAA,CAAQ,WAAW;IAC3B,gMAAYA,IAAAA,CAAE,MAAA,CAAO;IACrB,8LAAUA,IAAAA,CAAE,MAAA,CAAO;IACnB,0LAAMA,IAAAA,CAAE,OAAA,CAAQ;IAChB,iBAAiB,uBAAuB,QAAA,CAAS;IACjD,+BAA+B,uBAAuB,QAAA,CAAS;AACjE,CAAC;AAiDM,IAAM,2MAAkDA,IAAAA,CAAE,MAAA,CAAO;IACtE,MAAMA,wLAAAA,CAAE,OAAA,CAAQ,aAAa;IAC7B,gMAAYA,IAAAA,CAAE,MAAA,CAAO;IACrB,8LAAUA,IAAAA,CAAE,MAAA,CAAO;IACnB,2LAAQA,KAAAA,CAAE,OAAA,CAAQ;IAClB,SAAS,wBAAwB,QAAA,CAAS;IAC1C,4LAASA,KAAAA,CAAE,OAAA,CAAQ,EAAE,QAAA,CAAS;IAC9B,iBAAiB,uBAAuB,QAAA,CAAS;IACjD,+BAA+B,uBAAuB,QAAA,CAAS;AACjE,CAAC;;AH3QM,IAAM,8MAAwDC,IAAAA,CAAE,MAAA,CAAO;IAC5E,0LAAMA,IAAAA,CAAE,OAAA,CAAQ,QAAQ;IACxB,6LAASA,IAAAA,CAAE,MAAA,CAAO;IAClB,iBAAiB,uBAAuB,QAAA,CAAS;IACjD,+BAA+B,uBAAuB,QAAA,CAAS;AACjE,CAAC;AAsBM,IAAM,4MAAoDA,IAAAA,CAAE,MAAA,CAAO;IACxE,0LAAMA,IAAAA,CAAE,OAAA,CAAQ,MAAM;IACtB,6LAASA,IAAAA,CAAE,KAAA,CAAM;4LACfA,IAAAA,CAAE,MAAA,CAAO;4LACTA,IAAAA,CAAE,KAAA,qLAAMA,IAAAA,CAAE,KAAA,CAAM;YAAC;YAAgB;YAAiB,cAAc;SAAC,CAAC;KACnE;IACD,iBAAiB,uBAAuB,QAAA,CAAS;IACjD,+BAA+B,uBAAuB,QAAA,CAAS;AACjE,CAAC;AA2BM,IAAM,iNACXA,IAAAA,CAAE,MAAA,CAAO;IACP,0LAAMA,IAAAA,CAAE,OAAA,CAAQ,WAAW;IAC3B,6LAASA,IAAAA,CAAE,KAAA,CAAM;4LACfA,IAAAA,CAAE,MAAA,CAAO;4LACTA,IAAAA,CAAE,KAAA,qLACAA,IAAAA,CAAE,KAAA,CAAM;YACN;YACA;YACA;YACA;YACA;SACD;KAEJ;IACD,iBAAiB,uBAAuB,QAAA,CAAS;IACjD,+BAA+B,uBAAuB,QAAA,CAAS;AACjE,CAAC;AAgCI,IAAM,4MAAoDA,IAAAA,CAAE,MAAA,CAAO;IACxE,0LAAMA,IAAAA,CAAE,OAAA,CAAQ,MAAM;IACtB,6LAASA,IAAAA,CAAE,KAAA,CAAM,oBAAoB;IACrC,iBAAiB,uBAAuB,QAAA,CAAS;IACjD,+BAA+B,uBAAuB,QAAA,CAAS;AACjE,CAAC;AAiBM,IAAM,oBAA4CA,wLAAAA,CAAE,KAAA,CAAM;IAC/D;IACA;IACA;IACA;CACD;;AJ9JM,SAAS,kBAAyC,EACvD,MAAA,EACA,KAAA,EACF,EAGuB;IACrB,IAAI,OAAO,MAAA,IAAU,QAAQ,OAAO,QAAA,IAAY,MAAM;QACpD,MAAM,+JAAI,sBAAA,CAAmB;YAC3B;YACA,SAAS;QACX,CAAC;IACH;IAEA,IAAI,OAAO,MAAA,IAAU,QAAQ,OAAO,QAAA,IAAY,MAAM;QACpD,MAAM,gKAAI,qBAAA,CAAmB;YAC3B;YACA,SAAS;QACX,CAAC;IACH;IAGA,IAAI,OAAO,MAAA,IAAU,QAAQ,OAAO,OAAO,MAAA,KAAW,UAAU;QAC9D,MAAM,gKAAI,qBAAA,CAAmB;YAC3B;YACA,SAAS;QACX,CAAC;IACH;IAGA,IAAI,OAAO,MAAA,IAAU,MAAM;QAEzB,IAAI,OAAO,OAAO,MAAA,KAAW,UAAU;YACrC,MAAM,gKAAI,qBAAA,CAAmB;gBAC3B;gBACA,SAAS;YACX,CAAC;QACH;QAEA,OAAO;YACL,MAAM;YACN,QAAQ,OAAO,MAAA;YACf,UAAU;gBACR;oBACE,MAAM;oBACN,SAAS,OAAO,MAAA;gBAClB;aACF;QACF;IACF;IAGA,IAAI,OAAO,QAAA,IAAY,MAAM;QAC3B,MAAM,aAAa,iBAAiB,OAAO,QAAQ;QAEnD,MAAM,WACJ,eAAe,gBACX,sBAAsB,OAAO,QAAA,EAAmC;YAC9D;QACF,CAAC,IACA,OAAO,QAAA;QAEd,IAAI,SAAS,MAAA,KAAW,GAAG;YACzB,MAAM,gKAAI,qBAAA,CAAmB;gBAC3B;gBACA,SAAS;YACX,CAAC;QACH;QAEA,MAAM,4LAAmB,oBAAA,EAAkB;YACzC,OAAO;YACP,QAAQC,wLAAAA,CAAE,KAAA,CAAM,iBAAiB;QACnC,CAAC;QAED,IAAI,CAAC,iBAAiB,OAAA,EAAS;YAC7B,MAAM,gKAAI,qBAAA,CAAmB;gBAC3B;gBACA,SAAS;oBACP;oBACA,CAAA,kBAAA,EAAqB,iBAAiB,KAAA,CAAM,OAAO,EAAA;iBACrD,CAAE,IAAA,CAAK,IAAI;gBACX,OAAO,iBAAiB,KAAA;YAC1B,CAAC;QACH;QAEA,OAAO;YACL,MAAM;YACN;YACA,QAAQ,OAAO,MAAA;QACjB;IACF;IAEA,MAAM,IAAI,MAAM,aAAa;AAC/B;AAEA,SAAS,iBACP,MAAA,EACsC;IACtC,IAAI,CAAC,MAAM,OAAA,CAAQ,MAAM,GAAG;QAC1B,MAAM,gKAAI,qBAAA,CAAmB;YAC3B;YACA,SAAS;gBACP;gBACA,CAAA,0BAAA,EAA6B,KAAK,SAAA,CAAU,MAAM,CAAC,EAAA;aACrD,CAAE,IAAA,CAAK,IAAI;YACX,OAAO;QACT,CAAC;IACH;IAEA,IAAI,OAAO,MAAA,KAAW,GAAG;QACvB,OAAO;IACT;IAEA,MAAM,kBAAkB,OAAO,GAAA,CAAI,kCAAkC;IAErE,IAAI,gBAAgB,IAAA,CAAK,CAAA,IAAK,MAAM,uBAAuB,GAAG;QAC5D,OAAO;IACT;IAEA,MAAM,kBAAkB,gBAAgB,SAAA,CACtC,CAAA,IAAK,MAAM,6BAA6B,MAAM;IAGhD,IAAI,oBAAoB,CAAA,GAAI;QAC1B,OAAO;IACT;IAEA,MAAM,gKAAI,qBAAA,CAAmB;QAC3B;QACA,SAAS;YACP;YACA,CAAA,2BAAA,EAA8B,eAAA,CAAgB,eAAe,CAAC,CAAA,WAAA,EAAc,eAAe,EAAA;YAC3F,CAAA,SAAA,EAAY,eAAe,CAAA,GAAA,EAAM,KAAK,SAAA,CAAU,MAAA,CAAO,eAAe,CAAC,CAAC,EAAA;SAC1E,CAAE,IAAA,CAAK,IAAI;QACX,OAAO;IACT,CAAC;AACH;AAEA,SAAS,mCACP,OAAA,EAC2E;IAC3E,IACE,OAAO,YAAY,YACnB,YAAY,QAAA,CACX,QAAQ,IAAA,KAAS,cAAA,eAAA;IAChB,QAAQ,IAAA,KAAS,UAAA,eAAA;IACjB,qBAAqB,WAAA,oBAAA;IACrB,WAAW,WAAA,oBAAA;IACX,8BAA8B,OAAA,GAChC;QACA,OAAO;IACT,OAAA,IACE,OAAO,YAAY,YACnB,YAAY,QACZ,aAAa,WAAA,CACZ,MAAM,OAAA,CAAQ,QAAQ,OAAO,KAAA,uCAAA;IAC5B,mCAAmC,WACnC,qBAAqB,OAAA,GACvB;QACA,OAAO;IACT,OAAA,IACE,OAAO,YAAY,YACnB,YAAY,QACZ,UAAU,WACV,aAAa,WACb,OAAO,QAAQ,OAAA,KAAY,YAC3B;QAAC;QAAU;QAAQ;QAAa,MAAM;KAAA,CAAE,QAAA,CAAS,QAAQ,IAAI,GAC7D;QACA,OAAO;IACT,OAAO;QACL,OAAO;IACT;AACF;;ASzKO,SAAS,4BAA4B,EAC1C,YAAA,EACA,gBAAA,EACF,EAGuB;IACrB,OAAO;QACL;QACA;QACA,aAAa,eAAe;IAC9B;AACF;AAEO,SAAS,sBACd,MAAA,EACA,MAAA,EACoB;IACpB,OAAO;QACL,cAAc,OAAO,YAAA,GAAe,OAAO,YAAA;QAC3C,kBAAkB,OAAO,gBAAA,GAAmB,OAAO,gBAAA;QACnD,aAAa,OAAO,WAAA,GAAc,OAAO,WAAA;IAC3C;AACF;;ACnDA,IAAM,wBAAwB;AAC9B,IAAM,wBACJ;AACF,IAAM,yBAAyB;AAExB,SAAS,sBAAsB,EACpC,MAAA,EACA,MAAA,EACA,eAAe,UAAU,OAAO,wBAAwB,KAAA,CAAA,EACxD,eAAe,UAAU,OACrB,wBACA,sBAAA,EACN,EAKW;IACT,OAAO;QACL,UAAU,QAAQ,OAAO,MAAA,GAAS,IAAI,SAAS,KAAA;QAC/C,UAAU,QAAQ,OAAO,MAAA,GAAS,IAAI,KAAK,KAAA;QAAA,sCAAA;QAC3C;QACA,UAAU,OAAO,KAAK,SAAA,CAAU,MAAM,IAAI,KAAA;QAC1C;KACF,CACG,MAAA,CAAO,CAAA,OAAQ,QAAQ,IAAI,EAC3B,IAAA,CAAK,IAAI;AACd;;;;;AE3BO,SAAS,0BACd,MAAA,EACwB;IACxB,MAAM,SAAS,OAAO,WAAA,CAAY,IAAI,gBAAsB,CAAC;IAE5D,MAAA,CAAkC,OAAO,aAAa,CAAA,GAAI,MAAM;QAC/D,MAAM,SAAS,OAAO,SAAA,CAAU;QAChC,OAAO;YACL,MAAM,OAAmC;gBACvC,MAAM,EAAE,IAAA,EAAM,KAAA,CAAM,CAAA,GAAI,MAAM,OAAO,IAAA,CAAK;gBAC1C,OAAO,OAAO;oBAAE,MAAM;oBAAM,OAAO,KAAA;gBAAU,IAAI;oBAAE,MAAM;oBAAO;gBAAM;YACxE;QACF;IACF;IAEA,OAAO;AACT;;ADsCA,IAAM,yBAAsE;IAC1E,MAAM;IACN,YAAY,KAAA;IAEZ,uBAAsB,EAAE,KAAA,EAAO,SAAA,CAAU,CAAA,EAAG;QAC1C,OAAO;YAAE,SAAS;YAAM,OAAO;gBAAE,SAAS;gBAAO;YAAU;QAAE;IAC/D;IAEA,qBACE,KAAA,EACA,OAAA,EAM6B;QAC7B,OAAO,UAAU,KAAA,IACb;YACE,SAAS;YACT,OAAO,IAAI,uBAAuB;gBAChC,SAAS;gBACT,MAAM,QAAQ,IAAA;gBACd,UAAU,QAAQ,QAAA;gBAClB,OAAO,QAAQ,KAAA;gBACf,cAAc,QAAQ,YAAA;YACxB,CAAC;QACH,IACA;YAAE,SAAS;YAAM;QAAM;IAC7B;IAEA,sBAAsB;QACpB,MAAM,gKAAI,gCAAA,CAA8B;YACtC,eAAe;QACjB,CAAC;IACH;AACF;AAEA,IAAM,uBAAuB,CAC3B,SAAA,CACwD;QACxD,MAAM;QACN,YAAY,OAAO,UAAA;QAEnB,uBAAsB,EAAE,KAAA,EAAO,SAAA,CAAU,CAAA,EAAG;YAC1C,OAAO;gBACL,SAAS;gBACT,OAAO;oBAAA,oDAAA;oBAEL,SAAS;oBACT;gBACF;YACF;QACF;QAEA,qBAAoB,KAAA,EAAwD;YAC1E,gLAAOE,oBAAAA,EAAkB;gBAAE;gBAAO;YAAO,CAAC;QAC5C;QAEA,sBAAsB;YACpB,MAAM,IAAI,4LAAA,CAA8B;gBACtC,eAAe;YACjB,CAAC;QACH;IACF,CAAA;AAEA,IAAM,sBAAsB,CAC1B,WACuE;IAEvE,MAAM,EAAE,OAAA,EAAS,GAAG,WAAW,CAAA,GAAI,OAAO,UAAA;IAE1C,OAAO;QACL,MAAM;QAAA,2EAAA;QAAA,yCAAA;QAAA,kGAAA;QAKN,YAAY;YACV,SAAS;YACT,MAAM;YACN,YAAY;gBACV,UAAU;oBAAE,MAAM;oBAAS,OAAO;gBAAW;YAC/C;YACA,UAAU;gBAAC,UAAU;aAAA;YACrB,sBAAsB;QACxB;QAEA,uBAAsB,EAAE,KAAA,EAAO,YAAA,EAAc,YAAA,EAAc,YAAA,CAAa,CAAA,EAAG;YAhJ/E,IAAAC;YAkJM,IAAI,iKAAC,eAAA,EAAa,KAAK,KAAK,iKAAC,cAAA,EAAY,MAAM,QAAQ,GAAG;gBACxD,OAAO;oBACL,SAAS;oBACT,OAAO,gKAAI,sBAAA,CAAoB;wBAC7B;wBACA,OAAO;oBACT,CAAC;gBACH;YACF;YAEA,MAAM,aAAa,MAAM,QAAA;YACzB,MAAM,cAA8B,CAAC,CAAA;YAErC,IAAA,IAAS,IAAI,GAAG,IAAI,WAAW,MAAA,EAAQ,IAAK;gBAC1C,MAAM,UAAU,UAAA,CAAW,CAAC,CAAA;gBAC5B,MAAM,kLAASD,oBAAAA,EAAkB;oBAAE,OAAO;oBAAS;gBAAO,CAAC;gBAM3D,IAAI,MAAM,WAAW,MAAA,GAAS,KAAK,CAAC,cAAc;oBAChD;gBACF;gBAEA,IAAI,CAAC,OAAO,OAAA,EAAS;oBACnB,OAAO;gBACT;gBAEA,YAAY,IAAA,CAAK,OAAO,KAAK;YAC/B;YAGA,MAAM,wBAAA,CAAwBC,OAAA,gBAAA,OAAA,KAAA,IAAA,aAAc,MAAA,KAAd,OAAAA,OAAwB;YAEtD,IAAI,YAAY;YAEhB,IAAI,cAAc;gBAChB,aAAa;YACf;YAEA,IAAI,wBAAwB,GAAG;gBAC7B,aAAa;YACf;YAEA,aAAa,YACV,KAAA,CAAM,qBAAqB,EAC3B,GAAA,CAAI,CAAA,UAAW,KAAK,SAAA,CAAU,OAAO,CAAC,EACtC,IAAA,CAAK,GAAG;YAEX,IAAI,cAAc;gBAChB,aAAa;YACf;YAEA,OAAO;gBACL,SAAS;gBACT,OAAO;oBACL,SAAS;oBACT;gBACF;YACF;QACF;QAEA,qBACE,KAAA,EACkC;YAElC,IAAI,iKAAC,eAAA,EAAa,KAAK,KAAK,EAAC,6KAAA,EAAY,MAAM,QAAQ,GAAG;gBACxD,OAAO;oBACL,SAAS;oBACT,OAAO,gKAAI,sBAAA,CAAoB;wBAC7B;wBACA,OAAO;oBACT,CAAC;gBACH;YACF;YAEA,MAAM,aAAa,MAAM,QAAA;YAGzB,KAAA,MAAW,WAAW,WAAY;gBAChC,MAAM,kLAASD,oBAAAA,EAAkB;oBAAE,OAAO;oBAAS;gBAAO,CAAC;gBAC3D,IAAI,CAAC,OAAO,OAAA,EAAS;oBACnB,OAAO;gBACT;YACF;YAEA,OAAO;gBAAE,SAAS;gBAAM,OAAO;YAA6B;QAC9D;QAEA,qBACE,cAAA,EACA;YACA,IAAI,oBAAoB;YAExB,OAAO,0BACL,eAAe,WAAA,CACb,IAAI,gBAAsD;gBACxD,WAAU,KAAA,EAAO,UAAA,EAAY;oBAC3B,OAAQ,MAAM,IAAA,EAAM;wBAClB,KAAK;4BAAU;gCACb,MAAM,QAAQ,MAAM,MAAA;gCAGpB,MAEE,oBAAoB,MAAM,MAAA,EAC1B,oBACA;oCACA,WAAW,OAAA,CAAQ,KAAA,CAAM,iBAAiB,CAAC;gCAC7C;gCAEA;4BACF;wBAEA,KAAK;wBACL,KAAK;wBACL,KAAK;4BACH;wBAEF;4BAAS;gCACP,MAAM,mBAA0B;gCAChC,MAAM,IAAI,MACR,CAAA,wBAAA,EAA2B,gBAAgB,EAAA;4BAE/C;oBACF;gBACF;YACF,CAAC;QAGP;IACF;AACF;AAEA,IAAM,qBAAqB,CACzB,eACsC;IACtC,OAAO;QACL,MAAM;QAAA,gEAAA;QAAA,8CAAA;QAAA,uFAAA;QAKN,YAAY;YACV,SAAS;YACT,MAAM;YACN,YAAY;gBACV,QAAQ;oBAAE,MAAM;oBAAU,MAAM;gBAAW;YAC7C;YACA,UAAU;gBAAC,QAAQ;aAAA;YACnB,sBAAsB;QACxB;QAEA,qBAAoB,KAAA,EAAsD;YAExE,IAAI,gKAAC,gBAAA,EAAa,KAAK,KAAK,OAAO,MAAM,MAAA,KAAW,UAAU;gBAC5D,OAAO;oBACL,SAAS;oBACT,OAAO,gKAAI,sBAAA,CAAoB;wBAC7B;wBACA,OACE;oBACJ,CAAC;gBACH;YACF;YAEA,MAAM,SAAS,MAAM,MAAA;YAErB,OAAO,WAAW,QAAA,CAAS,MAAc,IACrC;gBAAE,SAAS;gBAAM,OAAO;YAAe,IACvC;gBACE,SAAS;gBACT,OAAO,IAAI,kLAAA,CAAoB;oBAC7B;oBACA,OAAO;gBACT,CAAC;YACH;QACN;QAEA,wBAAwB;YAEtB,MAAM,IAAI,4LAAA,CAA8B;gBACtC,eAAe;YACjB,CAAC;QACH;QAEA,sBAAsB;YAEpB,MAAM,gKAAI,gCAAA,CAA8B;gBACtC,eAAe;YACjB,CAAC;QACH;IACF;AACF;AAEO,SAAS,kBAA0B,EACxC,MAAA,EACA,MAAA,EACA,UAAA,EACF,EAIkC;IAChC,OAAQ,QAAQ;QACd,KAAK;YACH,OAAO,wMAAqB,WAAA,EAAS,MAAO,CAAC;QAC/C,KAAK;YACH,OAAO,uMAAoB,WAAA,EAAS,MAAO,CAAC;QAC9C,KAAK;YACH,OAAO,mBAAmB,UAA4B;QACxD,KAAK;YACH,OAAO;QACT;YAAS;gBACP,MAAM,mBAA0B;gBAChC,MAAM,IAAI,MAAM,CAAA,oBAAA,EAAuB,gBAAgB,EAAE;YAC3D;IACF;AACF;;AEzWO,SAAS,8BAA8B,EAC5C,MAAA,EACA,IAAA,EACA,MAAA,EACA,UAAA,EACA,iBAAA,EACA,UAAA,EACF,EAOG;IACD,IACE,UAAU,QACV,WAAW,YACX,WAAW,WACX,WAAW,UACX,WAAW,aACX;QACA,MAAM,IAAI,qBAAqB;YAC7B,WAAW;YACX,OAAO;YACP,SAAS;QACX,CAAC;IACH;IAEA,IAAI,WAAW,aAAa;QAC1B,IAAI,SAAS,UAAU,SAAS,QAAQ;YACtC,MAAM,IAAI,qBAAqB;gBAC7B,WAAW;gBACX,OAAO;gBACP,SAAS;YACX,CAAC;QACH;QAEA,IAAI,UAAU,MAAM;YAClB,MAAM,IAAI,qBAAqB;gBAC7B,WAAW;gBACX,OAAO;gBACP,SAAS;YACX,CAAC;QACH;QAEA,IAAI,qBAAqB,MAAM;YAC7B,MAAM,IAAI,qBAAqB;gBAC7B,WAAW;gBACX,OAAO;gBACP,SAAS;YACX,CAAC;QACH;QAEA,IAAI,cAAc,MAAM;YACtB,MAAM,IAAI,qBAAqB;gBAC7B,WAAW;gBACX,OAAO;gBACP,SAAS;YACX,CAAC;QACH;QAEA,IAAI,cAAc,MAAM;YACtB,MAAM,IAAI,qBAAqB;gBAC7B,WAAW;gBACX,OAAO;gBACP,SAAS;YACX,CAAC;QACH;IACF;IAEA,IAAI,WAAW,UAAU;QACvB,IAAI,UAAU,MAAM;YAClB,MAAM,IAAI,qBAAqB;gBAC7B,WAAW;gBACX,OAAO;gBACP,SAAS;YACX,CAAC;QACH;QAEA,IAAI,cAAc,MAAM;YACtB,MAAM,IAAI,qBAAqB;gBAC7B,WAAW;gBACX,OAAO;gBACP,SAAS;YACX,CAAC;QACH;IACF;IAEA,IAAI,WAAW,SAAS;QACtB,IAAI,UAAU,MAAM;YAClB,MAAM,IAAI,qBAAqB;gBAC7B,WAAW;gBACX,OAAO;gBACP,SAAS;YACX,CAAC;QACH;QAEA,IAAI,cAAc,MAAM;YACtB,MAAM,IAAI,qBAAqB;gBAC7B,WAAW;gBACX,OAAO;gBACP,SAAS;YACX,CAAC;QACH;IACF;IAEA,IAAI,WAAW,QAAQ;QACrB,IAAI,UAAU,MAAM;YAClB,MAAM,IAAI,qBAAqB;gBAC7B,WAAW;gBACX,OAAO;gBACP,SAAS;YACX,CAAC;QACH;QAEA,IAAI,qBAAqB,MAAM;YAC7B,MAAM,IAAI,qBAAqB;gBAC7B,WAAW;gBACX,OAAO;gBACP,SAAS;YACX,CAAC;QACH;QAEA,IAAI,cAAc,MAAM;YACtB,MAAM,IAAI,qBAAqB;gBAC7B,WAAW;gBACX,OAAO;gBACP,SAAS;YACX,CAAC;QACH;QAEA,IAAI,cAAc,MAAM;YACtB,MAAM,IAAI,qBAAqB;gBAC7B,WAAW;gBACX,OAAO;gBACP,SAAS;YACX,CAAC;QACH;QAEA,KAAA,MAAW,SAAS,WAAY;YAC9B,IAAI,OAAO,UAAU,UAAU;gBAC7B,MAAM,IAAI,qBAAqB;oBAC7B,WAAW;oBACX;oBACA,SAAS;gBACX,CAAC;YACH;QACF;IACF;AACF;;AC3IO,SAAS,sBAAsB,MAAA,EAAuC;IAC3E,MAAM,kBAAkB,OAAO,GAAA,CAAI,CAAC,YAAoC;QACtE,OAAO;YACL,GAAG,OAAA;YACH,SACE,OAAO,QAAQ,OAAA,KAAY,WACvB,QAAQ,OAAA,GACR,QAAQ,OAAA,CAAQ,GAAA,CAAI,WAAW;QACvC;IACF,CAAC;IAED,OAAO,KAAK,SAAA,CAAU,eAAe;AACvC;AAeA,SAAS,YAAY,IAAA,EAAuD;IAC1E,IAAI,KAAK,IAAA,KAAS,SAAS;QACzB,OAAO;YACL,GAAG,IAAA;YACH,OACE,KAAK,KAAA,YAAiB,aAClB,iCAAiC,KAAK,KAAK,IAC3C,KAAK,KAAA;QACb;IACF;IACA,OAAO;AACT;;AxBdA,IAAM,8LAAqB,oBAAA,EAAkB;IAAE,QAAQ;IAAS,MAAM;AAAG,CAAC;AAmT1E,eAAsB,eAA+B,EACnD,KAAA,EACA,MAAM,UAAA,EAAA,2CAAA;AACN,QAAQ,WAAA,EACR,UAAA,EACA,iBAAA,EACA,IAAA,EACA,SAAS,QAAA,EACT,MAAA,EACA,MAAA,EACA,QAAA,EACA,YAAY,aAAA,EACZ,WAAA,EACA,OAAA,EACA,yBAAyB,UAAA,EACzB,wBAAwB,SAAA,EACxB,6BAAA,EACA,kBAAkB,6BAAA,EAClB,WAAW,EACT,YAAAE,cAAa,kBAAA,EACb,cAAc,IAAM,aAAA,GAAA,IAAI,KAAK,CAAA,EAC/B,GAAI,CAAC,CAAA,EACL,GAAG,UACL,EA+B4C;IAC1C,8BAA8B;QAC5B;QACA;QACA,QAAQ;QACR;QACA;QACA;IACF,CAAC;IAED,MAAM,EAAE,UAAA,EAAY,KAAA,CAAM,CAAA,GAAI,eAAe;QAAE,YAAY;IAAc,CAAC;IAE1E,MAAM,iBAAiB,kBAAkB;QACvC;QACA,QAAQ;QACR;IACF,CAAC;IAGD,IAAI,eAAe,IAAA,KAAS,eAAe,SAAS,KAAA,GAAW;QAC7D,OAAO;IACT;IAEA,MAAM,0BAA0B,2BAA2B;QACzD;QACA;QACA;QACA,UAAU;YAAE,GAAG,QAAA;YAAU;QAAW;IACtC,CAAC;IAED,MAAM,SAAS,UAAU,SAAS;IAElC,OAAO,WAAW;QAChB,MAAM;QACN,YAAY,0BAA0B;YACpC;YACA,YAAY;gBACV,GAAG,sBAAsB;oBACvB,aAAa;oBACb;gBACF,CAAC,CAAA;gBACD,GAAG,uBAAA;gBAAA,6DAAA;gBAEH,aAAa;oBACX,OAAO,IAAM,KAAK,SAAA,CAAU;4BAAE;4BAAQ;4BAAQ;wBAAS,CAAC;gBAC1D;gBACA,aACE,eAAe,UAAA,IAAc,OACzB;oBAAE,OAAO,IAAM,KAAK,SAAA,CAAU,eAAe,UAAU;gBAAE,IACzD,KAAA;gBACN,kBAAkB;gBAClB,yBAAyB;gBACzB,sBAAsB,eAAe,IAAA;gBACrC,oBAAoB;YACtB;QACF,CAAC;QACD;QACA,IAAI,OAAM,SAAQ;YAzctB,IAAAC,MAAA,IAAA,IAAA;YA2cM,IAAI,SAAS,UAAU,QAAQ,MAAM;gBACnC,OAAO,MAAM,2BAAA;YACf;YAEA,IAAI;YACJ,IAAI;YACJ,IAAI;YACJ,IAAI;YACJ,IAAI;YAGJ,IAAI;YACJ,IAAI;YACJ,IAAI;YACJ,IAAI;YAEJ,OAAQ,MAAM;gBACZ,KAAK;oBAAQ;wBACX,MAAM,qBAAqB,kBAAkB;4BAC3C,QAAQ;gCACN,QACE,eAAe,UAAA,IAAc,OACzB,sBAAsB;oCAAE,QAAQ;gCAAO,CAAC,IACxC,MAAM,yBAAA,GACJ,SACA,sBAAsB;oCACpB,QAAQ;oCACR,QAAQ,eAAe,UAAA;gCACzB,CAAC;gCACT;gCACA;4BACF;4BACA,OAAO,KAAA;wBACT,CAAC;wBAED,MAAM,iBAAiB,MAAM,6BAA6B;4BACxD,QAAQ;4BACR,wBAAwB,MAAM,iBAAA;4BAC9B,kBAAA,CAAkBA,OAAA,MAAM,WAAA,KAAN,OAAA,KAAA,IAAAA,KAAmB,IAAA,CAAK;wBAC5C,CAAC;wBAED,MAAM,iBAAiB,MAAM,MAAM,IACjC,WAAW;gCACT,MAAM;gCACN,YAAY,0BAA0B;oCACpC;oCACA,YAAY;wCACV,GAAG,sBAAsB;4CACvB,aAAa;4CACb;wCACF,CAAC,CAAA;wCACD,GAAG,uBAAA;wCACH,oBAAoB;4CAClB,OAAO,IAAM,mBAAmB,IAAA;wCAClC;wCACA,sBAAsB;4CACpB,OAAO,IAAM,KAAK,SAAA,CAAU,cAAc;wCAC5C;wCACA,oBAAoB;wCAAA,2CAAA;wCAGpB,iBAAiB,MAAM,QAAA;wCACvB,wBAAwB,MAAM,OAAA;wCAC9B,oCAAoC,SAAS,gBAAA;wCAC7C,6BAA6B,SAAS,SAAA;wCACtC,mCAAmC,SAAS,eAAA;wCAC5C,8BAA8B,SAAS,WAAA;wCACvC,wBAAwB,SAAS,IAAA;wCACjC,wBAAwB,SAAS,IAAA;oCACnC;gCACF,CAAC;gCACD;gCACA,IAAI,OAAMC,UAAQ;oCAnhBhC,IAAAD,MAAAE,KAAAC,KAAAC,KAAA,IAAA;oCAohBgB,MAAMC,UAAS,MAAM,MAAM,UAAA,CAAW;wCACpC,MAAM;4CACJ,MAAM;4CACN,QAAQ,eAAe,UAAA;4CACvB,MAAM;4CACN,aAAa;wCACf;wCACA,GAAG,oBAAoB,QAAQ,CAAA;wCAC/B,aAAa,mBAAmB,IAAA;wCAChC,QAAQ;wCACR,kBAAkB;wCAClB;wCACA;oCACF,CAAC;oCAED,MAAM,eAAe;wCACnB,IAAA,CAAIH,MAAAA,CAAAF,OAAAK,QAAO,QAAA,KAAP,OAAA,KAAA,IAAAL,KAAiB,EAAA,KAAjB,OAAAE,MAAuBH,YAAW;wCACtC,WAAA,CAAWK,MAAAA,CAAAD,MAAAE,QAAO,QAAA,KAAP,OAAA,KAAA,IAAAF,IAAiB,SAAA,KAAjB,OAAAC,MAA8B,YAAY;wCACrD,SAAA,CAAS,KAAA,CAAA,KAAAC,QAAO,QAAA,KAAP,OAAA,KAAA,IAAA,GAAiB,OAAA,KAAjB,OAAA,KAA4B,MAAM,OAAA;oCAC7C;oCAEA,IAAIA,QAAO,IAAA,KAAS,KAAA,GAAW;wCAC7B,MAAM,IAAI,uBAAuB;4CAC/B,SACE;4CACF,UAAU;4CACV,OAAO,4BAA4BA,QAAO,KAAK;4CAC/C,cAAcA,QAAO,YAAA;wCACvB,CAAC;oCACH;oCAGAJ,MAAK,aAAA,CACH,0BAA0B;wCACxB;wCACA,YAAY;4CACV,4BAA4BI,QAAO,YAAA;4CACnC,sBAAsB;gDAAE,QAAQ,IAAMA,QAAO,IAAA;4CAAK;4CAClD,kBAAkB,aAAa,EAAA;4CAC/B,qBAAqB,aAAa,OAAA;4CAClC,yBACE,aAAa,SAAA,CAAU,WAAA,CAAY;4CAErC,yBAAyBA,QAAO,KAAA,CAAM,YAAA;4CACtC,6BACEA,QAAO,KAAA,CAAM,gBAAA;4CAAA,2CAAA;4CAGf,kCAAkC;gDAACA,QAAO,YAAY;6CAAA;4CACtD,sBAAsB,aAAa,EAAA;4CACnC,yBAAyB,aAAa,OAAA;4CACtC,8BAA8BA,QAAO,KAAA,CAAM,YAAA;4CAC3C,kCACEA,QAAO,KAAA,CAAM,gBAAA;wCACjB;oCACF,CAAC;oCAGH,OAAO;wCAAE,GAAGA,OAAAA;wCAAQ,YAAYA,QAAO,IAAA;wCAAM;oCAAa;gCAC5D;4BACF,CAAC;wBAGH,SAAS,eAAe,UAAA;wBACxB,eAAe,eAAe,YAAA;wBAC9B,QAAQ,eAAe,KAAA;wBACvB,WAAW,eAAe,QAAA;wBAC1B,cAAc,eAAe,WAAA;wBAC7B,WAAW,eAAe,QAAA;wBAC1B,yBAAyB,eAAe,gBAAA;wBACxC,UAAA,CAAU,KAAA,eAAe,OAAA,KAAf,OAAA,KAA0B,CAAC;wBACrC,WAAW,eAAe,YAAA;wBAE1B;oBACF;gBAEA,KAAK;oBAAQ;wBACX,MAAM,qBAAqB,kBAAkB;4BAC3C,QAAQ;gCAAE;gCAAQ;gCAAQ;4BAAS;4BACnC,OAAO,KAAA;wBACT,CAAC;wBAED,MAAM,iBAAiB,MAAM,6BAA6B;4BACxD,QAAQ;4BACR,wBAAwB,MAAM,iBAAA;4BAC9B,kBAAA,CAAkB,KAAA,MAAM,WAAA,KAAN,OAAA,KAAA,IAAA,GAAmB,IAAA,CAAK;wBAC5C,CAAC;wBACD,MAAM,cAAc,mBAAmB,IAAA;wBAEvC,MAAM,iBAAiB,MAAM,MAAM,IACjC,WAAW;gCACT,MAAM;gCACN,YAAY,0BAA0B;oCACpC;oCACA,YAAY;wCACV,GAAG,sBAAsB;4CACvB,aAAa;4CACb;wCACF,CAAC,CAAA;wCACD,GAAG,uBAAA;wCACH,oBAAoB;4CAClB,OAAO,IAAM;wCACf;wCACA,sBAAsB;4CACpB,OAAO,IAAM,sBAAsB,cAAc;wCACnD;wCACA,oBAAoB;wCAAA,2CAAA;wCAGpB,iBAAiB,MAAM,QAAA;wCACvB,wBAAwB,MAAM,OAAA;wCAC9B,oCAAoC,SAAS,gBAAA;wCAC7C,6BAA6B,SAAS,SAAA;wCACtC,mCAAmC,SAAS,eAAA;wCAC5C,8BAA8B,SAAS,WAAA;wCACvC,wBAAwB,SAAS,IAAA;wCACjC,wBAAwB,SAAS,IAAA;oCACnC;gCACF,CAAC;gCACD;gCACA,IAAI,OAAMJ,UAAQ;oCA5oBhC,IAAAD,MAAAE,KAAAC,KAAAC,KAAA,IAAA,IAAA,IAAA;oCA6oBgB,MAAMC,UAAS,MAAM,MAAM,UAAA,CAAW;wCACpC,MAAM;4CACJ,MAAM;4CACN,MAAM;gDACJ,MAAM;gDACN,MAAM,cAAA,OAAA,aAAc;gDACpB,aACE,qBAAA,OAAA,oBAAqB;gDACvB,YAAY,eAAe,UAAA;4CAC7B;wCACF;wCACA,GAAG,oBAAoB,QAAQ,CAAA;wCAC/B;wCACA,QAAQ;wCACR,kBAAkB;wCAClB;wCACA;oCACF,CAAC;oCAED,MAAM,aAAA,CAAaH,MAAAA,CAAAF,OAAAK,QAAO,SAAA,KAAP,OAAA,KAAA,IAAAL,IAAAA,CAAmB,EAAA,KAAnB,OAAA,KAAA,IAAAE,IAAuB,IAAA;oCAE1C,MAAM,eAAe;wCACnB,IAAA,CAAIE,MAAAA,CAAAD,MAAAE,QAAO,QAAA,KAAP,OAAA,KAAA,IAAAF,IAAiB,EAAA,KAAjB,OAAAC,MAAuBL,YAAW;wCACtC,WAAA,CAAW,KAAA,CAAA,KAAAM,QAAO,QAAA,KAAP,OAAA,KAAA,IAAA,GAAiB,SAAA,KAAjB,OAAA,KAA8B,YAAY;wCACrD,SAAA,CAAS,KAAA,CAAA,KAAAA,QAAO,QAAA,KAAP,OAAA,KAAA,IAAA,GAAiB,OAAA,KAAjB,OAAA,KAA4B,MAAM,OAAA;oCAC7C;oCAEA,IAAI,eAAe,KAAA,GAAW;wCAC5B,MAAM,IAAI,uBAAuB;4CAC/B,SAAS;4CACT,UAAU;4CACV,OAAO,4BAA4BA,QAAO,KAAK;4CAC/C,cAAcA,QAAO,YAAA;wCACvB,CAAC;oCACH;oCAGAJ,MAAK,aAAA,CACH,0BAA0B;wCACxB;wCACA,YAAY;4CACV,4BAA4BI,QAAO,YAAA;4CACnC,sBAAsB;gDAAE,QAAQ,IAAM;4CAAW;4CACjD,kBAAkB,aAAa,EAAA;4CAC/B,qBAAqB,aAAa,OAAA;4CAClC,yBACE,aAAa,SAAA,CAAU,WAAA,CAAY;4CAErC,yBAAyBA,QAAO,KAAA,CAAM,YAAA;4CACtC,6BACEA,QAAO,KAAA,CAAM,gBAAA;4CAAA,2CAAA;4CAGf,kCAAkC;gDAACA,QAAO,YAAY;6CAAA;4CACtD,sBAAsB,aAAa,EAAA;4CACnC,yBAAyB,aAAa,OAAA;4CACtC,6BAA6BA,QAAO,KAAA,CAAM,YAAA;4CAC1C,8BACEA,QAAO,KAAA,CAAM,gBAAA;wCACjB;oCACF,CAAC;oCAGH,OAAO;wCAAE,GAAGA,OAAAA;wCAAQ;wCAAY;oCAAa;gCAC/C;4BACF,CAAC;wBAGH,SAAS,eAAe,UAAA;wBACxB,eAAe,eAAe,YAAA;wBAC9B,QAAQ,eAAe,KAAA;wBACvB,WAAW,eAAe,QAAA;wBAC1B,cAAc,eAAe,WAAA;wBAC7B,WAAW,eAAe,QAAA;wBAC1B,yBAAyB,eAAe,gBAAA;wBACxC,UAAA,CAAU,KAAA,eAAe,OAAA,KAAf,OAAA,KAA0B,CAAC;wBACrC,WAAW,eAAe,YAAA;wBAE1B;oBACF;gBAEA,KAAK,KAAA;oBAAW;wBACd,MAAM,IAAI,MACR;oBAEJ;gBAEA;oBAAS;wBACP,MAAM,mBAA0B;wBAChC,MAAM,IAAI,MAAM,CAAA,kBAAA,EAAqB,gBAAgB,EAAE;oBACzD;YACF;YAEA,SAAS,cAAcA,OAAAA,EAAwB;gBAC7C,MAAM,uLAAc,gBAAA,EAAc;oBAAE,MAAMA;gBAAO,CAAC;gBAElD,IAAI,CAAC,YAAY,OAAA,EAAS;oBACxB,MAAM,IAAI,uBAAuB;wBAC/B,SAAS;wBACT,OAAO,YAAY,KAAA;wBACnB,MAAMA;wBACN;wBACA,OAAO,4BAA4B,KAAK;wBACxC;oBACF,CAAC;gBACH;gBAEA,MAAM,mBAAmB,eAAe,mBAAA,CACtC,YAAY,KAAA,EACZ;oBACE,MAAMA;oBACN;oBACA,OAAO,4BAA4B,KAAK;gBAC1C;gBAGF,IAAI,CAAC,iBAAiB,OAAA,EAAS;oBAC7B,MAAM,IAAI,uBAAuB;wBAC/B,SAAS;wBACT,OAAO,iBAAiB,KAAA;wBACxB,MAAMA;wBACN;wBACA,OAAO,4BAA4B,KAAK;wBACxC;oBACF,CAAC;gBACH;gBAEA,OAAO,iBAAiB,KAAA;YAC1B;YAEA,IAAIC;YACJ,IAAI;gBACFA,UAAS,cAAc,MAAM;YAC/B,EAAA,OAAS,OAAO;gBACd,IACE,cAAc,QACd,uBAAuB,UAAA,CAAW,KAAK,KAAA,6JACtC,iBAAA,CAAe,UAAA,CAAW,MAAM,KAAK,iKACpCC,sBAAAA,CAAoB,UAAA,CAAW,MAAM,KAAK,CAAA,GAC5C;oBACA,MAAM,eAAe,MAAM,WAAW;wBACpC,MAAM;wBACN,OAAO,MAAM,KAAA;oBACf,CAAC;oBAED,IAAI,iBAAiB,MAAM;wBACzB,MAAM;oBACR;oBAEAD,UAAS,cAAc,YAAY;gBACrC,OAAO;oBACL,MAAM;gBACR;YACF;YAGA,KAAK,aAAA,CACH,0BAA0B;gBACxB;gBACA,YAAY;oBACV,4BAA4B;oBAC5B,sBAAsB;wBACpB,QAAQ,IAAM,KAAK,SAAA,CAAUA,OAAM;oBACrC;oBAEA,yBAAyB,MAAM,YAAA;oBAC/B,6BAA6B,MAAM,gBAAA;gBACrC;YACF,CAAC;YAGH,OAAO,IAAI,4BAA4B;gBACrC,QAAAA;gBACA;gBACA,OAAO,4BAA4B,KAAK;gBACxC;gBACA;gBACA,UAAU;oBACR,GAAG,QAAA;oBACH,SAAS,eAAA,OAAA,KAAA,IAAA,YAAa,OAAA;oBACtB,MAAM,eAAA,OAAA,KAAA,IAAA,YAAa,IAAA;gBACrB;gBACA;gBACA,kBAAkB;YACpB,CAAC;QACH;IACF,CAAC;AACH;AAEA,IAAM,8BAAN,MAAwE;IAWtE,YAAY,OAAA,CAST;QACD,IAAA,CAAK,MAAA,GAAS,QAAQ,MAAA;QACtB,IAAA,CAAK,YAAA,GAAe,QAAQ,YAAA;QAC5B,IAAA,CAAK,KAAA,GAAQ,QAAQ,KAAA;QACrB,IAAA,CAAK,QAAA,GAAW,QAAQ,QAAA;QACxB,IAAA,CAAK,gBAAA,GAAmB,QAAQ,gBAAA;QAChC,IAAA,CAAK,6BAAA,GAAgC,QAAQ,gBAAA;QAC7C,IAAA,CAAK,QAAA,GAAW,QAAQ,QAAA;QACxB,IAAA,CAAK,OAAA,GAAU,QAAQ,OAAA;QACvB,IAAA,CAAK,QAAA,GAAW,QAAQ,QAAA;IAC1B;IAEA,eAAe,IAAA,EAA+B;QA12BhD,IAAAN;QA22BI,OAAO,IAAI,SAAS,KAAK,SAAA,CAAU,IAAA,CAAK,MAAM,GAAG;YAC/C,QAAA,CAAQA,OAAA,QAAA,OAAA,KAAA,IAAA,KAAM,MAAA,KAAN,OAAAA,OAAgB;YACxB,SAAS,uBAAuB,QAAA,OAAA,KAAA,IAAA,KAAM,OAAA,EAAS;gBAC7C,aAAa;YACf,CAAC;QACH,CAAC;IACH;AACF;;;;A0B72BO,IAAM,iBAAN,MAAwB;IAAxB,aAAA;QACL,IAAA,CAAQ,MAAA,GAGmC;YAAE,MAAM;QAAU;QAE7D,IAAA,CAAQ,QAAA,GAA6C,KAAA;QACrD,IAAA,CAAQ,OAAA,GAAkD,KAAA;IAAA;IAE1D,IAAI,QAAoB;QACtB,IAAI,IAAA,CAAK,OAAA,EAAS;YAChB,OAAO,IAAA,CAAK,OAAA;QACd;QAEA,IAAA,CAAK,OAAA,GAAU,IAAI,QAAW,CAAC,SAAS,WAAW;YACjD,IAAI,IAAA,CAAK,MAAA,CAAO,IAAA,KAAS,YAAY;gBACnC,QAAQ,IAAA,CAAK,MAAA,CAAO,KAAK;YAC3B,OAAA,IAAW,IAAA,CAAK,MAAA,CAAO,IAAA,KAAS,YAAY;gBAC1C,OAAO,IAAA,CAAK,MAAA,CAAO,KAAK;YAC1B;YAEA,IAAA,CAAK,QAAA,GAAW;YAChB,IAAA,CAAK,OAAA,GAAU;QACjB,CAAC;QAED,OAAO,IAAA,CAAK,OAAA;IACd;IAEA,QAAQ,KAAA,EAAgB;QAjC1B,IAAAS;QAkCI,IAAA,CAAK,MAAA,GAAS;YAAE,MAAM;YAAY;QAAM;QAExC,IAAI,IAAA,CAAK,OAAA,EAAS;YAChB,CAAAA,OAAA,IAAA,CAAK,QAAA,KAAL,OAAA,KAAA,IAAAA,KAAA,IAAA,CAAA,IAAA,EAAgB;QAClB;IACF;IAEA,OAAO,KAAA,EAAsB;QAzC/B,IAAAA;QA0CI,IAAA,CAAK,MAAA,GAAS;YAAE,MAAM;YAAY;QAAM;QAExC,IAAI,IAAA,CAAK,OAAA,EAAS;YAChB,CAAAA,OAAA,IAAA,CAAK,OAAA,KAAL,OAAA,KAAA,IAAAA,KAAA,IAAA,CAAA,IAAA,EAAe;QACjB;IACF;AACF;;ACvCO,SAAS,0BAId;IACA,IAAI;IACJ,IAAI;IAEJ,MAAM,UAAU,IAAI,QAAW,CAAC,KAAK,QAAQ;QAC3C,UAAU;QACV,SAAS;IACX,CAAC;IAED,OAAO;QACL;QACA;QACA;IACF;AACF;;ACnBO,SAAS,yBAKd;IACA,IAAI,qBAAuD,CAAC,CAAA;IAC5D,IAAI,aAAwD;IAC5D,IAAI,WAAW;IACf,IAAI,mBAAmB,wBAA8B;IAErD,MAAM,cAAc,YAAY;QAE9B,IAAI,YAAY,mBAAmB,MAAA,KAAW,GAAG;YAC/C,cAAA,OAAA,KAAA,IAAA,WAAY,KAAA;YACZ;QACF;QAIA,IAAI,mBAAmB,MAAA,KAAW,GAAG;YACnC,mBAAmB,wBAA8B;YACjD,MAAM,iBAAiB,OAAA;YACvB,OAAO,YAAY;QACrB;QAEA,IAAI;YACF,MAAM,EAAE,KAAA,EAAO,IAAA,CAAK,CAAA,GAAI,MAAM,kBAAA,CAAmB,CAAC,CAAA,CAAE,IAAA,CAAK;YAEzD,IAAI,MAAM;gBAER,mBAAmB,KAAA,CAAM;gBAGzB,IAAI,mBAAmB,MAAA,GAAS,GAAG;oBACjC,MAAM,YAAY;gBACpB,OAAA,IAAW,UAAU;oBACnB,cAAA,OAAA,KAAA,IAAA,WAAY,KAAA;gBACd;YACF,OAAO;gBAEL,cAAA,OAAA,KAAA,IAAA,WAAY,OAAA,CAAQ;YACtB;QACF,EAAA,OAAS,OAAO;YAEd,cAAA,OAAA,KAAA,IAAA,WAAY,KAAA,CAAM;YAClB,mBAAmB,KAAA,CAAM;YAEzB,IAAI,YAAY,mBAAmB,MAAA,KAAW,GAAG;gBAC/C,cAAA,OAAA,KAAA,IAAA,WAAY,KAAA;YACd;QACF;IACF;IAEA,OAAO;QACL,QAAQ,IAAI,eAAkB;YAC5B,OAAM,eAAA,EAAiB;gBACrB,aAAa;YACf;YACA,MAAM;YACN,MAAM,SAAS;gBACb,KAAA,MAAW,UAAU,mBAAoB;oBACvC,MAAM,OAAO,MAAA,CAAO;gBACtB;gBACA,qBAAqB,CAAC,CAAA;gBACtB,WAAW;YACb;QACF,CAAC;QACD,WAAW,CAAC,gBAAmC;YAC7C,IAAI,UAAU;gBACZ,MAAM,IAAI,MAAM,iDAAiD;YACnE;YAEA,mBAAmB,IAAA,CAAK,YAAY,SAAA,CAAU,CAAC;YAC/C,iBAAiB,OAAA,CAAQ;QAC3B;QAAA;;;KAAA,GAMA,OAAO,MAAM;YACX,WAAW;YACX,iBAAiB,OAAA,CAAQ;YAEzB,IAAI,mBAAmB,MAAA,KAAW,GAAG;gBACnC,cAAA,OAAA,KAAA,IAAA,WAAY,KAAA;YACd;QACF;QAAA;;;KAAA,GAMA,WAAW,MAAM;YACf,WAAW;YACX,iBAAiB,OAAA,CAAQ;YAEzB,mBAAmB,OAAA,CAAQ,CAAA,SAAU,OAAO,MAAA,CAAO,CAAC;YACpD,qBAAqB,CAAC,CAAA;YACtB,cAAA,OAAA,KAAA,IAAA,WAAY,KAAA;QACd;IACF;AACF;;AC9GO,SAAS,MAAc;IAD9B,IAAAC,MAAA;IAEE,OAAA,CAAO,KAAA,CAAAA,OAAA,cAAA,OAAA,KAAA,IAAA,WAAY,WAAA,KAAZ,OAAA,KAAA,IAAAA,KAAyB,GAAA,EAAA,KAAzB,OAAA,KAAkC,KAAK,GAAA,CAAI;AACpD;;AJsDA,IAAMC,sBAAqBC,6LAAAA,EAAkB;IAAE,QAAQ;IAAS,MAAM;AAAG,CAAC;AA+SnE,SAAS,aAAsD,EACpE,KAAA,EACA,QAAQ,WAAA,EACR,UAAA,EACA,iBAAA,EACA,IAAA,EACA,SAAS,QAAA,EACT,MAAA,EACA,MAAA,EACA,QAAA,EACA,UAAA,EACA,WAAA,EACA,OAAA,EACA,wBAAwB,SAAA,EACxB,6BAAA,EACA,kBAAkB,6BAAA,EAClB,OAAA,EACA,QAAA,EACA,WAAW,EACT,YAAAC,cAAaF,mBAAAA,EACb,cAAc,IAAM,aAAA,GAAA,IAAI,KAAK,CAAA,EAC7B,KAAAG,OAAM,GAAA,EACR,GAAI,CAAC,CAAA,EACL,GAAG,UACL,EA4B0D;IACxD,8BAA8B;QAC5B;QACA;QACA,QAAQ;QACR;QACA;IACF,CAAC;IAED,MAAM,iBAAiB,kBAAkB;QAAE;QAAQ,QAAQ;IAAY,CAAC;IAGxE,IAAI,eAAe,IAAA,KAAS,eAAe,SAAS,KAAA,GAAW;QAC7D,OAAO;IACT;IAEA,OAAO,IAAI,0BAA0B;QACnC;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,YAAAD;QACA;QACA,KAAAC;IACF,CAAC;AACH;AAEA,IAAM,4BAAN,MAEA;IAsBE,YAAY,EACV,KAAA,EACA,OAAA,EACA,SAAA,EACA,QAAA,EACA,YAAY,aAAA,EACZ,WAAA,EACA,cAAA,EACA,MAAA,EACA,MAAA,EACA,QAAA,EACA,UAAA,EACA,iBAAA,EACA,eAAA,EACA,IAAA,EACA,OAAA,EACA,QAAA,EACA,YAAAD,WAAAA,EACA,WAAA,EACA,KAAAC,IAAAA,EACF,CAoBG;QA7DH,IAAA,CAAiB,aAAA,GAAgB,IAAI,eAAuB;QAC5D,IAAA,CAAiB,YAAA,GAAe,IAAI,eAAmC;QACvE,IAAA,CAAiB,uBAAA,GAA0B,IAAI,eAE7C;QACF,IAAA,CAAiB,eAAA,GAAkB,IAAI,eAErC;QACF,IAAA,CAAiB,cAAA,GACf,IAAI,eAA6C;QACnD,IAAA,CAAiB,eAAA,GACf,IAAI,eAA8C;QAmDlD,MAAM,EAAE,UAAA,EAAY,KAAA,CAAM,CAAA,GAAI,eAAe;YAC3C,YAAY;QACd,CAAC;QAED,MAAM,0BAA0B,2BAA2B;YACzD;YACA;YACA;YACA,UAAU;gBAAE,GAAG,QAAA;gBAAU;YAAW;QACtC,CAAC;QAED,MAAM,SAAS,UAAU,SAAS;QAClC,MAAM,OAAO,IAAA;QAEb,MAAM,mBACJ,uBAAkD;QAEpD,MAAM,iBAAiB,IAAI,gBAGzB;YACA,WAAU,KAAA,EAAO,UAAA,EAAY;gBAC3B,WAAW,OAAA,CAAQ,KAAK;gBAExB,IAAI,MAAM,IAAA,KAAS,SAAS;oBAC1B,WAAA,OAAA,KAAA,IAAA,QAAU;wBAAE,OAAO,MAAM,KAAA;oBAAM;gBACjC;YACF;QACF,CAAC;QAED,IAAA,CAAK,UAAA,GAAa,iBAAiB,MAAA,CAAO,WAAA,CAAY,cAAc;QAEpE,WAAW;YACT,MAAM;YACN,YAAY,0BAA0B;gBACpC;gBACA,YAAY;oBACV,GAAG,sBAAsB;wBACvB,aAAa;wBACb;oBACF,CAAC,CAAA;oBACD,GAAG,uBAAA;oBAAA,6DAAA;oBAEH,aAAa;wBACX,OAAO,IAAM,KAAK,SAAA,CAAU;gCAAE;gCAAQ;gCAAQ;4BAAS,CAAC;oBAC1D;oBACA,aACE,eAAe,UAAA,IAAc,OACzB;wBAAE,OAAO,IAAM,KAAK,SAAA,CAAU,eAAe,UAAU;oBAAE,IACzD,KAAA;oBACN,kBAAkB;oBAClB,yBAAyB;oBACzB,sBAAsB,eAAe,IAAA;oBACrC,oBAAoB;gBACtB;YACF,CAAC;YACD;YACA,aAAa;YACb,IAAI,OAAM,aAAY;gBA9jB5B,IAAAC,MAAA;gBAgkBQ,IAAI,SAAS,UAAU,QAAQ,MAAM;oBACnC,OAAO,MAAM,2BAAA;gBACf;gBAEA,IAAI;gBACJ,IAAI;gBAKJ,OAAQ,MAAM;oBACZ,KAAK;wBAAQ;4BACX,MAAM,qBAAqB,kBAAkB;gCAC3C,QAAQ;oCACN,QACE,eAAe,UAAA,IAAc,OACzB,sBAAsB;wCAAE,QAAQ;oCAAO,CAAC,IACxC,MAAM,yBAAA,GACJ,SACA,sBAAsB;wCACpB,QAAQ;wCACR,QAAQ,eAAe,UAAA;oCACzB,CAAC;oCACT;oCACA;gCACF;gCACA,OAAO,KAAA;4BACT,CAAC;4BAED,cAAc;gCACZ,MAAM;oCACJ,MAAM;oCACN,QAAQ,eAAe,UAAA;oCACvB,MAAM;oCACN,aAAa;gCACf;gCACA,GAAG,oBAAoB,QAAQ,CAAA;gCAC/B,aAAa,mBAAmB,IAAA;gCAChC,QAAQ,MAAM,6BAA6B;oCACzC,QAAQ;oCACR,wBAAwB,MAAM,iBAAA;oCAC9B,kBAAA,CAAkBA,OAAA,MAAM,WAAA,KAAN,OAAA,KAAA,IAAAA,KAAmB,IAAA,CAAK;gCAC5C,CAAC;gCACD,kBAAkB;gCAClB;gCACA;4BACF;4BAEA,cAAc;gCACZ,WAAW,CAAC,OAAO,eAAe;oCAChC,OAAQ,MAAM,IAAA,EAAM;wCAClB,KAAK;4CACH,WAAW,OAAA,CAAQ,MAAM,SAAS;4CAClC;wCACF,KAAK;wCACL,KAAK;wCACL,KAAK;4CACH,WAAW,OAAA,CAAQ,KAAK;4CACxB;oCACJ;gCACF;4BACF;4BAEA;wBACF;oBAEA,KAAK;wBAAQ;4BACX,MAAM,qBAAqB,kBAAkB;gCAC3C,QAAQ;oCAAE;oCAAQ;oCAAQ;gCAAS;gCACnC,OAAO,KAAA;4BACT,CAAC;4BAED,cAAc;gCACZ,MAAM;oCACJ,MAAM;oCACN,MAAM;wCACJ,MAAM;wCACN,MAAM,cAAA,OAAA,aAAc;wCACpB,aACE,qBAAA,OAAA,oBAAqB;wCACvB,YAAY,eAAe,UAAA;oCAC7B;gCACF;gCACA,GAAG,oBAAoB,QAAQ,CAAA;gCAC/B,aAAa,mBAAmB,IAAA;gCAChC,QAAQ,MAAM,6BAA6B;oCACzC,QAAQ;oCACR,wBAAwB,MAAM,iBAAA;oCAC9B,kBAAA,CAAkB,KAAA,MAAM,WAAA,KAAN,OAAA,KAAA,IAAA,GAAmB,IAAA,CAAK;gCAC5C,CAAC;gCACD,kBAAkB;gCAClB;gCACA;4BACF;4BAEA,cAAc;gCACZ,WAAU,KAAA,EAAO,UAAA,EAAY;oCAC3B,OAAQ,MAAM,IAAA,EAAM;wCAClB,KAAK;4CACH,WAAW,OAAA,CAAQ,MAAM,aAAa;4CACtC;wCACF,KAAK;wCACL,KAAK;wCACL,KAAK;4CACH,WAAW,OAAA,CAAQ,KAAK;4CACxB;oCACJ;gCACF;4BACF;4BAEA;wBACF;oBAEA,KAAK,KAAA;wBAAW;4BACd,MAAM,IAAI,MACR;wBAEJ;oBAEA;wBAAS;4BACP,MAAM,mBAA0B;4BAChC,MAAM,IAAI,MAAM,CAAA,kBAAA,EAAqB,gBAAgB,EAAE;wBACzD;gBACF;gBAEA,MAAM,EACJ,QAAQ,EAAE,MAAA,EAAQ,QAAA,EAAU,WAAA,EAAa,OAAA,CAAQ,CAAA,EACjD,YAAA,EACA,gBAAA,EACF,GAAI,MAAM,MAAM,IACd,WAAW;wBACT,MAAM;wBACN,YAAY,0BAA0B;4BACpC;4BACA,YAAY;gCACV,GAAG,sBAAsB;oCACvB,aAAa;oCACb;gCACF,CAAC,CAAA;gCACD,GAAG,uBAAA;gCACH,oBAAoB;oCAClB,OAAO,IAAM,YAAY,WAAA;gCAC3B;gCACA,sBAAsB;oCACpB,OAAO,IAAM,sBAAsB,YAAY,MAAM;gCACvD;gCACA,oBAAoB;gCAAA,2CAAA;gCAGpB,iBAAiB,MAAM,QAAA;gCACvB,wBAAwB,MAAM,OAAA;gCAC9B,oCAAoC,SAAS,gBAAA;gCAC7C,6BAA6B,SAAS,SAAA;gCACtC,mCAAmC,SAAS,eAAA;gCAC5C,8BAA8B,SAAS,WAAA;gCACvC,wBAAwB,SAAS,IAAA;gCACjC,wBAAwB,SAAS,IAAA;4BACnC;wBACF,CAAC;wBACD;wBACA,aAAa;wBACb,IAAI,OAAMC,gBAAAA,CAAiB;gCACzB,kBAAkBF,KAAI;gCACtB,cAAAE;gCACA,QAAQ,MAAM,MAAM,QAAA,CAAS,WAAW;4BAC1C,CAAA;oBACF,CAAC;gBAGH,KAAK,cAAA,CAAe,OAAA,CAAQ,WAAA,OAAA,UAAW,CAAC,CAAC;gBAGzC,IAAI;gBACJ,IAAI;gBACJ,IAAI;gBACJ,IAAIC;gBACJ,IAAI;gBAGJ,IAAI,kBAAkB;gBACtB,IAAI,YAAY;gBAChB,IAAI,WAIA;oBACF,IAAIJ,YAAW;oBACf,WAAW,YAAY;oBACvB,SAAS,MAAM,OAAA;gBACjB;gBAIA,IAAI,mBAA0C,KAAA;gBAC9C,IAAI,eAAoC,KAAA;gBACxC,IAAI,eAAe;gBACnB,IAAI,eAAe;gBAEnB,MAAM,oBAAoB,OACvB,WAAA,CAAY,IAAI,gBAAgB,WAAW,CAAC,EAC5C,WAAA,CACC,IAAI,gBAGF;oBACA,MAAM,WAAU,KAAA,EAAO,UAAA,EAA2B;wBA7wBhE,IAAAE,MAAAG,KAAA;wBA+wBgB,IAAI,cAAc;4BAChB,MAAM,iBAAiBJ,KAAI,IAAI;4BAE/B,eAAe;4BAEf,aAAa,QAAA,CAAS,wBAAwB;gCAC5C,4BAA4B;4BAC9B,CAAC;4BAED,aAAa,aAAA,CAAc;gCACzB,4BAA4B;4BAC9B,CAAC;wBACH;wBAGA,IAAI,OAAO,UAAU,UAAU;4BAC7B,mBAAmB;4BACnB,aAAa;4BAEb,MAAM,EAAE,OAAO,iBAAA,EAAmB,OAAO,UAAA,CAAW,CAAA,sLAClD,mBAAA,EAAiB,eAAe;4BAElC,IACE,sBAAsB,KAAA,KACtB,oLAAC,kBAAA,EAAgB,kBAAkB,iBAAiB,GACpD;gCACA,MAAM,mBACJ,eAAe,qBAAA,CAAsB;oCACnC,OAAO;oCACP;oCACA;oCACA;oCACA,cAAc,eAAe;gCAC/B,CAAC;gCAEH,IACE,iBAAiB,OAAA,IACjB,CAAC,qMAAA,EACC,cACA,iBAAiB,KAAA,CAAM,OAAA,GAEzB;oCAEA,mBAAmB;oCACnB,eAAe,iBAAiB,KAAA,CAAM,OAAA;oCAEtC,WAAW,OAAA,CAAQ;wCACjB,MAAM;wCACN,QAAQ;oCACV,CAAC;oCAED,WAAW,OAAA,CAAQ;wCACjB,MAAM;wCACN,WAAW,iBAAiB,KAAA,CAAM,SAAA;oCACpC,CAAC;oCAED,YAAY;oCACZ,eAAe;gCACjB;4BACF;4BAEA;wBACF;wBAEA,OAAQ,MAAM,IAAA,EAAM;4BAClB,KAAK;gCAAqB;oCACxB,WAAW;wCACT,IAAA,CAAIC,OAAA,MAAM,EAAA,KAAN,OAAAA,OAAY,SAAS,EAAA;wCACzB,WAAA,CAAWG,MAAA,MAAM,SAAA,KAAN,OAAAA,MAAmB,SAAS,SAAA;wCACvC,SAAA,CAAS,KAAA,MAAM,OAAA,KAAN,OAAA,KAAiB,SAAS,OAAA;oCACrC;oCACA;gCACF;4BAEA,KAAK;gCAAU;oCAEb,IAAI,cAAc,IAAI;wCACpB,WAAW,OAAA,CAAQ;4CAAE,MAAM;4CAAc;wCAAU,CAAC;oCACtD;oCAGA,eAAe,MAAM,YAAA;oCAGrB,QAAQ,4BAA4B,MAAM,KAAK;oCAC/C,mBAAmB,MAAM,gBAAA;oCAEzB,WAAW,OAAA,CAAQ;wCAAE,GAAG,KAAA;wCAAO;wCAAO;oCAAS,CAAC;oCAGhD,KAAK,YAAA,CAAa,OAAA,CAAQ,KAAK;oCAC/B,KAAK,uBAAA,CAAwB,OAAA,CAAQ,gBAAgB;oCACrD,KAAK,eAAA,CAAgB,OAAA,CAAQ;wCAC3B,GAAG,QAAA;wCACH,SAAS,eAAA,OAAA,KAAA,IAAA,YAAa,OAAA;oCACxB,CAAC;oCAGD,MAAM,mBAAmB,eAAe,mBAAA,CACtC,kBACA;wCACE,MAAM;wCACN;wCACA;oCACF;oCAGF,IAAI,iBAAiB,OAAA,EAAS;wCAC5BD,UAAS,iBAAiB,KAAA;wCAC1B,KAAK,aAAA,CAAc,OAAA,CAAQA,OAAM;oCACnC,OAAO;wCACL,QAAQ,IAAI,uBAAuB;4CACjC,SACE;4CACF,OAAO,iBAAiB,KAAA;4CACxB,MAAM;4CACN;4CACA;4CACA;wCACF,CAAC;wCACD,KAAK,aAAA,CAAc,MAAA,CAAO,KAAK;oCACjC;oCAEA;gCACF;4BAEA;gCAAS;oCACP,WAAW,OAAA,CAAQ,KAAK;oCACxB;gCACF;wBACF;oBACF;oBAAA,8FAAA;oBAGA,MAAM,OAAM,UAAA,EAAY;wBACtB,IAAI;4BACF,MAAM,aAAa,SAAA,OAAA,QAAS;gCAC1B,cAAc;gCACd,kBAAkB;gCAClB,aAAa;4BACf;4BAEA,aAAa,aAAA,CACX,0BAA0B;gCACxB;gCACA,YAAY;oCACV,4BAA4B;oCAC5B,sBAAsB;wCACpB,QAAQ,IAAM,KAAK,SAAA,CAAUA,OAAM;oCACrC;oCACA,kBAAkB,SAAS,EAAA;oCAC3B,qBAAqB,SAAS,OAAA;oCAC9B,yBACE,SAAS,SAAA,CAAU,WAAA,CAAY;oCAEjC,yBAAyB,WAAW,YAAA;oCACpC,6BACE,WAAW,gBAAA;oCAAA,2CAAA;oCAGb,kCAAkC;wCAAC,YAAY;qCAAA;oCAC/C,sBAAsB,SAAS,EAAA;oCAC/B,yBAAyB,SAAS,OAAA;oCAClC,6BAA6B,WAAW,YAAA;oCACxC,8BACE,WAAW,gBAAA;gCACf;4BACF,CAAC;4BAIH,aAAa,GAAA,CAAI;4BAGjB,SAAS,aAAA,CACP,0BAA0B;gCACxB;gCACA,YAAY;oCACV,yBAAyB,WAAW,YAAA;oCACpC,6BACE,WAAW,gBAAA;oCACb,sBAAsB;wCACpB,QAAQ,IAAM,KAAK,SAAA,CAAUA,OAAM;oCACrC;gCACF;4BACF,CAAC;4BAIH,MAAA,CAAM,YAAA,OAAA,KAAA,IAAA,SAAW;gCACf,OAAO;gCACP,QAAAA;gCACA;gCACA,UAAU;oCACR,GAAG,QAAA;oCACH,SAAS,eAAA,OAAA,KAAA,IAAA,YAAa,OAAA;gCACxB;gCACA;gCACA;gCACA,+BAA+B;4BACjC,EAAA;wBACF,EAAA,OAASE,QAAO;4BACd,WAAW,OAAA,CAAQ;gCAAE,MAAM;gCAAS,OAAAA;4BAAM,CAAC;wBAC7C,SAAE;4BACA,SAAS,GAAA,CAAI;wBACf;oBACF;gBACF,CAAC;gBAGL,iBAAiB,SAAA,CAAU,iBAAiB;YAC9C;QACF,CAAC,EACE,KAAA,CAAM,CAAA,UAAS;YAEd,iBAAiB,SAAA,CACf,IAAI,eAAe;gBACjB,OAAM,UAAA,EAAY;oBAChB,WAAW,OAAA,CAAQ;wBAAE,MAAM;wBAAS;oBAAM,CAAC;oBAC3C,WAAW,KAAA,CAAM;gBACnB;YACF,CAAC;QAEL,CAAC,EACA,OAAA,CAAQ,MAAM;YACb,iBAAiB,KAAA,CAAM;QACzB,CAAC;QAEH,IAAA,CAAK,cAAA,GAAiB;IACxB;IAEA,IAAI,SAAS;QACX,OAAO,IAAA,CAAK,aAAA,CAAc,KAAA;IAC5B;IAEA,IAAI,QAAQ;QACV,OAAO,IAAA,CAAK,YAAA,CAAa,KAAA;IAC3B;IAEA,IAAI,gCAAgC;QAClC,OAAO,IAAA,CAAK,uBAAA,CAAwB,KAAA;IACtC;IAEA,IAAI,mBAAmB;QACrB,OAAO,IAAA,CAAK,uBAAA,CAAwB,KAAA;IACtC;IAEA,IAAI,WAAW;QACb,OAAO,IAAA,CAAK,eAAA,CAAgB,KAAA;IAC9B;IAEA,IAAI,UAAU;QACZ,OAAO,IAAA,CAAK,cAAA,CAAe,KAAA;IAC7B;IAEA,IAAI,WAAW;QACb,OAAO,IAAA,CAAK,eAAA,CAAgB,KAAA;IAC9B;IAEA,IAAI,sBAAoD;QACtD,OAAO,0BACL,IAAA,CAAK,UAAA,CAAW,WAAA,CACd,IAAI,gBAAoD;YACtD,WAAU,KAAA,EAAO,UAAA,EAAY;gBAC3B,OAAQ,MAAM,IAAA,EAAM;oBAClB,KAAK;wBACH,WAAW,OAAA,CAAQ,MAAM,MAAM;wBAC/B;oBAEF,KAAK;oBACL,KAAK;oBACL,KAAK;wBACH;oBAEF;wBAAS;4BACP,MAAM,mBAA0B;4BAChC,MAAM,IAAI,MAAM,CAAA,wBAAA,EAA2B,gBAAgB,EAAE;wBAC/D;gBACF;YACF;QACF,CAAC;IAGP;IAEA,IAAI,gBAAgC;QAClC,OAAO,IAAA,CAAK,cAAA,CAAe,mBAAA,CAAoB,IAAA,CAAK,UAAU;IAChE;IAEA,IAAI,aAA0C;QAC5C,OAAO,0BACL,IAAA,CAAK,UAAA,CAAW,WAAA,CACd,IAAI,gBAAmD;YACrD,WAAU,KAAA,EAAO,UAAA,EAAY;gBAC3B,OAAQ,MAAM,IAAA,EAAM;oBAClB,KAAK;wBACH,WAAW,OAAA,CAAQ,MAAM,SAAS;wBAClC;oBAEF,KAAK;oBACL,KAAK;oBACL,KAAK;wBACH;oBAEF;wBAAS;4BACP,MAAM,mBAA0B;4BAChC,MAAM,IAAI,MAAM,CAAA,wBAAA,EAA2B,gBAAgB,EAAE;wBAC/D;gBACF;YACF;QACF,CAAC;IAGP;IAEA,IAAI,aAA6D;QAC/D,OAAO,0BAA0B,IAAA,CAAK,UAAU;IAClD;IAEA,yBAAyB,QAAA,EAA0B,IAAA,EAAqB;QACtE,sBAAsB;YACpB;YACA,QAAQ,QAAA,OAAA,KAAA,IAAA,KAAM,MAAA;YACd,YAAY,QAAA,OAAA,KAAA,IAAA,KAAM,UAAA;YAClB,SAAS,2BAA2B,QAAA,OAAA,KAAA,IAAA,KAAM,OAAA,EAAS;gBACjD,aAAa;YACf,CAAC;YACD,QAAQ,IAAA,CAAK,UAAA,CAAW,WAAA,CAAY,IAAI,kBAAkB,CAAC;QAC7D,CAAC;IACH;IAEA,qBAAqB,IAAA,EAA+B;QA1lCtD,IAAAJ;QA2lCI,OAAO,IAAI,SAAS,IAAA,CAAK,UAAA,CAAW,WAAA,CAAY,IAAI,kBAAkB,CAAC,GAAG;YACxE,QAAA,CAAQA,OAAA,QAAA,OAAA,KAAA,IAAA,KAAM,MAAA,KAAN,OAAAA,OAAgB;YACxB,SAAS,uBAAuB,QAAA,OAAA,KAAA,IAAA,KAAM,OAAA,EAAS;gBAC7C,aAAa;YACf,CAAC;QACH,CAAC;IACH;AACF;;;AMhmCA,IAAMO,QAAO;AACb,IAAMC,UAAS,CAAA,gBAAA,EAAmBD,KAAI,EAAA;AACtC,IAAME,UAAS,OAAO,GAAA,CAAID,OAAM;AAJhC,IAAAE;AASO,IAAM,yBAAN,0KAAqCJ,aAAAA,CAAW;IAAA,qBAAA;IAGrD,YAAY,EAAE,UAAU,sBAAA,CAAuB,CAAA,GAA0B,CAAC,CAAA,CAAG;QAC3E,KAAA,CAAM;YAAE,MAAAC;YAAM;QAAQ,CAAC;QAHzB,IAAA,CAAkBG,IAAAA,GAAU;IAI5B;IAEA,OAAO,WAAW,KAAA,EAAiD;QACjE,kKAAOJ,cAAAA,CAAW,SAAA,CAAU,OAAOE,OAAM;IAC3C;AACF;AAToBE,MAAAD;;ACRpB,IAAMI,SAAO;AACb,IAAMC,WAAS,CAAA,gBAAA,EAAmBD,MAAI,EAAA;AACtC,IAAME,WAAS,OAAO,GAAA,CAAID,QAAM;AAJhC,IAAAE;AAMO,IAAM,qBAAN,0KAAiCL,aAAAA,CAAW;IAOjD,YAAY,EACV,QAAA,EACA,QAAA,EACA,UAAA,EACA,KAAA,EACA,UAAU,CAAA,qBAAA,EAAwB,QAAQ,CAAA,EAAA,kKAAKC,kBAAAA,EAAgB,KAAK,CAAC,EAAA,EACvE,CAMG;QACD,KAAA,CAAM;YAAE,MAAAC;YAAM;YAAS;QAAM,CAAC;QAnBhC,IAAA,CAAkBG,KAAAA,GAAU;QAqB1B,IAAA,CAAK,QAAA,GAAW;QAChB,IAAA,CAAK,QAAA,GAAW;QAChB,IAAA,CAAK,UAAA,GAAa;IACpB;IAEA,OAAO,WAAW,KAAA,EAA6C;QAC7D,mKAAOL,aAAAA,CAAW,SAAA,CAAU,OAAOG,QAAM;IAC3C;AACF;AA7BoBE,OAAAD;;;AEPb,SAAS,iBACdG,OAAAA,EACmC;IACnC,OAAOA,WAAU,QAAQ,OAAO,IAAA,CAAKA,OAAM,EAAE,MAAA,GAAS;AACxD;;ADMO,SAAS,0BAAiD,EAC/D,KAAA,EACA,UAAA,EACA,WAAA,EACF,EASE;IACA,IAAI,CAAC,iBAAiB,KAAK,GAAG;QAC5B,OAAO;YACL,OAAO,KAAA;YACP,YAAY,KAAA;QACd;IACF;IAGA,MAAM,gBACJ,eAAe,OACX,OAAO,OAAA,CAAQ,KAAK,EAAE,MAAA,CAAO,CAAC,CAACC,MAAI,CAAA,GACjC,YAAY,QAAA,CAASA,MAAmB,KAE1C,OAAO,OAAA,CAAQ,KAAK;IAE1B,OAAO;QACL,OAAO,cAAc,GAAA,CAAI,CAAC,CAACA,QAAMC,KAAI,CAAA,KAAM;YACzC,MAAM,WAAWA,MAAK,IAAA;YACtB,OAAQ,UAAU;gBAChB,KAAK,KAAA;gBACL,KAAK;oBACH,OAAO;wBACL,MAAM;wBACN,MAAAD;wBACA,aAAaC,MAAK,WAAA;wBAClB,+LAAYC,WAAAA,EAASD,MAAK,UAAU,EAAE,UAAA;oBACxC;gBACF,KAAK;oBACH,OAAO;wBACL,MAAM;wBACN,MAAAD;wBACA,IAAIC,MAAK,EAAA;wBACT,MAAMA,MAAK,IAAA;oBACb;gBACF;oBAAS;wBACP,MAAM,kBAAyB;wBAC/B,MAAM,IAAI,MAAM,CAAA,uBAAA,EAA0B,eAAe,EAAE;oBAC7D;YACF;QACF,CAAC;QACD,YACE,cAAc,OACV;YAAE,MAAM;QAAO,IACf,OAAO,eAAe,WACpB;YAAE,MAAM;QAAW,IACnB;YAAE,MAAM;YAAiB,UAAU,WAAW,QAAA;QAAmB;IAC3E;AACF;;AEvEA,IAAM,uBAAuB;AAWtB,SAAS,sBAAsBE,KAAAA,EAMxB;IACZ,MAAM,QAAQA,MAAK,KAAA,CAAM,oBAAoB;IAC7C,OAAO,QACH;QAAE,QAAQ,KAAA,CAAM,CAAC,CAAA;QAAG,YAAY,KAAA,CAAM,CAAC,CAAA;QAAG,QAAQ,KAAA,CAAM,CAAC,CAAA;IAAE,IAC3D,KAAA;AACN;;ACpBO,SAAS,8BAA8BC,KAAAA,EAAsB;IAClE,MAAM,QAAQ,sBAAsBA,KAAI;IACxC,OAAO,QAAQ,MAAM,MAAA,GAAS,MAAM,UAAA,GAAaA;AACnD;;;;AEHA,IAAMM,SAAO;AACb,IAAMC,WAAS,CAAA,gBAAA,EAAmBD,MAAI,EAAA;AACtC,IAAME,WAAS,OAAO,GAAA,CAAID,QAAM;AAJhC,IAAAE;AAMO,IAAM,4BAAN,cAAwCL,yKAAAA,CAAW;IAMxD,YAAY,EACV,QAAA,EACA,QAAA,EACA,KAAA,EACA,UAAU,CAAA,2BAAA,EAA8B,QAAQ,CAAA,EAAA,kKAAKC,kBAAAA,EACnD,QACD,EACH,CAKG;QACD,KAAA,CAAM;YAAE,MAAAC;YAAM;YAAS;QAAM,CAAC;QAlBhC,IAAA,CAAkBG,KAAAA,GAAU;QAoB1B,IAAA,CAAK,QAAA,GAAW;QAChB,IAAA,CAAK,QAAA,GAAW;IAClB;IAEA,OAAO,WAAW,KAAA,EAAoD;QACpE,OAAOL,yKAAAA,CAAW,SAAA,CAAU,OAAOG,QAAM;IAC3C;AACF;AA3BoBE,OAAAD;;ACLpB,IAAMG,SAAO;AACb,IAAMC,WAAS,CAAA,gBAAA,EAAmBD,MAAI,EAAA;AACtC,IAAME,WAAS,OAAO,GAAA,CAAID,QAAM;AAJhC,IAAAE;AAMO,IAAM,kBAAN,0KAA8BJ,aAAAA,CAAW;IAM9C,YAAY,EACV,QAAA,EACA,iBAAiB,KAAA,CAAA,EACjB,UAAU,CAAA,sCAAA,EAAyC,QAAQ,CAAA,GAAA,EACzD,mBAAmB,KAAA,IACf,4BACA,CAAA,iBAAA,EAAoB,eAAe,IAAA,CAAK,IAAI,CAAC,CAAA,CAAA,CACnD,EAAA,EACF,CAIG;QACD,KAAA,CAAM;YAAE,MAAAC;YAAM;QAAQ,CAAC;QAlBzB,IAAA,CAAkBG,KAAAA,GAAU;QAoB1B,IAAA,CAAK,QAAA,GAAW;QAChB,IAAA,CAAK,cAAA,GAAiB;IACxB;IAEA,OAAO,WAAW,KAAA,EAA0C;QAC1D,mKAAOJ,aAAAA,CAAW,SAAA,CAAU,OAAOE,QAAM;IAC3C;AACF;AA3BoBE,OAAAD;;ACHpB,IAAMI,SAAO;AACb,IAAMC,WAAS,CAAA,gBAAA,EAAmBD,MAAI,EAAA;AACtC,IAAME,WAAS,OAAO,GAAA,CAAID,QAAM;AANhC,IAAAE;AAQO,IAAM,sBAAN,0KAAkCL,aAAAA,CAAW;IAKlD,YAAY,EACV,KAAA,EACA,aAAA,EACA,UAAU,CAAA,2BAAA,kKAA8BC,kBAAAA,EAAgB,KAAK,CAAC,EAAA,EAChE,CAIG;QACD,KAAA,CAAM;YAAE,MAAAC;YAAM;YAAS;QAAM,CAAC;QAbhC,IAAA,CAAkBG,KAAAA,GAAU;QAc1B,IAAA,CAAK,aAAA,GAAgB;IACvB;IAEA,OAAO,WAAW,KAAA,EAA8C;QAC9D,mKAAOL,aAAAA,CAAW,SAAA,CAAU,OAAOG,QAAM;IAC3C;AACF;AApBoBE,OAAAD;;AHGpB,eAAsB,cAAqC,EACzD,QAAA,EACA,KAAA,EACA,cAAA,EACA,MAAA,EACA,QAAA,EACF,EAMkC;IAChC,IAAI,SAAS,MAAM;QACjB,MAAM,IAAI,gBAAgB;YAAE,UAAU,SAAS,QAAA;QAAS,CAAC;IAC3D;IAEA,IAAI;QACF,OAAO,MAAM,gBAAgB;YAAE;YAAU;QAAM,CAAC;IAClD,EAAA,OAAS,OAAO;QACd,IACE,kBAAkB,QAClB,CAAA,CACE,gBAAgB,UAAA,CAAW,KAAK,KAChC,0BAA0B,UAAA,CAAW,KAAK,CAAA,GAE5C;YACA,MAAM;QACR;QAEA,IAAI,mBAA2D;QAE/D,IAAI;YACF,mBAAmB,MAAM,eAAe;gBACtC;gBACA;gBACA,iBAAiB,CAAC,EAAE,QAAA,CAAS,CAAA,GAC3BE,8LAAAA,EAAS,KAAA,CAAM,QAAQ,CAAA,CAAE,UAAU,EAAE,UAAA;gBACvC;gBACA;gBACA;YACF,CAAC;QACH,EAAA,OAAS,aAAa;YACpB,MAAM,IAAI,oBAAoB;gBAC5B,OAAO;gBACP,eAAe;YACjB,CAAC;QACH;QAGA,IAAI,oBAAoB,MAAM;YAC5B,MAAM;QACR;QAEA,OAAO,MAAM,gBAAgB;YAAE,UAAU;YAAkB;QAAM,CAAC;IACpE;AACF;AAEA,eAAe,gBAAuC,EACpD,QAAA,EACA,KAAA,EACF,EAGkC;IAChC,MAAM,WAAW,SAAS,QAAA;IAE1B,MAAMC,QAAO,KAAA,CAAM,QAAQ,CAAA;IAE3B,IAAIA,SAAQ,MAAM;QAChB,MAAM,IAAI,gBAAgB;YACxB,UAAU,SAAS,QAAA;YACnB,gBAAgB,OAAO,IAAA,CAAK,KAAK;QACnC,CAAC;IACH;IAEA,MAAM,4LAASD,WAAAA,EAASC,MAAK,UAAU;IAMvC,MAAM,cACJ,SAAS,IAAA,CAAK,IAAA,CAAK,MAAM,8KACrBC,oBAAAA,EAAkB;QAAE,OAAO,CAAC;QAAG;IAAO,CAAC,KACvCC,wLAAAA,EAAc;QAAE,MAAM,SAAS,IAAA;QAAM;IAAO,CAAC;IAEnD,IAAI,YAAY,OAAA,KAAY,OAAO;QACjC,MAAM,IAAI,0BAA0B;YAClC;YACA,UAAU,SAAS,IAAA;YACnB,OAAO,YAAY,KAAA;QACrB,CAAC;IACH;IAEA,OAAO;QACL,MAAM;QACN,YAAY,SAAS,UAAA;QACrB;QACA,MAAM,YAAY,KAAA;IACpB;AACF;;AI7GO,SAAS,gBACd,SAAA,EACoB;IACpB,MAAM,gBAAgB,UACnB,MAAA,CAAO,CAAA,OAAQ,KAAK,IAAA,KAAS,MAAM,EACnC,GAAA,CAAI,CAAA,OAAQ,KAAK,IAAI,EACrB,IAAA,CAAK,EAAE;IAEV,OAAO,cAAc,MAAA,GAAS,IAAI,gBAAgB,KAAA;AACpD;;ACFO,SAAS,mBAA0C,EACxD,MAAAC,QAAO,EAAA,EACP,KAAA,EACA,SAAA,EACA,KAAA,EACA,SAAA,EACA,WAAA,EACA,SAAA,EACA,iBAAA,EACF,EAS2B;IACzB,MAAM,mBAA2C,CAAC,CAAA;IAElD,MAAM,UAAU,CAAC,CAAA;IAIjB,IAAI,UAAU,MAAA,GAAS,GAAG;QACxB,QAAQ,IAAA,IACH,UAAU,GAAA,CAAI,CAAA,OACf,KAAK,IAAA,KAAS,SACV;gBAAE,GAAG,IAAA;gBAAM,MAAM;YAAqB,IACtC;gBAAE,GAAG,IAAA;gBAAM,MAAM;YAA8B;IAGzD;IAEA,IAAI,MAAM,MAAA,GAAS,GAAG;QACpB,QAAQ,IAAA,IACH,MAAM,GAAA,CAAI,CAAA,OAAA,CAAS;gBACpB,MAAM;gBACN,MAAM,KAAK,MAAA;gBACX,UAAU,KAAK,QAAA;YACjB,CAAA,CAAE;IAEN;IAEA,IAAIA,MAAK,MAAA,GAAS,GAAG;QACnB,QAAQ,IAAA,CAAK;YAAE,MAAM;YAAiB,MAAAA;QAAK,CAAC;IAC9C;IAEA,IAAI,UAAU,MAAA,GAAS,GAAG;QACxB,QAAQ,IAAA,CAAK,GAAG,SAAS;IAC3B;IAEA,IAAI,QAAQ,MAAA,GAAS,GAAG;QACtB,iBAAiB,IAAA,CAAK;YACpB,MAAM;YACN;YACA,IAAI;QACN,CAAC;IACH;IAEA,IAAI,YAAY,MAAA,GAAS,GAAG;QAC1B,iBAAiB,IAAA,CAAK;YACpB,MAAM;YACN,IAAI,kBAAkB;YACtB,SAAS,YAAY,GAAA,CAAI,CAAC,eAA+B;gBACvD,MAAMC,QAAO,KAAA,CAAM,WAAW,QAAQ,CAAA;gBACtC,OAAA,CAAOA,SAAA,OAAA,KAAA,IAAAA,MAAM,gCAAA,KAAoC,OAC7C;oBACE,MAAM;oBACN,YAAY,WAAW,UAAA;oBACvB,UAAU,WAAW,QAAA;oBACrB,QAAQA,MAAK,gCAAA,CAAiC,WAAW,MAAM;oBAC/D,sBAAsBA,MAAK,gCAAA,CACzB,WAAW,MAAA;gBAEf,IACA;oBACE,MAAM;oBACN,YAAY,WAAW,UAAA;oBACvB,UAAU,WAAW,QAAA;oBACrB,QAAQ,WAAW,MAAA;gBACrB;YACN,CAAC;QACH,CAAC;IACH;IAEA,OAAO;AACT;;AZ3DA,IAAMC,+LAAqBC,oBAAAA,EAAkB;IAC3C,QAAQ;IACR,MAAM;AACR,CAAC;AAED,IAAM,qMAA4BA,oBAAAA,EAAkB;IAClD,QAAQ;IACR,MAAM;AACR,CAAC;AA0DD,eAAsB,aAIpB,EACA,KAAA,EACA,KAAA,EACA,UAAA,EACA,MAAA,EACA,MAAA,EACA,QAAA,EACA,YAAY,aAAA,EACZ,WAAA,EACA,OAAA,EACA,WAAW,CAAA,EACX,gCAAgC,oBAAoB,yBAAA,EACpD,qBAAqB,MAAA,EACrB,4BAA4B,gBAAgB,KAAA,EAC5C,wBAAwB,SAAA,EACxB,6BAAA,EACA,kBAAkB,6BAAA,EAClB,0BAA0B,WAAA,EAC1B,0BAA0B,WAAA,EAC1B,6BAA6B,cAAA,EAC7B,WAAW,EACT,YAAAC,cAAaF,mBAAAA,EACb,cAAc,IAAM,aAAA,GAAA,IAAI,KAAK,CAAA,EAC/B,GAAI,CAAC,CAAA,EACL,YAAA,EACA,GAAG,UACL,EA6GiD;IArPjD,IAAAG;IAsPE,IAAI,WAAW,GAAG;QAChB,MAAM,IAAI,qBAAqB;YAC7B,WAAW;YACX,OAAO;YACP,SAAS;QACX,CAAC;IACH;IAEA,MAAM,EAAE,UAAA,EAAY,KAAA,CAAM,CAAA,GAAI,eAAe;QAAE,YAAY;IAAc,CAAC;IAE1E,MAAM,0BAA0B,2BAA2B;QACzD;QACA;QACA;QACA,UAAU;YAAE,GAAG,QAAA;YAAU;QAAW;IACtC,CAAC;IAED,MAAM,gBAAgB,kBAAkB;QACtC,QAAQ;YACN,QAAA,CAAQA,OAAA,UAAA,OAAA,KAAA,IAAA,OAAQ,sBAAA,CAAuB;gBAAE;gBAAQ;YAAM,EAAA,KAA/C,OAAAA,OAAqD;YAC7D;YACA;QACF;QACA;IACF,CAAC;IAED,MAAM,SAAS,UAAU,SAAS;IAElC,OAAO,WAAW;QAChB,MAAM;QACN,YAAY,0BAA0B;YACpC;YACA,YAAY;gBACV,GAAG,sBAAsB;oBACvB,aAAa;oBACb;gBACF,CAAC,CAAA;gBACD,GAAG,uBAAA;gBAAA,SAAA;gBAEH,qBAAqB,MAAM,QAAA;gBAC3B,eAAe,MAAM,OAAA;gBAAA,6DAAA;gBAErB,aAAa;oBACX,OAAO,IAAM,KAAK,SAAA,CAAU;4BAAE;4BAAQ;4BAAQ;wBAAS,CAAC;gBAC1D;gBACA,wBAAwB;YAC1B;QACF,CAAC;QACD;QACA,IAAI,OAAM,SAAQ;YAvStB,IAAAA,MAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA;YAwSM,MAAM,eAAe,oBAAoB,QAAQ;YAEjD,IAAI;YAGJ,IAAI,mBAAyC,CAAC,CAAA;YAC9C,IAAI,qBAA6C,CAAC,CAAA;YAClD,IAAI,0BAAkD,CAAC,CAAA;YACvD,IAAI,YAAY;YAChB,MAAM,mBAA2C,CAAC,CAAA;YAClD,IAAIC,QAAO;YACX,MAAM,UAAwD,CAAC,CAAA;YAC/D,MAAM,QAAoD,CAAC,CAAA;YAC3D,IAAI,QAA4B;gBAC9B,kBAAkB;gBAClB,cAAc;gBACd,aAAa;YACf;YAEA,IAAI,WAA4D;YAEhE,GAAG;gBAED,MAAM,eAAe,cAAc,IAAI,cAAc,IAAA,GAAO;gBAE5D,MAAM,oBAAoB;uBACrB,cAAc,QAAA;uBACd;iBACL;gBAEA,MAAM,oBAAoB,MAAA,CAAM,eAAA,OAAA,KAAA,IAAA,YAAc;oBAC5C;oBACA;oBACA;oBACA,YAAY;gBACd,EAAA;gBAEA,MAAM,iBAAA,CAAiBD,OAAA,qBAAA,OAAA,KAAA,IAAA,kBAAmB,UAAA,KAAnB,OAAAA,OAAiC;gBACxD,MAAM,kBAAA,CACJ,KAAA,qBAAA,OAAA,KAAA,IAAA,kBAAmB,wBAAA,KAAnB,OAAA,KAA+C;gBACjD,MAAM,YAAA,CAAY,KAAA,qBAAA,OAAA,KAAA,IAAA,kBAAmB,KAAA,KAAnB,OAAA,KAA4B;gBAE9C,MAAM,iBAAiB,MAAM,6BAA6B;oBACxD,QAAQ;wBACN,MAAM;wBACN,QAAQ,cAAc,MAAA;wBACtB,UAAU;oBACZ;oBACA,wBAAwB,UAAU,iBAAA;oBAClC,kBAAA,CAAkB,KAAA,UAAU,WAAA,KAAV,OAAA,KAAA,IAAA,GAAuB,IAAA,CAAK;gBAChD,CAAC;gBAED,MAAM,OAAO;oBACX,MAAM;oBACN,GAAG,0BAA0B;wBAC3B;wBACA,YAAY;wBACZ,aAAa;oBACf,CAAC,CAAA;gBACH;gBAEA,uBAAuB,MAAM,MAAM,IACjC,WAAW;wBACT,MAAM;wBACN,YAAY,0BAA0B;4BACpC;4BACA,YAAY;gCACV,GAAG,sBAAsB;oCACvB,aAAa;oCACb;gCACF,CAAC,CAAA;gCACD,GAAG,uBAAA;gCAAA,SAAA;gCAEH,qBAAqB,UAAU,QAAA;gCAC/B,eAAe,UAAU,OAAA;gCAAA,UAAA;gCAEzB,oBAAoB;oCAAE,OAAO,IAAM;gCAAa;gCAChD,sBAAsB;oCACpB,OAAO,IAAM,sBAAsB,cAAc;gCACnD;gCACA,mBAAmB;oCAAA,0CAAA;oCAEjB,OAAO,MAAG;wCA1X5B,IAAAA;wCA0X+B,OAAA,CAAAA,OAAA,KAAK,KAAA,KAAL,OAAA,KAAA,IAAAA,KAAY,GAAA,CAAI,CAAAE,QAAQ,KAAK,SAAA,CAAUA,KAAI;oCAAA;gCAC1D;gCACA,wBAAwB;oCACtB,OAAO,IACL,KAAK,UAAA,IAAc,OACf,KAAK,SAAA,CAAU,KAAK,UAAU,IAC9B,KAAA;gCACR;gCAAA,2CAAA;gCAGA,iBAAiB,UAAU,QAAA;gCAC3B,wBAAwB,UAAU,OAAA;gCAClC,oCAAoC,SAAS,gBAAA;gCAC7C,6BAA6B,SAAS,SAAA;gCACtC,mCAAmC,SAAS,eAAA;gCAC5C,iCAAiC,SAAS,aAAA;gCAC1C,8BAA8B,SAAS,WAAA;gCACvC,wBAAwB,SAAS,IAAA;gCACjC,wBAAwB,SAAS,IAAA;4BACnC;wBACF,CAAC;wBACD;wBACA,IAAI,OAAMC,UAAQ;4BAhZ9B,IAAAH,MAAAI,KAAAC,KAAAC,KAAAC,KAAAC;4BAiZc,MAAM,SAAS,MAAM,UAAU,UAAA,CAAW;gCACxC;gCACA,GAAG,YAAA;gCACH,aAAa;gCACb,gBAAgB,UAAA,OAAA,KAAA,IAAA,OAAQ,cAAA,CAAe;oCAAE;gCAAM;gCAC/C,QAAQ;gCACR,kBAAkB;gCAClB;gCACA;4BACF,CAAC;4BAGD,MAAM,eAAe;gCACnB,IAAA,CAAIJ,MAAAA,CAAAJ,OAAA,OAAO,QAAA,KAAP,OAAA,KAAA,IAAAA,KAAiB,EAAA,KAAjB,OAAAI,MAAuBL,YAAW;gCACtC,WAAA,CAAWO,MAAAA,CAAAD,MAAA,OAAO,QAAA,KAAP,OAAA,KAAA,IAAAA,IAAiB,SAAA,KAAjB,OAAAC,MAA8B,YAAY;gCACrD,SAAA,CAASE,MAAAA,CAAAD,MAAA,OAAO,QAAA,KAAP,OAAA,KAAA,IAAAA,IAAiB,OAAA,KAAjB,OAAAC,MAA4B,UAAU,OAAA;4BACjD;4BAGAL,MAAK,aAAA,CACH,0BAA0B;gCACxB;gCACA,YAAY;oCACV,4BAA4B,OAAO,YAAA;oCACnC,oBAAoB;wCAClB,QAAQ,IAAM,OAAO,IAAA;oCACvB;oCACA,yBAAyB;wCACvB,QAAQ,IAAM,KAAK,SAAA,CAAU,OAAO,SAAS;oCAC/C;oCACA,kBAAkB,aAAa,EAAA;oCAC/B,qBAAqB,aAAa,OAAA;oCAClC,yBACE,aAAa,SAAA,CAAU,WAAA,CAAY;oCAErC,yBAAyB,OAAO,KAAA,CAAM,YAAA;oCACtC,6BAA6B,OAAO,KAAA,CAAM,gBAAA;oCAAA,2CAAA;oCAG1C,kCAAkC;wCAAC,OAAO,YAAY;qCAAA;oCACtD,sBAAsB,aAAa,EAAA;oCACnC,yBAAyB,aAAa,OAAA;oCACtC,6BAA6B,OAAO,KAAA,CAAM,YAAA;oCAC1C,8BAA8B,OAAO,KAAA,CAAM,gBAAA;gCAC7C;4BACF,CAAC;4BAGH,OAAO;gCAAE,GAAG,MAAA;gCAAQ,UAAU;4BAAa;wBAC7C;oBACF,CAAC;gBAIH,mBAAmB,MAAM,QAAQ,GAAA,CAAA,CAAA,CAC9B,KAAA,qBAAqB,SAAA,KAArB,OAAA,KAAkC,CAAC,CAAA,EAAG,GAAA,CAAI,CAAA,WACzC,cAAc;wBACZ;wBACA;wBACA;wBACA;wBACA,UAAU;oBACZ,CAAC;gBAKL,qBACE,SAAS,OACL,CAAC,CAAA,GACD,MAAM,aAAa;oBACjB,WAAW;oBACX;oBACA;oBACA;oBACA,UAAU;oBACV;gBACF,CAAC;gBAGP,MAAM,eAAe,4BACnB,qBAAqB,KAAA;gBAEvB,QAAQ,sBAAsB,OAAO,YAAY;gBAGjD,IAAI,eAAoD;gBACxD,IAAI,EAAE,YAAY,UAAU;oBAC1B,IACE,iBACA,qBAAqB,YAAA,KAAiB,YAAA,kDAAA;oBAEtC,iBAAiB,MAAA,KAAW,GAC5B;wBACA,eAAe;oBACjB,OAAA,IAAA,wBAAA;oBAEE,iBAAiB,MAAA,GAAS,KAAA,uCAAA;oBAE1B,mBAAmB,MAAA,KAAW,iBAAiB,MAAA,EAC/C;wBACA,eAAe;oBACjB;gBACF;gBAGA,MAAM,eAAA,CAAe,KAAA,qBAAqB,IAAA,KAArB,OAAA,KAA6B;gBAClD,MAAM,mCACJ,aAAa,cAAA,0BAAA;gBACbF,MAAK,OAAA,CAAQ,MAAMA,QACf,aAAa,SAAA,CAAU,IACvB;gBACN,MAAM,WACJ,iBAAiB,aACb,8BAA8B,gCAAgC,IAC9D;gBAENA,QACE,iBAAiB,cAAc,aAAa,aACxCA,QAAO,WACP;gBAEN,0BAA0B,mBACxB,qBAAqB,SAAA;gBAIvB,QAAQ,IAAA,CAAK,GAAA,CAAI,KAAA,qBAAqB,OAAA,KAArB,OAAA,KAAgC,CAAC,CAAE;gBAGpD,IAAI,aAAa,YAAY;oBAI3B,MAAM,cAAc,gBAAA,CAClB,iBAAiB,MAAA,GAAS,CAC5B,CAAA;oBAEA,IAAI,OAAO,YAAY,OAAA,KAAY,UAAU;wBAC3C,YAAY,OAAA,IAAW;oBACzB,OAAO;wBACL,YAAY,OAAA,CAAQ,IAAA,CAAK;4BACvB,MAAM;4BACN,MAAM;wBACR,CAAC;oBACH;gBACF,OAAO;oBACL,iBAAiB,IAAA,IACZ,mBAAmB;wBACpB,MAAAA;wBACA,OAAO,QAAQ,qBAAqB,KAAK;wBACzC,WAAW,mBAAmB,qBAAqB,SAAS;wBAC5D,OAAO,SAAA,OAAA,QAAU,CAAC;wBAClB,WAAW;wBACX,aAAa;wBACb,WAAW,kBAAkB;wBAC7B;oBACF,CAAC;gBAEL;gBAGA,MAAM,oBAAuC;oBAC3C;oBACA,MAAM;oBAAA,qFAAA;oBAEN,WAAW,gBAAgB,uBAAuB;oBAClD,kBAAkB;oBAClB,OAAO,QAAQ,qBAAqB,KAAK;oBACzC,SAAA,CAAS,KAAA,qBAAqB,OAAA,KAArB,OAAA,KAAgC,CAAC,CAAA;oBAC1C,WAAW;oBACX,aAAa;oBACb,cAAc,qBAAqB,YAAA;oBACnC,OAAO;oBACP,UAAU,qBAAqB,QAAA;oBAC/B,UAAU,qBAAqB,QAAA;oBAC/B,SAAA,CAAS,KAAA,qBAAqB,OAAA,KAArB,OAAA,KAAgC,CAAC;oBAC1C,UAAU;wBACR,GAAG,qBAAqB,QAAA;wBACxB,SAAA,CAAS,KAAA,qBAAqB,WAAA,KAArB,OAAA,KAAA,IAAA,GAAkC,OAAA;wBAC3C,MAAA,CAAM,KAAA,qBAAqB,WAAA,KAArB,OAAA,KAAA,IAAA,GAAkC,IAAA;wBAAA,iEAAA;wBAGxC,UAAU,gBAAgB,gBAAgB;oBAC5C;oBACA,kBAAkB,qBAAqB,gBAAA;oBACvC,+BAA+B,qBAAqB,gBAAA;oBACpD,aAAa,iBAAiB;gBAChC;gBACA,MAAM,IAAA,CAAK,iBAAiB;gBAC5B,MAAA,CAAM,gBAAA,OAAA,KAAA,IAAA,aAAe,kBAAA;gBAErB,WAAW;YACb,QAAS,aAAa,OAAA;YAGtB,KAAK,aAAA,CACH,0BAA0B;gBACxB;gBACA,YAAY;oBACV,4BAA4B,qBAAqB,YAAA;oBACjD,oBAAoB;wBAClB,QAAQ,IAAM,qBAAqB,IAAA;oBACrC;oBACA,yBAAyB;wBACvB,QAAQ,IAAM,KAAK,SAAA,CAAU,qBAAqB,SAAS;oBAC7D;oBAEA,yBAAyB,qBAAqB,KAAA,CAAM,YAAA;oBACpD,6BACE,qBAAqB,KAAA,CAAM,gBAAA;gBAC/B;YACF,CAAC;YAGH,OAAO,IAAI,0BAA0B;gBACnC,MAAAA;gBACA,OAAO,QAAQ,qBAAqB,KAAK;gBACzC,WAAW,gBAAgB,uBAAuB;gBAClD,kBAAkB;gBAClB;gBACA,gBAAgB,MAAM;oBACpB,IAAI,UAAU,MAAM;wBAClB,MAAM,IAAI,uBAAuB;oBACnC;oBAEA,OAAO,OAAO,WAAA,CACZ;wBAAE,MAAAA;oBAAK,GACP;wBACE,UAAU,qBAAqB,QAAA;wBAC/B;wBACA,cAAc,qBAAqB,YAAA;oBACrC;gBAEJ;gBACA,WAAW;gBACX,aAAa;gBACb,cAAc,qBAAqB,YAAA;gBACnC;gBACA,UAAU,qBAAqB,QAAA;gBAC/B,SAAA,CAAS,KAAA,qBAAqB,OAAA,KAArB,OAAA,KAAgC,CAAC;gBAC1C,UAAU;oBACR,GAAG,qBAAqB,QAAA;oBACxB,SAAA,CAAS,KAAA,qBAAqB,WAAA,KAArB,OAAA,KAAA,IAAA,GAAkC,OAAA;oBAC3C,MAAA,CAAM,KAAA,qBAAqB,WAAA,KAArB,OAAA,KAAA,IAAA,GAAkC,IAAA;oBACxC,UAAU;gBACZ;gBACA,UAAU,qBAAqB,QAAA;gBAC/B;gBACA,kBAAkB,qBAAqB,gBAAA;YACzC,CAAC;QACH;IACF,CAAC;AACH;AAEA,eAAe,aAAoC,EACjD,SAAA,EACA,KAAA,EACA,MAAA,EACA,SAAA,EACA,QAAA,EACA,WAAA,EACF,EAOoC;IAClC,MAAM,cAAc,MAAM,QAAQ,GAAA,CAChC,UAAU,GAAA,CAAI,OAAO,EAAE,UAAA,EAAY,QAAA,EAAU,IAAA,CAAK,CAAA,KAAM;QACtD,MAAMC,QAAO,KAAA,CAAM,QAAQ,CAAA;QAE3B,IAAA,CAAIA,SAAA,OAAA,KAAA,IAAAA,MAAM,OAAA,KAAW,MAAM;YACzB,OAAO,KAAA;QACT;QAEA,MAAM,SAAS,MAAM,WAAW;YAC9B,MAAM;YACN,YAAY,0BAA0B;gBACpC;gBACA,YAAY;oBACV,GAAG,sBAAsB;wBACvB,aAAa;wBACb;oBACF,CAAC,CAAA;oBACD,oBAAoB;oBACpB,kBAAkB;oBAClB,oBAAoB;wBAClB,QAAQ,IAAM,KAAK,SAAA,CAAU,IAAI;oBACnC;gBACF;YACF,CAAC;YACD;YACA,IAAI,OAAM,SAAQ;gBAChB,IAAI;oBACF,MAAMO,UAAS,MAAMP,MAAK,OAAA,CAAS,MAAM;wBACvC;wBACA;wBACA;oBACF,CAAC;oBAED,IAAI;wBACF,KAAK,aAAA,CACH,0BAA0B;4BACxB;4BACA,YAAY;gCACV,sBAAsB;oCACpB,QAAQ,IAAM,KAAK,SAAA,CAAUO,OAAM;gCACrC;4BACF;wBACF,CAAC;oBAEL,EAAA,OAAS,SAAS,CAKlB;oBAEA,OAAOA;gBACT,EAAA,OAAS,OAAO;oBACd,MAAM,IAAI,mBAAmB;wBAC3B;wBACA;wBACA,UAAU;wBACV,OAAO;oBACT,CAAC;gBACH;YACF;QACF,CAAC;QAED,OAAO;YACL,MAAM;YACN;YACA;YACA;YACA;QACF;IACF,CAAC;IAGH,OAAO,YAAY,MAAA,CACjB,CAAC,SAAiD,UAAU;AAEhE;AAEA,IAAM,4BAAN,MAEA;IAgCE,YAAY,OAAA,CAoBT;QACD,IAAA,CAAK,IAAA,GAAO,QAAQ,IAAA;QACpB,IAAA,CAAK,KAAA,GAAQ,QAAQ,KAAA;QACrB,IAAA,CAAK,SAAA,GAAY,QAAQ,SAAA;QACzB,IAAA,CAAK,gBAAA,GAAmB,QAAQ,gBAAA;QAChC,IAAA,CAAK,SAAA,GAAY,QAAQ,SAAA;QACzB,IAAA,CAAK,WAAA,GAAc,QAAQ,WAAA;QAC3B,IAAA,CAAK,YAAA,GAAe,QAAQ,YAAA;QAC5B,IAAA,CAAK,KAAA,GAAQ,QAAQ,KAAA;QACrB,IAAA,CAAK,QAAA,GAAW,QAAQ,QAAA;QACxB,IAAA,CAAK,OAAA,GAAU,QAAQ,OAAA;QACvB,IAAA,CAAK,QAAA,GAAW,QAAQ,QAAA;QACxB,IAAA,CAAK,KAAA,GAAQ,QAAQ,KAAA;QACrB,IAAA,CAAK,6BAAA,GAAgC,QAAQ,gBAAA;QAC7C,IAAA,CAAK,gBAAA,GAAmB,QAAQ,gBAAA;QAChC,IAAA,CAAK,QAAA,GAAW,QAAQ,QAAA;QACxB,IAAA,CAAK,cAAA,GAAiB,QAAQ,cAAA;QAC9B,IAAA,CAAK,OAAA,GAAU,QAAQ,OAAA;IACzB;IAEA,IAAI,sBAAsB;QACxB,OAAO,IAAA,CAAK,cAAA,CAAe;IAC7B;AACF;AAEA,SAAS,mBACP,SAAA,EAUA;IACA,IAAI,aAAa,MAAM;QACrB,OAAO,CAAC,CAAA;IACV;IAEA,IAAI,OAAO,cAAc,UAAU;QACjC,OAAO;YAAC;gBAAE,MAAM;gBAAQ,MAAM;YAAU,CAAC;SAAA;IAC3C;IAEA,OAAO;AACT;AAEA,SAAS,QACP,KAAA,EAMsB;IA11BxB,IAAAT;IA21BE,OAAA,CAAOA,OAAA,SAAA,OAAA,KAAA,IAAA,MAAO,GAAA,CAAI,CAAA,OAAQ,IAAI,qBAAqB,IAAI,EAAA,KAAhD,OAAAA,OAAsD,CAAC,CAAA;AAChE;;Aa51BA,IAAA,iBAAA,CAAA;AAAA,SAAA,gBAAA;IAAA,QAAA,IAAA;IAAA,MAAA,IAAA;AAAA;;;;;AEGA,IAAMqB,SAAO;AACb,IAAMC,WAAS,CAAA,gBAAA,EAAmBD,MAAI,EAAA;AACtC,IAAME,WAAS,OAAO,GAAA,CAAID,QAAM;AALhC,IAAAE;AAOO,IAAM,yBAAN,0KAAqCJ,aAAAA,CAAW;IAKrD,YAAY,EACV,KAAA,EACA,OAAA,EACF,CAGG;QACD,KAAA,CAAM;YAAE,MAAAC;YAAM;QAAQ,CAAC;QAXzB,IAAA,CAAkBG,KAAAA,GAAU;QAa1B,IAAA,CAAK,KAAA,GAAQ;IACf;IAEA,OAAO,WAAW,KAAA,EAAiD;QACjE,mKAAOJ,aAAAA,CAAW,SAAA,CAAU,OAAOE,QAAM;IAC3C;AACF;AAnBoBE,OAAAD;;ACNpB,IAAMG,SAAO;AACb,IAAMC,WAAS,CAAA,gBAAA,EAAmBD,MAAI,EAAA;AACtC,IAAME,WAAS,OAAO,GAAA,CAAID,QAAM;AAJhC,IAAAE;AASO,IAAM,iBAAN,cAA6BJ,yKAAAA,CAAW;IAG7C,YAAY,EACV,MAAAC,SAAO,gBAAA,EACP,OAAA,EACA,KAAA,EACF,CAIG;QACD,KAAA,CAAM;YAAE,MAAAA;YAAM;YAAS;QAAM,CAAC;QAXhC,IAAA,CAAkBG,KAAAA,GAAU;IAY5B;IAEA,OAAO,WAAW,KAAA,EAAyC;QACzD,OAAOJ,yKAAAA,CAAW,SAAA,CAAU,OAAOE,QAAM;IAC3C;AACF;AAjBoBE,OAAAD;;AH+Bb,IAAM,OAAO,IAAA,CAA+B;QACjD,MAAM;QAEN,gBAAgB,IAAA,CAAO;gBAAE,MAAM;YAAO,CAAA;QAEtC,wBAAuB,EAAE,MAAA,CAAO,CAAA,EAAmC;YACjE,OAAO;QACT;QAEA,cAAa,EAAE,MAAAE,KAAAA,CAAK,CAAA,EAAqB;YACvC,OAAO;gBAAE,SAASA;YAAK;QACzB;QAEA,aAAY,EAAE,MAAAA,KAAAA,CAAK,CAAA,EAAqB;YACtC,OAAOA;QACT;IACF,CAAA;AAEO,IAAM,SAAS,CAAS,EAC7B,QAAQ,WAAA,EACV,KAE2C;IACzC,MAAM,SAASC,8LAAAA,EAAS,WAAW;IAEnC,OAAO;QACL,MAAM;QAEN,gBAAgB,CAAC,EAAE,KAAA,CAAM,CAAA,GAAA,CAAO;gBAC9B,MAAM;gBACN,QAAQ,MAAM,yBAAA,GAA4B,OAAO,UAAA,GAAa,KAAA;YAChE,CAAA;QAEA,wBAAuB,EAAE,MAAA,EAAQ,KAAA,CAAM,CAAA,EAAG;YAGxC,OAAO,MAAM,yBAAA,GACT,SACA,sBAAsB;gBACpB,QAAQ;gBACR,QAAQ,OAAO,UAAA;YACjB,CAAC;QACP;QAEA,cAAa,EAAE,MAAAD,KAAAA,CAAK,CAAA,EAAqB;YACvC,MAAM,4LAASE,mBAAAA,EAAiBF,KAAI;YAEpC,OAAQ,OAAO,KAAA,EAAO;gBACpB,KAAK;gBACL,KAAK;oBACH,OAAO,KAAA;gBAET,KAAK;gBACL,KAAK;oBACH,OAAO;wBAAA,oDAAA;wBAEL,SAAS,OAAO,KAAA;oBAClB;gBAEF;oBAAS;wBACP,MAAM,mBAA0B,OAAO,KAAA;wBACvC,MAAM,IAAI,MAAM,CAAA,yBAAA,EAA4B,gBAAgB,EAAE;oBAChE;YACF;QACF;QAEA,aACE,EAAE,MAAAA,KAAAA,CAAK,CAAA,EACP,OAAA,EAKA;YACA,MAAM,uLAAcG,gBAAAA,EAAc;gBAAE,MAAAH;YAAK,CAAC;YAE1C,IAAI,CAAC,YAAY,OAAA,EAAS;gBACxB,MAAM,IAAI,uBAAuB;oBAC/B,SAAS;oBACT,OAAO,YAAY,KAAA;oBACnB,MAAAA;oBACA,UAAU,QAAQ,QAAA;oBAClB,OAAO,QAAQ,KAAA;oBACf,cAAc,QAAQ,YAAA;gBACxB,CAAC;YACH;YAEA,MAAM,4LAAmBI,oBAAAA,EAAkB;gBACzC,OAAO,YAAY,KAAA;gBACnB;YACF,CAAC;YAED,IAAI,CAAC,iBAAiB,OAAA,EAAS;gBAC7B,MAAM,IAAI,uBAAuB;oBAC/B,SAAS;oBACT,OAAO,iBAAiB,KAAA;oBACxB,MAAAJ;oBACA,UAAU,QAAQ,QAAA;oBAClB,OAAO,QAAQ,KAAA;oBACf,cAAc,QAAQ,YAAA;gBACxB,CAAC;YACH;YAEA,OAAO,iBAAiB,KAAA;QAC1B;IACF;AACF;;;AI9IA,IAAM,mBAAmB;IACvB,MAAM;IACN,MAAM;AACR;AAmBO,SAAS,aAAoC,EAClD,YAAY,EAAA,EACZ,WAAW,MAAA,EACX,WAAW,EAAE,OAAAM,8KAAQ,QAAA,CAAc,CAAA,GAAI,CAAC,CAAA,EAC1C,GASI,CAAC,CAAA,EAE+D;IAClE,IAAI;IAEJ,IAAI,OAAO,aAAa,YAAY;QAClC,cAAc,CAAA,WAAU;YACtB,MAAM,QAAQ,SAAS,MAAM;YAE7B,IAAI,SAAS,MAAM;gBACjB,OAAO;YACT;YAEA,IAAI,CAAC,MAAM,MAAA,EAAQ;gBACjB,MAAM,IAAI,MAAM,CAAA,iDAAA,CAAmD;YACrE;YAEA,IAAI,CAAC,OAAO,UAAA,CAAW,KAAK,GAAG;gBAC7B,MAAM,IAAI,MACR,CAAA,iFAAA,EAAoF,KAAK,CAAA,0BAAA,EAA6B,MAAM,CAAA,CAAA,CAAA;YAEhI;YAEA,OAAO;QACT;IACF,OAAO;QACL,MAAM,gBACJ,OAAO,aAAa,WAAW,gBAAA,CAAiB,QAAQ,CAAA,GAAI;QAE9D,IAAI,iBAAiB,MAAM;YACzB,MAAM,gKAAID,uBAAAA,CAAqB;gBAC7B,UAAU;gBACV,SAAS,CAAA,yDAAA,EAA4D,QAAQ,EAAA;YAC/E,CAAC;QACH;QAEA,cAAc,CAAA,WAAU;YACtB,MAAM,QAAQ,cAAc,IAAA,CAAK,MAAM;YAEvC,IAAI,CAAC,OAAO;gBACV,OAAO;YACT;YAEA,OAAO,OAAO,KAAA,CAAM,GAAG,MAAM,KAAK,IAAA,CAAI,SAAA,OAAA,KAAA,IAAA,KAAA,CAAQ,EAAA;QAChD;IACF;IAEA,OAAO,MAAM;QACX,IAAI,SAAS;QAEb,OAAO,IAAI,gBAA8D;YACvE,MAAM,WAAU,KAAA,EAAO,UAAA,EAAY;gBACjC,IAAI,MAAM,IAAA,KAAS,cAAc;oBAC/B,IAAI,OAAO,MAAA,GAAS,GAAG;wBACrB,WAAW,OAAA,CAAQ;4BAAE,MAAM;4BAAc,WAAW;wBAAO,CAAC;wBAC5D,SAAS;oBACX;oBAEA,WAAW,OAAA,CAAQ,KAAK;oBACxB;gBACF;gBAEA,UAAU,MAAM,SAAA;gBAEhB,IAAI;gBAEJ,MAAA,CAAQ,QAAQ,YAAY,MAAM,CAAA,KAAM,KAAM;oBAC5C,WAAW,OAAA,CAAQ;wBAAE,MAAM;wBAAc,WAAW;oBAAM,CAAC;oBAC3D,SAAS,OAAO,KAAA,CAAM,MAAM,MAAM;oBAElC,MAAMC,OAAM,SAAS;gBACvB;YACF;QACF,CAAC;IACH;AACF;;;;;AEnHO,SAAS,QAAW,KAAA,EAAiC;IAC1D,OAAO,UAAU,KAAA,IAAY,CAAC,CAAA,GAAI,MAAM,OAAA,CAAQ,KAAK,IAAI,QAAQ;QAAC,KAAK;KAAA;AACzE;;ACQA,eAAsB,cAAc,EAClC,MAAA,EACA,OAAA,EACF,EAGkB;IAChB,MAAM,SAAS,OAAO,SAAA,CAAU;IAChC,IAAI;QACF,MAAO,KAAM;YACX,MAAM,EAAE,IAAA,CAAK,CAAA,GAAI,MAAM,OAAO,IAAA,CAAK;YACnC,IAAI,MAAM;QACZ;IACF,EAAA,OAAS,OAAO;QACd,WAAA,OAAA,KAAA,IAAA,QAAU;IACZ,SAAE;QACA,OAAO,WAAA,CAAY;IACrB;AACF;;ACfO,SAAS,aACd,OAAA,EACA,OAAA,EACiC;IACjC,MAAM,UAAU,QAAQ,SAAA,CAAU;IAClC,MAAM,UAAU,QAAQ,SAAA,CAAU;IAElC,IAAI,YACF,KAAA;IACF,IAAI,YACF,KAAA;IAEF,IAAI,cAAc;IAClB,IAAI,cAAc;IAGlB,eAAe,YACb,UAAA,EACA;QACA,IAAI;YACF,IAAI,aAAa,MAAM;gBACrB,YAAY,QAAQ,IAAA,CAAK;YAC3B;YAEA,MAAM,SAAS,MAAM;YACrB,YAAY,KAAA;YAEZ,IAAI,CAAC,OAAO,IAAA,EAAM;gBAChB,WAAW,OAAA,CAAQ,OAAO,KAAK;YACjC,OAAO;gBACL,WAAW,KAAA,CAAM;YACnB;QACF,EAAA,OAAS,OAAO;YACd,WAAW,KAAA,CAAM,KAAK;QACxB;IACF;IAGA,eAAe,YACb,UAAA,EACA;QACA,IAAI;YACF,IAAI,aAAa,MAAM;gBACrB,YAAY,QAAQ,IAAA,CAAK;YAC3B;YAEA,MAAM,SAAS,MAAM;YACrB,YAAY,KAAA;YAEZ,IAAI,CAAC,OAAO,IAAA,EAAM;gBAChB,WAAW,OAAA,CAAQ,OAAO,KAAK;YACjC,OAAO;gBACL,WAAW,KAAA,CAAM;YACnB;QACF,EAAA,OAAS,OAAO;YACd,WAAW,KAAA,CAAM,KAAK;QACxB;IACF;IAEA,OAAO,IAAI,eAAgC;QACzC,MAAM,MAAK,UAAA,EAAY;YACrB,IAAI;gBAEF,IAAI,aAAa;oBACf,MAAM,YAAY,UAAU;oBAC5B;gBACF;gBAGA,IAAI,aAAa;oBACf,MAAM,YAAY,UAAU;oBAC5B;gBACF;gBAGA,IAAI,aAAa,MAAM;oBACrB,YAAY,QAAQ,IAAA,CAAK;gBAC3B;gBACA,IAAI,aAAa,MAAM;oBACrB,YAAY,QAAQ,IAAA,CAAK;gBAC3B;gBAKA,MAAM,EAAE,MAAA,EAAQ,MAAA,CAAO,CAAA,GAAI,MAAM,QAAQ,IAAA,CAAK;oBAC5C,UAAU,IAAA,CAAK,CAAAI,UAAAA,CAAW;4BAAE,QAAAA;4BAAQ,QAAQ;wBAAQ,CAAA,CAAE;oBACtD,UAAU,IAAA,CAAK,CAAAA,UAAAA,CAAW;4BAAE,QAAAA;4BAAQ,QAAQ;wBAAQ,CAAA,CAAE;iBACvD;gBAED,IAAI,CAAC,OAAO,IAAA,EAAM;oBAChB,WAAW,OAAA,CAAQ,OAAO,KAAK;gBACjC;gBAEA,IAAI,WAAW,SAAS;oBACtB,YAAY,KAAA;oBACZ,IAAI,OAAO,IAAA,EAAM;wBAEf,MAAM,YAAY,UAAU;wBAC5B,cAAc;oBAChB;gBACF,OAAO;oBACL,YAAY,KAAA;oBAEZ,IAAI,OAAO,IAAA,EAAM;wBACf,cAAc;wBACd,MAAM,YAAY,UAAU;oBAC9B;gBACF;YACF,EAAA,OAAS,OAAO;gBACd,WAAW,KAAA,CAAM,KAAK;YACxB;QACF;QACA,SAAS;YACP,QAAQ,MAAA,CAAO;YACf,QAAQ,MAAA,CAAO;QACjB;IACF,CAAC;AACH;;AChDO,SAAS,uBAA8C,EAC5D,KAAA,EACA,eAAA,EACA,iBAAA,EACA,MAAA,EACA,SAAA,EACA,MAAA,EACA,QAAA,EACA,WAAA,EACA,cAAA,EACF,EAUuD;IAErD,IAAI,8BAEO;IACX,MAAM,oBAAoB,IAAI,eAE5B;QACA,OAAM,UAAA,EAAY;YAChB,8BAA8B;QAChC;IACF,CAAC;IAGD,MAAM,kBAA2C,CAAC;IAGlD,MAAM,yBAAyB,aAAA,GAAA,IAAI,IAAY;IAE/C,IAAI,WAAW;IACf,IAAI,cAEY,KAAA;IAEhB,SAAS,eAAe;QAEtB,IAAI,YAAY,uBAAuB,IAAA,KAAS,GAAG;YAIjD,IAAI,eAAe,MAAM;gBACvB,4BAA6B,OAAA,CAAQ,WAAW;YAClD;YAEA,4BAA6B,KAAA,CAAM;QACrC;IACF;IAGA,MAAM,gBAAgB,IAAI,gBAGxB;QACA,MAAM,WACJ,KAAA,EACA,UAAA,EAGA;YACA,MAAM,YAAY,MAAM,IAAA;YAExB,OAAQ,WAAW;gBAEjB,KAAK;gBACL,KAAK;gBACL,KAAK;gBACL,KAAK;gBACL,KAAK;gBACL,KAAK;gBACL,KAAK;oBAAS;wBACZ,WAAW,OAAA,CAAQ,KAAK;wBACxB;oBACF;gBAEA,KAAK;oBAAQ;wBACX,WAAW,OAAA,CACT,IAAI,6BAA6B;4BAC/B,MAAM,MAAM,IAAA;4BACZ,UAAU,MAAM,QAAA;wBAClB,CAAC;wBAEH;oBACF;gBAGA,KAAK;oBAAmB;wBACtB,IAAI,mBAAmB;4BACrB,IAAI,CAAC,eAAA,CAAgB,MAAM,UAAU,CAAA,EAAG;gCACtC,WAAW,OAAA,CAAQ;oCACjB,MAAM;oCACN,YAAY,MAAM,UAAA;oCAClB,UAAU,MAAM,QAAA;gCAClB,CAAC;gCAED,eAAA,CAAgB,MAAM,UAAU,CAAA,GAAI;4BACtC;4BAEA,WAAW,OAAA,CAAQ;gCACjB,MAAM;gCACN,YAAY,MAAM,UAAA;gCAClB,UAAU,MAAM,QAAA;gCAChB,eAAe,MAAM,aAAA;4BACvB,CAAC;wBACH;wBACA;oBACF;gBAGA,KAAK;oBAAa;wBAChB,IAAI;4BACF,MAAM,WAAW,MAAM,cAAc;gCACnC,UAAU;gCACV;gCACA;gCACA;gCACA;4BACF,CAAC;4BAED,WAAW,OAAA,CAAQ,QAAQ;4BAE3B,MAAMC,QAAO,KAAA,CAAO,SAAS,QAAQ,CAAA;4BAErC,IAAIA,MAAK,OAAA,IAAW,MAAM;gCACxB,MAAM,2LAAkB,aAAA,CAAW;gCACnC,uBAAuB,GAAA,CAAI,eAAe;gCAK1C,WAAW;oCACT,MAAM;oCACN,YAAY,0BAA0B;wCACpC;wCACA,YAAY;4CACV,GAAG,sBAAsB;gDACvB,aAAa;gDACb;4CACF,CAAC,CAAA;4CACD,oBAAoB,SAAS,QAAA;4CAC7B,kBAAkB,SAAS,UAAA;4CAC3B,oBAAoB;gDAClB,QAAQ,IAAM,KAAK,SAAA,CAAU,SAAS,IAAI;4CAC5C;wCACF;oCACF,CAAC;oCACD;oCACA,IAAI,OAAM,OACRA,MAAK,OAAA,CAAS,SAAS,IAAA,EAAM;4CAC3B,YAAY,SAAS,UAAA;4CACrB;4CACA;wCACF,CAAC,EAAE,IAAA,CACD,CAAC,WAAgB;4CACf,4BAA6B,OAAA,CAAQ;gDACnC,GAAG,QAAA;gDACH,MAAM;gDACN;4CACF,CAAQ;4CAER,uBAAuB,MAAA,CAAO,eAAe;4CAE7C,aAAa;4CAGb,IAAI;gDACF,KAAK,aAAA,CACH,0BAA0B;oDACxB;oDACA,YAAY;wDACV,sBAAsB;4DACpB,QAAQ,IAAM,KAAK,SAAA,CAAU,MAAM;wDACrC;oDACF;gDACF,CAAC;4CAEL,EAAA,OAAS,SAAS,CAKlB;wCACF,GACA,CAAC,UAAe;4CACd,4BAA6B,OAAA,CAAQ;gDACnC,MAAM;gDACN,OAAO,IAAI,mBAAmB;oDAC5B,YAAY,SAAS,UAAA;oDACrB,UAAU,SAAS,QAAA;oDACnB,UAAU,SAAS,IAAA;oDACnB,OAAO;gDACT,CAAC;4CACH,CAAC;4CAED,uBAAuB,MAAA,CAAO,eAAe;4CAC7C,aAAa;wCACf;gCAEN,CAAC;4BACH;wBACF,EAAA,OAAS,OAAO;4BACd,4BAA6B,OAAA,CAAQ;gCACnC,MAAM;gCACN;4BACF,CAAC;wBACH;wBAEA;oBACF;gBAEA,KAAK;oBAAU;wBACb,cAAc;4BACZ,MAAM;4BACN,cAAc,MAAM,YAAA;4BACpB,UAAU,MAAM,QAAA;4BAChB,OAAO,4BAA4B,MAAM,KAAK;4BAC9C,+BAA+B,MAAM,gBAAA;wBACvC;wBACA;oBACF;gBAEA;oBAAS;wBACP,MAAM,mBAA0B;wBAChC,MAAM,IAAI,MAAM,CAAA,sBAAA,EAAyB,gBAAgB,EAAE;oBAC7D;YACF;QACF;QAEA,QAAQ;YACN,WAAW;YACX,aAAa;QACf;IACF,CAAC;IAGD,OAAO,IAAI,eAAmD;QAC5D,MAAM,OAAM,UAAA,EAAY;YAGtB,OAAO,QAAQ,GAAA,CAAI;gBACjB,gBAAgB,WAAA,CAAY,aAAa,EAAE,MAAA,CACzC,IAAI,eAAe;oBACjB,OAAM,KAAA,EAAO;wBACX,WAAW,OAAA,CAAQ,KAAK;oBAC1B;oBACA,QAAQ,EAER;gBACF,CAAC;gBAEH,kBAAkB,MAAA,CAChB,IAAI,eAAe;oBACjB,OAAM,KAAA,EAAO;wBACX,WAAW,OAAA,CAAQ,KAAK;oBAC1B;oBACA,QAAQ;wBACN,WAAW,KAAA,CAAM;oBACnB;gBACF,CAAC;aAEJ;QACH;IACF,CAAC;AACH;;AJ/RA,IAAMC,+LAAqBC,oBAAAA,EAAkB;IAC3C,QAAQ;IACR,MAAM;AACR,CAAC;AAED,IAAMC,sMAA4BD,oBAAAA,EAAkB;IAClD,QAAQ;IACR,MAAM;AACR,CAAC;AAmHM,SAAS,WAId,EACA,KAAA,EACA,KAAA,EACA,UAAA,EACA,MAAA,EACA,MAAA,EACA,QAAA,EACA,UAAA,EACA,WAAA,EACA,OAAA,EACA,WAAW,CAAA,EACX,gCAAgC,oBAAoBC,0BAAAA,EACpD,qBAAqB,MAAA,EACrB,4BAA4B,gBAAgB,KAAA,EAC5C,wBAAwB,SAAA,EACxB,6BAAA,EACA,kBAAkB,6BAAA,EAClB,iCAAiC,KAAA,EACjC,oBAAoB,8BAAA,EACpB,0BAA0B,WAAA,EAC1B,6BAA6B,cAAA,EAC7B,wBAAwB,SAAA,EACxB,OAAA,EACA,OAAA,EACA,QAAA,EACA,YAAA,EACA,WAAW,EACT,KAAAC,OAAM,GAAA,EACN,YAAAC,cAAaJ,mBAAAA,EACb,cAAc,IAAM,aAAA,GAAA,IAAI,KAAK,CAAA,EAC/B,GAAI,CAAC,CAAA,EACL,GAAG,UACL,EA4H8C;IAC5C,OAAO,IAAI,wBAAuD;QAChE;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,YAAY,QAAQ,SAAS;QAC7B;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,KAAAG;QACA;QACA,YAAAC;QACA;IACF,CAAC;AACH;AAOA,SAAS,4BAKP,MAAA,EAIA;IACA,IAAI,CAAC,QAAQ;QACX,OAAO,IAAI,gBAGT;YACA,WAAU,KAAA,EAAO,UAAA,EAAY;gBAC3B,WAAW,OAAA,CAAQ;oBAAE,MAAM;oBAAO,eAAe,KAAA;gBAAU,CAAC;YAC9D;QACF,CAAC;IACH;IAEA,IAAIC,QAAO;IACX,IAAI,YAAY;IAChB,IAAI,oBAAoB;IAExB,SAAS,iBAAiB,EACxB,UAAA,EACA,gBAAgB,KAAA,CAAA,EAClB,EAKG;QACD,WAAW,OAAA,CAAQ;YACjB,MAAM;gBAAE,MAAM;gBAAc,WAAW;YAAU;YACjD;QACF,CAAC;QACD,YAAY;IACd;IAEA,OAAO,IAAI,gBAGT;QACA,WAAU,KAAA,EAAO,UAAA,EAAY;YAE3B,IAAI,MAAM,IAAA,KAAS,eAAe;gBAChC,iBAAiB;oBAAE;gBAAW,CAAC;YACjC;YAEA,IAAI,MAAM,IAAA,KAAS,cAAc;gBAC/B,WAAW,OAAA,CAAQ;oBAAE,MAAM;oBAAO,eAAe,KAAA;gBAAU,CAAC;gBAC5D;YACF;YAEAA,SAAQ,MAAM,SAAA;YACd,aAAa,MAAM,SAAA;YAGnB,MAAM,SAAS,OAAO,YAAA,CAAa;gBAAE,MAAAA;YAAK,CAAC;YAC3C,IAAI,UAAU,MAAM;gBAElB,MAAM,cAAc,KAAK,SAAA,CAAU,OAAO,OAAO;gBACjD,IAAI,gBAAgB,mBAAmB;oBACrC,iBAAiB;wBAAE;wBAAY,eAAe,OAAO,OAAA;oBAAQ,CAAC;oBAC9D,oBAAoB;gBACtB;YACF;QACF;QAEA,OAAM,UAAA,EAAY;YAEhB,IAAI,UAAU,MAAA,GAAS,GAAG;gBACxB,iBAAiB;oBAAE;gBAAW,CAAC;YACjC;QACF;IACF,CAAC;AACH;AAEA,IAAM,0BAAN,MAEA;IAwDE,YAAY,EACV,KAAA,EACA,SAAA,EACA,OAAA,EACA,QAAA,EACA,YAAY,aAAA,EACZ,WAAA,EACA,MAAA,EACA,MAAA,EACA,QAAA,EACA,KAAA,EACA,UAAA,EACA,iBAAA,EACA,UAAA,EACA,WAAA,EACA,cAAA,EACA,QAAA,EACA,MAAA,EACA,aAAA,EACA,eAAA,EACA,KAAAF,IAAAA,EACA,WAAA,EACA,YAAAC,WAAAA,EACA,iBAAA,EACA,OAAA,EACA,OAAA,EACA,QAAA,EACA,YAAA,EACF,CA8BG;QAjHH,IAAA,CAAiB,eAAA,GAAkB,IAAI,eAErC;QACF,IAAA,CAAiB,YAAA,GAAe,IAAI,eAElC;QACF,IAAA,CAAiB,mBAAA,GAAsB,IAAI,eAEzC;QACF,IAAA,CAAiB,uBAAA,GAA0B,IAAI,eAI7C;QACF,IAAA,CAAiB,WAAA,GAAc,IAAI,eAEjC;QACF,IAAA,CAAiB,gBAAA,GAAmB,IAAI,eAEtC;QACF,IAAA,CAAiB,uBAAA,GAA0B,IAAI,eAE7C;QACF,IAAA,CAAiB,cAAA,GAAiB,IAAI,eAEpC;QACF,IAAA,CAAiB,YAAA,GAAe,IAAI,eAElC;QACF,IAAA,CAAiB,gBAAA,GAAmB,IAAI,eAEtC;QACF,IAAA,CAAiB,kBAAA,GAAqB,IAAI,eAExC;QACF,IAAA,CAAiB,cAAA,GAAiB,IAAI,eAEpC;QACF,IAAA,CAAiB,eAAA,GAAkB,IAAI,eAErC;QACF,IAAA,CAAiB,YAAA,GAAe,IAAI,eAElC;QAlgBJ,IAAAE;QAykBI,IAAI,WAAW,GAAG;YAChB,MAAM,IAAI,qBAAqB;gBAC7B,WAAW;gBACX,OAAO;gBACP,SAAS;YACX,CAAC;QACH;QAEA,IAAA,CAAK,MAAA,GAAS;QAKd,IAAI,mBAAmB;QACvB,IAAI,2BAA2B;QAC/B,IAAI,mBAAmB;QAEvB,IAAI,gBAAwC,CAAC,CAAA;QAC7C,IAAI,YAAkC,CAAC,CAAA;QACvC,IAAI,sBACF,KAAA;QAEF,IAAI,sBAA+C,CAAC,CAAA;QACpD,MAAM,kBAA2C,CAAC,CAAA;QAElD,MAAM,mBAEF;YACF,IAAIF,YAAW;YACf,WAAW,YAAY;YACvB,SAAS,MAAM,OAAA;YACf,UAAU,CAAC,CAAA;QACb;QACA,IAAI,oBAA4C,CAAC,CAAA;QACjD,IAAI,sBAAgD,CAAC,CAAA;QACrD,IAAI,uBAAiD,KAAA;QACrD,IAAI,gBAAgD,KAAA;QACpD,IAAI,WAAmD;QACvD,MAAM,gBAAqC,CAAC,CAAA;QAC5C,IAAI;QAEJ,MAAM,iBAAiB,IAAI,gBAGzB;YACA,MAAM,WAAU,KAAA,EAAO,UAAA,EAAY;gBACjC,WAAW,OAAA,CAAQ,KAAK;gBAExB,MAAM,EAAE,IAAA,CAAK,CAAA,GAAI;gBAEjB,IACE,KAAK,IAAA,KAAS,gBACd,KAAK,IAAA,KAAS,eACd,KAAK,IAAA,KAAS,YACd,KAAK,IAAA,KAAS,eACd,KAAK,IAAA,KAAS,iBACd,KAAK,IAAA,KAAS,+BACd,KAAK,IAAA,KAAS,mBACd;oBACA,MAAA,CAAM,WAAA,OAAA,KAAA,IAAA,QAAU;wBAAE,OAAO;oBAAK,EAAA;gBAChC;gBAEA,IAAI,KAAK,IAAA,KAAS,SAAS;oBACzB,MAAA,CAAM,WAAA,OAAA,KAAA,IAAA,QAAU;wBAAE,OAAO,KAAK,KAAA;oBAAM,EAAA;gBACtC;gBAEA,IAAI,KAAK,IAAA,KAAS,cAAc;oBAC9B,oBAAoB,KAAK,SAAA;oBACzB,4BAA4B,KAAK,SAAA;oBACjC,oBAAoB,KAAK,SAAA;gBAC3B;gBAEA,IAAI,KAAK,IAAA,KAAS,aAAa;oBAC7B,IAAI,uBAAuB,MAAM;wBAC/B,sBAAsB;4BAAE,MAAM;4BAAQ,MAAM,KAAK,SAAA;wBAAU;wBAC3D,cAAc,IAAA,CAAK,mBAAmB;oBACxC,OAAO;wBACL,oBAAoB,IAAA,IAAQ,KAAK,SAAA;oBACnC;gBACF;gBAEA,IAAI,KAAK,IAAA,KAAS,uBAAuB;oBACvC,IAAI,uBAAuB,MAAM;wBAC/B,MAAM,gKAAIG,aAAAA,CAAW;4BACnB,MAAM;4BACN,SAAS;wBACX,CAAC;oBACH;oBAEA,oBAAoB,SAAA,GAAY,KAAK,SAAA;oBACrC,sBAAsB,KAAA;gBACxB;gBAEA,IAAI,KAAK,IAAA,KAAS,sBAAsB;oBACtC,cAAc,IAAA,CAAK;wBAAE,MAAM;wBAAY,MAAM,KAAK,IAAA;oBAAK,CAAC;gBAC1D;gBAEA,IAAI,KAAK,IAAA,KAAS,QAAQ;oBACxB,UAAU,IAAA,CAAK,IAAI;gBACrB;gBAEA,IAAI,KAAK,IAAA,KAAS,UAAU;oBAC1B,gBAAgB,IAAA,CAAK,KAAK,MAAM;oBAChC,oBAAoB,IAAA,CAAK,KAAK,MAAM;gBACtC;gBAEA,IAAI,KAAK,IAAA,KAAS,aAAa;oBAC7B,kBAAkB,IAAA,CAAK,IAAI;gBAC7B;gBAEA,IAAI,KAAK,IAAA,KAAS,eAAe;oBAC/B,oBAAoB,IAAA,CAAK,IAAI;gBAC/B;gBAEA,IAAI,KAAK,IAAA,KAAS,eAAe;oBAC/B,MAAM,eAAe,mBAAmB;wBACtC,MAAM;wBACN,OAAO;wBACP,WAAW;wBACX,OAAO,SAAA,OAAA,QAAU,CAAC;wBAClB,WAAW;wBACX,aAAa;wBACb,WAAW,KAAK,SAAA;wBAChB;oBACF,CAAC;oBAGD,MAAM,cAAc,cAAc,MAAA;oBAClC,IAAI,eAAoD;oBACxD,IAAI,cAAc,IAAI,UAAU;wBAC9B,IACE,iBACA,KAAK,YAAA,KAAiB,YAAA,kDAAA;wBAEtB,kBAAkB,MAAA,KAAW,GAC7B;4BACA,eAAe;wBACjB,OAAA,IAAA,wBAAA;wBAEE,kBAAkB,MAAA,GAAS,KAAA,uCAAA;wBAE3B,oBAAoB,MAAA,KAAW,kBAAkB,MAAA,EACjD;4BACA,eAAe;wBACjB;oBACF;oBAGA,MAAM,oBAAuC;wBAC3C;wBACA,MAAM;wBACN,WAAW,gBAAgB,aAAa;wBACxC,kBAAkB;wBAClB,OAAO;wBACP,SAAS;wBACT,WAAW;wBACX,aAAa;wBACb,cAAc,KAAK,YAAA;wBACnB,OAAO,KAAK,KAAA;wBACZ,UAAU,KAAK,QAAA;wBACf,UAAU,KAAK,QAAA;wBACf,SAAS,KAAK,OAAA;wBACd,UAAU;4BACR,GAAG,KAAK,QAAA;4BACR,UAAU,CAAC;mCAAG,iBAAiB,QAAA,EAAU;mCAAG,YAAY;6BAAA;wBAC1D;wBACA,kBAAkB,KAAK,6BAAA;wBACvB,+BAA+B,KAAK,6BAAA;wBACpC,aAAa,KAAK,WAAA;oBACpB;oBAEA,MAAA,CAAM,gBAAA,OAAA,KAAA,IAAA,aAAe,kBAAA;oBAErB,cAAc,IAAA,CAAK,iBAAiB;oBAEpC,oBAAoB,CAAC,CAAA;oBACrB,sBAAsB,CAAC,CAAA;oBACvB,mBAAmB;oBACnB,sBAAsB,CAAC,CAAA;oBACvB,gBAAgB,CAAC,CAAA;oBACjB,YAAY,CAAC,CAAA;oBACb,sBAAsB,KAAA;oBAEtB,IAAI,iBAAiB,QAAQ;wBAC3B,WAAW;oBACb;oBAEA,IAAI,iBAAiB,YAAY;wBAC/B,iBAAiB,QAAA,CAAS,IAAA,CAAK,GAAG,YAAY;wBAC9C,2BAA2B;oBAC7B;gBACF;gBAEA,IAAI,KAAK,IAAA,KAAS,UAAU;oBAC1B,iBAAiB,EAAA,GAAK,KAAK,QAAA,CAAS,EAAA;oBACpC,iBAAiB,SAAA,GAAY,KAAK,QAAA,CAAS,SAAA;oBAC3C,iBAAiB,OAAA,GAAU,KAAK,QAAA,CAAS,OAAA;oBACzC,iBAAiB,OAAA,GAAU,KAAK,QAAA,CAAS,OAAA;oBACzC,gBAAgB,KAAK,KAAA;oBACrB,uBAAuB,KAAK,YAAA;gBAC9B;YACF;YAEA,MAAM,OAAM,UAAA,EAAY;gBApxB9B,IAAAD;gBAqxBQ,IAAI;oBACF,IAAI,cAAc,MAAA,KAAW,GAAG;wBAC9B;oBACF;oBAGA,MAAM,WAAW,aAAA,CAAc,cAAc,MAAA,GAAS,CAAC,CAAA;oBAEvD,KAAK,eAAA,CAAgB,OAAA,CAAQ,SAAS,QAAQ;oBAC9C,KAAK,cAAA,CAAe,OAAA,CAAQ,SAAS,OAAO;oBAC5C,KAAK,eAAA,CAAgB,OAAA,CAAQ,SAAS,QAAQ;oBAC9C,KAAK,gBAAA,CAAiB,OAAA,CAAQ,SAAS,SAAS;oBAChD,KAAK,kBAAA,CAAmB,OAAA,CAAQ,SAAS,WAAW;oBACpD,KAAK,uBAAA,CAAwB,OAAA,CAC3B,SAAS,6BAAA;oBAEX,KAAK,gBAAA,CAAiB,OAAA,CAAQ,SAAS,SAAS;oBAChD,KAAK,uBAAA,CAAwB,OAAA,CAAQ,SAAS,gBAAgB;oBAG9D,MAAM,eAAe,wBAAA,OAAA,uBAAwB;oBAC7C,MAAM,QAAQ,iBAAA,OAAA,gBAAiB;wBAC7B,kBAAkB;wBAClB,cAAc;wBACd,aAAa;oBACf;oBAGA,KAAK,mBAAA,CAAoB,OAAA,CAAQ,YAAY;oBAC7C,KAAK,YAAA,CAAa,OAAA,CAAQ,KAAK;oBAG/B,KAAK,WAAA,CAAY,OAAA,CAAQ,gBAAgB;oBACzC,KAAK,cAAA,CAAe,OAAA,CAAQ,eAAe;oBAC3C,KAAK,YAAA,CAAa,OAAA,CAAQ,SAAS,KAAK;oBACxC,KAAK,YAAA,CAAa,OAAA,CAAQ,aAAa;oBAGvC,MAAA,CAAM,YAAA,OAAA,KAAA,IAAA,SAAW;wBACf;wBACA,UAAU,KAAA;wBACV;wBACA,MAAM;wBACN,WAAW,SAAS,SAAA;wBACpB,kBAAkB,SAAS,gBAAA;wBAC3B,OAAO,SAAS,KAAA;wBAChB,SAAS,SAAS,OAAA;wBAClB,WAAW,SAAS,SAAA;wBACpB,aAAa,SAAS,WAAA;wBACtB,SAAA,CAASA,OAAA,SAAS,OAAA,KAAT,OAAAA,OAAoB,CAAC;wBAC9B,UAAU,SAAS,QAAA;wBACnB,UAAU,SAAS,QAAA;wBACnB,kBAAkB,SAAS,gBAAA;wBAC3B,+BACE,SAAS,6BAAA;wBACX,OAAO;oBACT,EAAA;oBAGA,SAAS,aAAA,CACP,0BAA0B;wBACxB;wBACA,YAAY;4BACV,4BAA4B;4BAC5B,oBAAoB;gCAAE,QAAQ,IAAM;4BAAiB;4BACrD,yBAAyB;gCACvB,QAAQ,MAAG;oCAv1B7B,IAAAA;oCAw1BoB,OAAA,CAAA,CAAAA,OAAA,SAAS,SAAA,KAAT,OAAA,KAAA,IAAAA,KAAoB,MAAA,IAChB,KAAK,SAAA,CAAU,SAAS,SAAS,IACjC,KAAA;gCAAA;4BACR;4BAEA,yBAAyB,MAAM,YAAA;4BAC/B,6BAA6B,MAAM,gBAAA;wBACrC;oBACF,CAAC;gBAEL,EAAA,OAAS,OAAO;oBACd,WAAW,KAAA,CAAM,KAAK;gBACxB,SAAE;oBACA,SAAS,GAAA,CAAI;gBACf;YACF;QACF,CAAC;QAGD,MAAM,mBAAmB,uBAA8C;QACvE,IAAA,CAAK,SAAA,GAAY,iBAAiB,SAAA;QAClC,IAAA,CAAK,WAAA,GAAc,iBAAiB,KAAA;QAEpC,IAAI,SAAS,iBAAiB,MAAA;QAI9B,KAAA,MAAW,aAAa,WAAY;YAClC,SAAS,OAAO,WAAA,CACd,UAAU;gBACR;gBACA,aAAa;oBACX,iBAAiB,SAAA,CAAU;gBAC7B;YACF,CAAC;QAEL;QAEA,IAAA,CAAK,UAAA,GAAa,OACf,WAAA,CAAY,4BAA4B,MAAM,CAAC,EAC/C,WAAA,CAAY,cAAc;QAE7B,MAAM,EAAE,UAAA,EAAY,KAAA,CAAM,CAAA,GAAI,eAAe;YAC3C,YAAY;QACd,CAAC;QAED,MAAM,SAAS,UAAU,SAAS;QAElC,MAAM,0BAA0B,2BAA2B;YACzD;YACA;YACA;YACA,UAAU;gBAAE,GAAG,QAAA;gBAAU;YAAW;QACtC,CAAC;QAED,MAAM,gBAAgB,kBAAkB;YACtC,QAAQ;gBACN,QAAA,CAAQA,OAAA,UAAA,OAAA,KAAA,IAAA,OAAQ,sBAAA,CAAuB;oBAAE;oBAAQ;gBAAM,EAAA,KAA/C,OAAAA,OAAqD;gBAC7D;gBACA;YACF;YACA;QACF,CAAC;QAED,MAAM,OAAO,IAAA;QAEb,WAAW;YACT,MAAM;YACN,YAAY,0BAA0B;gBACpC;gBACA,YAAY;oBACV,GAAG,sBAAsB;wBAAE,aAAa;wBAAiB;oBAAU,CAAC,CAAA;oBACpE,GAAG,uBAAA;oBAAA,6DAAA;oBAEH,aAAa;wBACX,OAAO,IAAM,KAAK,SAAA,CAAU;gCAAE;gCAAQ;gCAAQ;4BAAS,CAAC;oBAC1D;oBACA,wBAAwB;gBAC1B;YACF,CAAC;YACD;YACA,aAAa;YACb,IAAI,OAAM,gBAAe;gBACvB,WAAW;gBAEX,eAAe,WAAW,EACxB,WAAA,EACA,gBAAA,EACA,KAAA,EACA,UAAAE,SAAAA,EACA,gBAAA,EACA,oBAAA,EACA,SAAA,EACF,EAQG;oBA77BX,IAAAF;oBA+7BU,MAAM,eACJ,iBAAiB,MAAA,KAAW,IAAI,cAAc,IAAA,GAAO;oBAEvD,MAAM,oBAAoB;2BACrB,cAAc,QAAA;2BACd;qBACL;oBAEA,MAAM,iBAAiB,MAAM,6BAA6B;wBACxD,QAAQ;4BACN,MAAM;4BACN,QAAQ,cAAc,MAAA;4BACtB,UAAU;wBACZ;wBACA,wBAAwB,MAAM,iBAAA;wBAC9B,kBAAA,CAAkBA,OAAA,MAAM,WAAA,KAAN,OAAA,KAAA,IAAAA,KAAmB,IAAA,CAAK;oBAC5C,CAAC;oBAED,MAAM,OAAO;wBACX,MAAM;wBACN,GAAG,0BAA0B;4BAAE;4BAAO;4BAAY;wBAAY,CAAC,CAAA;oBACjE;oBAEA,MAAM,EACJ,QAAQ,EAAE,QAAAG,OAAAA,EAAQ,QAAA,EAAU,WAAA,EAAa,OAAA,CAAQ,CAAA,EACjD,YAAA,EACA,gBAAA,EACF,GAAI,MAAM,MAAM,IACd,WAAW;4BACT,MAAM;4BACN,YAAY,0BAA0B;gCACpC;gCACA,YAAY;oCACV,GAAG,sBAAsB;wCACvB,aAAa;wCACb;oCACF,CAAC,CAAA;oCACD,GAAG,uBAAA;oCACH,oBAAoB;wCAClB,OAAO,IAAM;oCACf;oCACA,sBAAsB;wCACpB,OAAO,IAAM,sBAAsB,cAAc;oCACnD;oCACA,mBAAmB;wCAAA,0CAAA;wCAEjB,OAAO,MAAG;4CA7+B9B,IAAAH;4CA6+BiC,OAAA,CAAAA,OAAA,KAAK,KAAA,KAAL,OAAA,KAAA,IAAAA,KAAY,GAAA,CAAI,CAAAI,QAAQ,KAAK,SAAA,CAAUA,KAAI;wCAAA;oCAC1D;oCACA,wBAAwB;wCACtB,OAAO,IACL,KAAK,UAAA,IAAc,OACf,KAAK,SAAA,CAAU,KAAK,UAAU,IAC9B,KAAA;oCACR;oCAAA,2CAAA;oCAGA,iBAAiB,MAAM,QAAA;oCACvB,wBAAwB,MAAM,OAAA;oCAC9B,oCAAoC,SAAS,gBAAA;oCAC7C,6BAA6B,SAAS,SAAA;oCACtC,mCAAmC,SAAS,eAAA;oCAC5C,iCAAiC,SAAS,aAAA;oCAC1C,8BAA8B,SAAS,WAAA;oCACvC,wBAAwB,SAAS,IAAA;oCACjC,wBAAwB,SAAS,IAAA;gCACnC;4BACF,CAAC;4BACD;4BACA,aAAa;4BACb,IAAI,OAAMC,gBAAAA,CAAiB;oCACzB,kBAAkBR,KAAI;oCAAA,sBAAA;oCACtB,cAAAQ;oCACA,QAAQ,MAAM,MAAM,QAAA,CAAS;wCAC3B;wCACA,GAAG,oBAAoB,QAAQ,CAAA;wCAC/B,aAAa;wCACb,gBAAgB,UAAA,OAAA,KAAA,IAAA,OAAQ,cAAA,CAAe;4CAAE;wCAAM;wCAC/C,QAAQ;wCACR,kBAAkB;wCAClB;wCACA;oCACF,CAAC;gCACH,CAAA;wBACF,CAAC;oBAGH,MAAM,oBAAoB,uBAAuB;wBAC/C;wBACA,iBAAiBF;wBACjB;wBACA;wBACA;wBACA;wBACA,UAAU;wBACV;wBACA;oBACF,CAAC;oBAED,MAAM,cAAc,WAAA,OAAA,UAAW,CAAC;oBAChC,MAAM,gBAAwC,CAAC,CAAA;oBAC/C,MAAM,kBAA4C,CAAC,CAAA;oBAEnD,MAAMG,iBAAwC,CAAC,CAAA;oBAC/C,MAAMC,aAAkC,CAAC,CAAA;oBACzC,IAAIC,uBAEuC,KAAA;oBAE3C,IAAI,mBAAiC;oBACrC,IAAI,YAAgC;wBAClC,cAAc;wBACd,kBAAkB;wBAClB,aAAa;oBACf;oBACA,IAAI;oBACJ,IAAI,iBAAiB;oBACrB,IAAI,WAAW;oBACf,IAAI,eAAeN,cAAa,aAAa,mBAAmB;oBAChE,IAAI;oBACJ,IAAI,eAAiE;wBACnE,IAAIJ,YAAW;wBACf,WAAW,YAAY;wBACvB,SAAS,MAAM,OAAA;oBACjB;oBAGA,IAAI,cAAc;oBAClB,IAAI,qBAAqB;oBACzB,IAAI,qBAAqB;oBACzB,IAAI,sBAAsB;oBAE1B,eAAe,iBAAiB,EAC9B,UAAA,EACA,KAAA,EACF,EAGG;wBACD,WAAW,OAAA,CAAQ,KAAK;wBAExB,YAAY,MAAM,SAAA;wBAClB,gBAAgB,MAAM,SAAA;wBACtB,qBAAqB;wBACrB,sBAAsB,MAAM,SAAA,CAAU,OAAA,CAAQ,MAAM,MAAM,SAAA;oBAC5D;oBAEA,KAAK,SAAA,CACH,kBAAkB,WAAA,CAChB,IAAI,gBAGF;wBACA,MAAM,WAAU,KAAA,EAAO,UAAA,EAA2B;4BAvlClE,IAAAE,MAAA,IAAA;4BAwlCkB,IAAI,gBAAgB;gCAElB,MAAM,iBAAiBH,KAAI,IAAI;gCAE/B,iBAAiB;gCAEjB,aAAa,QAAA,CAAS,wBAAwB;oCAC5C,8BAA8B;gCAChC,CAAC;gCAED,aAAa,aAAA,CAAc;oCACzB,8BAA8B;gCAChC,CAAC;gCAGD,WAAW,OAAA,CAAQ;oCACjB,MAAM;oCACN;oCACA,SAAS;oCACT,UAAU,YAAA,OAAA,WAAY,CAAC,CAAA;gCACzB,CAAC;4BACH;4BAGA,IACE,MAAM,IAAA,KAAS,gBACf,MAAM,SAAA,CAAU,MAAA,KAAW,GAC3B;gCACA;4BACF;4BAEA,MAAM,YAAY,MAAM,IAAA;4BACxB,OAAQ,WAAW;gCACjB,KAAK;oCAAc;wCACjB,IAAI,eAAe;4CAGjB,MAAM,mBACJ,sBAAsB,uBAClB,MAAM,SAAA,CAAU,SAAA,CAAU,IAC1B,MAAM,SAAA;4CAEZ,IAAI,iBAAiB,MAAA,KAAW,GAAG;gDACjC;4CACF;4CAEA,qBAAqB;4CACrB,eAAe;4CAEf,MAAM,QAAQ,sBAAsB,WAAW;4CAG/C,IAAI,SAAS,MAAM;gDACjB,cAAc,MAAM,MAAA;gDAEpB,MAAM,iBAAiB;oDACrB;oDACA,OAAO;wDACL,MAAM;wDACN,WAAW,MAAM,MAAA,GAAS,MAAM,UAAA;oDAClC;gDACF,CAAC;4CACH;wCACF,OAAO;4CACL,MAAM,iBAAiB;gDAAE;gDAAY;4CAAM,CAAC;wCAC9C;wCACA;oCACF;gCAEA,KAAK;oCAAa;wCAChB,WAAW,OAAA,CAAQ,KAAK;wCAExB,IAAIW,wBAAuB,MAAM;4CAC/BA,uBAAsB;gDACpB,MAAM;gDACN,MAAM,MAAM,SAAA;4CACd;4CACAF,eAAc,IAAA,CAAKE,oBAAmB;wCACxC,OAAO;4CACLA,qBAAoB,IAAA,IAAQ,MAAM,SAAA;wCACpC;wCAEA;oCACF;gCAEA,KAAK;oCAAuB;wCAC1B,WAAW,OAAA,CAAQ,KAAK;wCAExB,IAAIA,wBAAuB,MAAM;4CAC/B,MAAM,IAAI,uBAAuB;gDAC/B;gDACA,SAAS;4CACX,CAAC;wCACH;wCAEAA,qBAAoB,SAAA,GAAY,MAAM,SAAA;wCACtCA,uBAAsB,KAAA;wCACtB;oCACF;gCAEA,KAAK;oCAAsB;wCACzB,WAAW,OAAA,CAAQ,KAAK;wCACxBF,eAAc,IAAA,CAAK;4CACjB,MAAM;4CACN,MAAM,MAAM,IAAA;wCACd,CAAC;wCAED;oCACF;gCAEA,KAAK;oCAAa;wCAChB,WAAW,OAAA,CAAQ,KAAK;wCAExB,cAAc,IAAA,CAAK,KAAK;wCACxB;oCACF;gCAEA,KAAK;oCAAe;wCAClB,WAAW,OAAA,CAAQ,KAAK;wCAExB,gBAAgB,IAAA,CAAK,KAAK;wCAC1B;oCACF;gCAEA,KAAK;oCAAqB;wCACxB,eAAe;4CACb,IAAA,CAAIN,OAAA,MAAM,EAAA,KAAN,OAAAA,OAAY,aAAa,EAAA;4CAC7B,WAAA,CAAW,KAAA,MAAM,SAAA,KAAN,OAAA,KAAmB,aAAa,SAAA;4CAC3C,SAAA,CAAS,KAAA,MAAM,OAAA,KAAN,OAAA,KAAiB,aAAa,OAAA;wCACzC;wCACA;oCACF;gCAEA,KAAK;oCAAU;wCAGb,YAAY,MAAM,KAAA;wCAClB,mBAAmB,MAAM,YAAA;wCACzB,uBACE,MAAM,6BAAA;wCACR,eAAe,MAAM,QAAA;wCAIrB,MAAM,aAAaH,KAAI,IAAI;wCAC3B,aAAa,QAAA,CAAS,kBAAkB;wCACxC,aAAa,aAAA,CAAc;4CACzB,0BAA0B;4CAC1B,4CACG,MAAO,UAAU,gBAAA,GAAoB;wCAC1C,CAAC;wCAED;oCACF;gCAEA,KAAK;oCAAQ;wCACXU,WAAU,IAAA,CAAK,KAAK;wCACpB,WAAW,OAAA,CAAQ,KAAK;wCACxB;oCACF;gCAGA,KAAK;gCACL,KAAK;gCACL,KAAK;oCAAmB;wCACtB,WAAW,OAAA,CAAQ,KAAK;wCACxB;oCACF;gCAEA,KAAK;oCAAS;wCACZ,WAAW,OAAA,CAAQ,KAAK;wCACxB,mBAAmB;wCACnB;oCACF;gCAEA;oCAAS;wCACP,MAAM,kBAAyB;wCAC/B,MAAM,IAAI,MAAM,CAAA,oBAAA,EAAuB,eAAe,EAAE;oCAC1D;4BACF;wBACF;wBAAA,8FAAA;wBAGA,MAAM,OAAM,UAAA,EAAY;4BACtB,MAAM,oBACJ,cAAc,MAAA,GAAS,IACnB,KAAK,SAAA,CAAU,aAAa,IAC5B,KAAA;4BAGN,IAAI,eACF;4BACF,IAAI,cAAc,IAAI,UAAU;gCAC9B,IACE,iBACA,qBAAqB,YAAA,kDAAA;gCAErB,cAAc,MAAA,KAAW,GACzB;oCACA,eAAe;gCACjB,OAAA,IAAA,wBAAA;gCAEE,cAAc,MAAA,GAAS,KAAA,uCAAA;gCAEvB,gBAAgB,MAAA,KAAW,cAAc,MAAA,EACzC;oCACA,eAAe;gCACjB;4BACF;4BAIA,IACE,iBACA,YAAY,MAAA,GAAS,KAAA,CACpB,iBAAiB,cAAA,2DAAA;4BACfL,cAAa,cAAc,CAAC,kBAAA,GAC/B;gCACA,MAAM,iBAAiB;oCACrB;oCACA,OAAO;wCACL,MAAM;wCACN,WAAW;oCACb;gCACF,CAAC;gCACD,cAAc;4BAChB;4BAGA,IAAI;gCACF,aAAa,aAAA,CACX,0BAA0B;oCACxB;oCACA,YAAY;wCACV,4BAA4B;wCAC5B,oBAAoB;4CAAE,QAAQ,IAAM;wCAAS;wCAC7C,yBAAyB;4CACvB,QAAQ,IAAM;wCAChB;wCACA,kBAAkB,aAAa,EAAA;wCAC/B,qBAAqB,aAAa,OAAA;wCAClC,yBACE,aAAa,SAAA,CAAU,WAAA,CAAY;wCAErC,yBAAyB,UAAU,YAAA;wCACnC,6BACE,UAAU,gBAAA;wCAAA,2CAAA;wCAGZ,kCAAkC;4CAAC,gBAAgB;yCAAA;wCACnD,sBAAsB,aAAa,EAAA;wCACnC,yBAAyB,aAAa,OAAA;wCACtC,6BAA6B,UAAU,YAAA;wCACvC,8BACE,UAAU,gBAAA;oCACd;gCACF,CAAC;4BAEL,EAAA,OAAS,OAAO,CAEhB,SAAE;gCAEA,aAAa,GAAA,CAAI;4BACnB;4BAEA,WAAW,OAAA,CAAQ;gCACjB,MAAM;gCACN,cAAc;gCACd,OAAO;gCACP,kBAAkB;gCAClB,+BAA+B;gCAC/B,UAAU;gCACV,SAAS;gCACT,UAAU;oCACR,GAAG,YAAA;oCACH,SAAS,eAAA,OAAA,KAAA,IAAA,YAAa,OAAA;gCACxB;gCACA;gCACA,aAAa,iBAAiB;gCAC9B;4BACF,CAAC;4BAED,MAAM,gBAAgB,sBAAsB,OAAO,SAAS;4BAE5D,IAAI,iBAAiB,QAAQ;gCAC3B,WAAW,OAAA,CAAQ;oCACjB,MAAM;oCACN,cAAc;oCACd,OAAO;oCACP,kBAAkB;oCAClB,+BAA+B;oCAC/B,UAAU;oCACV,UAAU;wCACR,GAAG,YAAA;wCACH,SAAS,eAAA,OAAA,KAAA,IAAA,YAAa,OAAA;oCACxB;gCACF,CAAC;gCAED,KAAK,WAAA,CAAY;4BACnB,OAAO;gCAEL,IAAIA,cAAa,YAAY;oCAI3B,MAAM,cAAc,gBAAA,CAClB,iBAAiB,MAAA,GAAS,CAC5B,CAAA;oCAEA,IAAI,OAAO,YAAY,OAAA,KAAY,UAAU;wCAC3C,YAAY,OAAA,IAAW;oCACzB,OAAO;wCACL,YAAY,OAAA,CAAQ,IAAA,CAAK;4CACvB,MAAM;4CACN,MAAM;wCACR,CAAC;oCACH;gCACF,OAAO;oCACL,iBAAiB,IAAA,IACZ,mBAAmB;wCACpB,MAAM;wCACN,OAAOK;wCACP,WAAWD;wCACX,OAAO,SAAA,OAAA,QAAU,CAAC;wCAClB,WAAW;wCACX,aAAa;wCACb;wCACA;oCACF,CAAC;gCAEL;gCAEA,MAAM,WAAW;oCACf,aAAa,cAAc;oCAC3B;oCACA,OAAO;oCACP,UAAU;oCACV,kBAAkB;oCAClB,sBAAsB;oCACtB,WAAA,2CAAA;oCAEE,iBAAiB,aACb,YACA,kBAAkB;gCAC1B,CAAC;4BACH;wBACF;oBACF,CAAC;gBAGP;gBAGA,MAAM,WAAW;oBACf,aAAa;oBACb,kBAAkB,CAAC,CAAA;oBACnB,OAAO;wBACL,cAAc;wBACd,kBAAkB;wBAClB,aAAa;oBACf;oBACA,kBAAkB;oBAClB,UAAU;oBACV,sBAAsB;oBACtB,WAAW,kBAAkB;gBAC/B,CAAC;YACH;QACF,CAAC,EAAE,KAAA,CAAM,CAAA,UAAS;YAEhB,KAAK,SAAA,CACH,IAAI,eAAe;gBACjB,OAAM,UAAA,EAAY;oBAChB,WAAW,OAAA,CAAQ;wBAAE,MAAM;wBAAS;oBAAM,CAAC;oBAC3C,WAAW,KAAA,CAAM;gBACnB;YACF,CAAC;YAEH,KAAK,WAAA,CAAY;QACnB,CAAC;IACH;IAEA,IAAI,WAAW;QACb,OAAO,IAAA,CAAK,eAAA,CAAgB,KAAA;IAC9B;IAEA,IAAI,QAAQ;QACV,OAAO,IAAA,CAAK,YAAA,CAAa,KAAA;IAC3B;IAEA,IAAI,eAAe;QACjB,OAAO,IAAA,CAAK,mBAAA,CAAoB,KAAA;IAClC;IAEA,IAAI,gCAAgC;QAClC,OAAO,IAAA,CAAK,uBAAA,CAAwB,KAAA;IACtC;IAEA,IAAI,mBAAmB;QACrB,OAAO,IAAA,CAAK,uBAAA,CAAwB,KAAA;IACtC;IAEA,IAAI,OAAO;QACT,OAAO,IAAA,CAAK,WAAA,CAAY,KAAA;IAC1B;IAEA,IAAI,YAAY;QACd,OAAO,IAAA,CAAK,gBAAA,CAAiB,KAAA;IAC/B;IAEA,IAAI,mBAAmB;QACrB,OAAO,IAAA,CAAK,uBAAA,CAAwB,KAAA;IACtC;IAEA,IAAI,UAAU;QACZ,OAAO,IAAA,CAAK,cAAA,CAAe,KAAA;IAC7B;IAEA,IAAI,QAAQ;QACV,OAAO,IAAA,CAAK,YAAA,CAAa,KAAA;IAC3B;IAEA,IAAI,YAAY;QACd,OAAO,IAAA,CAAK,gBAAA,CAAiB,KAAA;IAC/B;IAEA,IAAI,cAAc;QAChB,OAAO,IAAA,CAAK,kBAAA,CAAmB,KAAA;IACjC;IAEA,IAAI,UAAU;QACZ,OAAO,IAAA,CAAK,cAAA,CAAe,KAAA;IAC7B;IAEA,IAAI,WAAW;QACb,OAAO,IAAA,CAAK,eAAA,CAAgB,KAAA;IAC9B;IAEA,IAAI,QAAQ;QACV,OAAO,IAAA,CAAK,YAAA,CAAa,KAAA;IAC3B;IAAA;;;;;;;KAAA,GAUQ,YAAY;QAClB,MAAM,CAAC,SAAS,OAAO,CAAA,GAAI,IAAA,CAAK,UAAA,CAAW,GAAA,CAAI;QAC/C,IAAA,CAAK,UAAA,GAAa;QAClB,OAAO;IACT;IAEA,IAAI,aAA0C;QAC5C,OAAO,0BACL,IAAA,CAAK,SAAA,CAAU,EAAE,WAAA,CACf,IAAI,gBAAmE;YACrE,WAAU,EAAE,IAAA,CAAK,CAAA,EAAG,UAAA,EAAY;gBAC9B,IAAI,KAAK,IAAA,KAAS,cAAc;oBAC9B,WAAW,OAAA,CAAQ,KAAK,SAAS;gBACnC;YACF;QACF,CAAC;IAGP;IAEA,IAAI,aAAyD;QAC3D,OAAO,0BACL,IAAA,CAAK,SAAA,CAAU,EAAE,WAAA,CACf,IAAI,gBAGF;YACA,WAAU,EAAE,IAAA,CAAK,CAAA,EAAG,UAAA,EAAY;gBAC9B,WAAW,OAAA,CAAQ,IAAI;YACzB;QACF,CAAC;IAGP;IAEA,MAAM,cAAc,OAAA,EAA+C;QA5jDrE,IAAAN;QA6jDI,IAAI;YACF,MAAM,cAAc;gBAClB,QAAQ,IAAA,CAAK,UAAA;gBACb,SAAS,WAAA,OAAA,KAAA,IAAA,QAAS,OAAA;YACpB,CAAC;QACH,EAAA,OAAS,OAAO;YACd,CAAAA,OAAA,WAAA,OAAA,KAAA,IAAA,QAAS,OAAA,KAAT,OAAA,KAAA,IAAAA,KAAA,IAAA,CAAA,SAAmB;QACrB;IACF;IAEA,IAAI,mCAAwE;QAC1E,IAAI,IAAA,CAAK,MAAA,IAAU,MAAM;YACvB,MAAM,IAAI,uBAAuB;QACnC;QAEA,OAAO,0BACL,IAAA,CAAK,SAAA,CAAU,EAAE,WAAA,CACf,IAAI,gBAGF;YACA,WAAU,EAAE,aAAA,CAAc,CAAA,EAAG,UAAA,EAAY;gBACvC,IAAI,iBAAiB,MAAM;oBACzB,WAAW,OAAA,CAAQ,aAAa;gBAClC;YACF;QACF,CAAC;IAGP;IAEQ,qBAAqB,EAC3B,iBAAAS,mBAAkB,IAAM,oBAAA,EAAA,4CAAA;IACxB,YAAY,IAAA,EACZ,gBAAgB,KAAA,EAChB,cAAc,KAAA,EACd,0BAA0B,IAAA,EAC5B,EAMqC;QACnC,OAAO,IAAA,CAAK,UAAA,CAAW,WAAA,CACrB,IAAI,gBAAyD;YAC3D,WAAW,OAAO,OAAO,eAAe;gBACtC,MAAM,YAAY,MAAM,IAAA;gBACxB,OAAQ,WAAW;oBACjB,KAAK;wBAAc;4BACjB,WAAW,OAAA,oLAAQC,uBAAAA,EAAqB,QAAQ,MAAM,SAAS,CAAC;4BAChE;wBACF;oBAEA,KAAK;wBAAa;4BAChB,IAAI,eAAe;gCACjB,WAAW,OAAA,oLACTA,uBAAAA,EAAqB,aAAa,MAAM,SAAS;4BAErD;4BACA;wBACF;oBAEA,KAAK;wBAAsB;4BACzB,IAAI,eAAe;gCACjB,WAAW,OAAA,oLACTA,uBAAAA,EAAqB,sBAAsB;oCACzC,MAAM,MAAM,IAAA;gCACd,CAAC;4BAEL;4BACA;wBACF;oBAEA,KAAK;wBAAuB;4BAC1B,IAAI,eAAe;gCACjB,WAAW,OAAA,oLACTA,uBAAAA,EAAqB,uBAAuB;oCAC1C,WAAW,MAAM,SAAA;gCACnB,CAAC;4BAEL;4BACA;wBACF;oBAEA,KAAK;wBAAQ;4BACX,WAAW,OAAA,oLACTA,uBAAAA,EAAqB,QAAQ;gCAC3B,UAAU,MAAM,QAAA;gCAChB,MAAM,MAAM,MAAA;4BACd,CAAC;4BAEH;wBACF;oBAEA,KAAK;wBAAU;4BACb,IAAI,aAAa;gCACf,WAAW,OAAA,mLACTA,wBAAAA,EAAqB,UAAU,MAAM,MAAM;4BAE/C;4BACA;wBACF;oBAEA,KAAK;wBAA6B;4BAChC,WAAW,OAAA,oLACTA,uBAAAA,EAAqB,6BAA6B;gCAChD,YAAY,MAAM,UAAA;gCAClB,UAAU,MAAM,QAAA;4BAClB,CAAC;4BAEH;wBACF;oBAEA,KAAK;wBAAmB;4BACtB,WAAW,OAAA,oLACTA,uBAAAA,EAAqB,mBAAmB;gCACtC,YAAY,MAAM,UAAA;gCAClB,eAAe,MAAM,aAAA;4BACvB,CAAC;4BAEH;wBACF;oBAEA,KAAK;wBAAa;4BAChB,WAAW,OAAA,oLACTA,uBAAAA,EAAqB,aAAa;gCAChC,YAAY,MAAM,UAAA;gCAClB,UAAU,MAAM,QAAA;gCAChB,MAAM,MAAM,IAAA;4BACd,CAAC;4BAEH;wBACF;oBAEA,KAAK;wBAAe;4BAClB,WAAW,OAAA,oLACTA,uBAAAA,EAAqB,eAAe;gCAClC,YAAY,MAAM,UAAA;gCAClB,QAAQ,MAAM,MAAA;4BAChB,CAAC;4BAEH;wBACF;oBAEA,KAAK;wBAAS;4BACZ,WAAW,OAAA,mLACTA,wBAAAA,EAAqB,SAASD,iBAAgB,MAAM,KAAK,CAAC;4BAE5D;wBACF;oBAEA,KAAK;wBAAc;4BACjB,WAAW,OAAA,KACTC,sMAAAA,EAAqB,cAAc;gCACjC,WAAW,MAAM,SAAA;4BACnB,CAAC;4BAEH;wBACF;oBAEA,KAAK;wBAAe;4BAClB,WAAW,OAAA,oLACTA,uBAAAA,EAAqB,eAAe;gCAClC,cAAc,MAAM,YAAA;gCACpB,OAAO,YACH;oCACE,cAAc,MAAM,KAAA,CAAM,YAAA;oCAC1B,kBAAkB,MAAM,KAAA,CAAM,gBAAA;gCAChC,IACA,KAAA;gCACJ,aAAa,MAAM,WAAA;4BACrB,CAAC;4BAEH;wBACF;oBAEA,KAAK;wBAAU;4BACb,IAAI,yBAAyB;gCAC3B,WAAW,OAAA,oLACTA,uBAAAA,EAAqB,kBAAkB;oCACrC,cAAc,MAAM,YAAA;oCACpB,OAAO,YACH;wCACE,cAAc,MAAM,KAAA,CAAM,YAAA;wCAC1B,kBAAkB,MAAM,KAAA,CAAM,gBAAA;oCAChC,IACA,KAAA;gCACN,CAAC;4BAEL;4BACA;wBACF;oBAEA;wBAAS;4BACP,MAAM,kBAAyB;4BAC/B,MAAM,IAAI,MAAM,CAAA,oBAAA,EAAuB,eAAe,EAAE;wBAC1D;gBACF;YACF;QACF,CAAC;IAEL;IAEA,yBACE,QAAA,EACA,EACE,MAAA,EACA,UAAA,EACA,OAAA,EACA,IAAA,EACA,iBAAAD,gBAAAA,EACA,SAAA,EACA,aAAA,EACA,WAAA,EACA,uBAAA,EACF,GAIM,CAAC,CAAA,EACP;QACA,sBAAsB;YACpB;YACA;YACA;YACA,SAAS,2BAA2B,SAAS;gBAC3C,aAAa;gBACb,mBAAmB;YACrB,CAAC;YACD,QAAQ,IAAA,CAAK,YAAA,CAAa;gBACxB;gBACA,iBAAAA;gBACA;gBACA;gBACA;gBACA;YACF,CAAC;QACH,CAAC;IACH;IAEA,yBAAyB,QAAA,EAA0B,IAAA,EAAqB;QACtE,sBAAsB;YACpB;YACA,QAAQ,QAAA,OAAA,KAAA,IAAA,KAAM,MAAA;YACd,YAAY,QAAA,OAAA,KAAA,IAAA,KAAM,UAAA;YAClB,SAAS,2BAA2B,QAAA,OAAA,KAAA,IAAA,KAAM,OAAA,EAAS;gBACjD,aAAa;YACf,CAAC;YACD,QAAQ,IAAA,CAAK,UAAA,CAAW,WAAA,CAAY,IAAI,kBAAkB,CAAC;QAC7D,CAAC;IACH;IAAA,wEAAA;IAGA,aACE,OAAA,EAIA;QACA,MAAM,SAAS,IAAA,CAAK,oBAAA,CAAqB;YACvC,iBAAiB,WAAA,OAAA,KAAA,IAAA,QAAS,eAAA;YAC1B,WAAW,WAAA,OAAA,KAAA,IAAA,QAAS,SAAA;YACpB,eAAe,WAAA,OAAA,KAAA,IAAA,QAAS,aAAA;YACxB,aAAa,WAAA,OAAA,KAAA,IAAA,QAAS,WAAA;YACtB,yBAAyB,WAAA,OAAA,KAAA,IAAA,QAAS,uBAAA;QACpC,CAAC,EAAE,WAAA,CAAY,IAAI,kBAAkB,CAAC;QAEtC,OAAA,CAAO,WAAA,OAAA,KAAA,IAAA,QAAS,IAAA,IAAO,aAAa,WAAA,OAAA,KAAA,IAAA,QAAS,IAAA,CAAK,MAAA,EAAQ,MAAM,IAAI;IACtE;IAEA,oBAAoB,MAAA,EAA0B,OAAA,EAA6B;QACzE,OAAO,KAAA,CACL,IAAA,CAAK,oBAAA,CAAqB;YACxB,iBAAiB,OAAO,OAAA;YACxB,WAAW,WAAA,OAAA,KAAA,IAAA,QAAS,SAAA;YACpB,eAAe,WAAA,OAAA,KAAA,IAAA,QAAS,aAAA;YACxB,aAAa,WAAA,OAAA,KAAA,IAAA,QAAS,WAAA;YACtB,yBAAyB,WAAA,OAAA,KAAA,IAAA,QAAS,uBAAA;QACpC,CAAC;IAEL;IAEA,qBAAqB,EACnB,OAAA,EACA,MAAA,EACA,UAAA,EACA,IAAA,EACA,iBAAAA,gBAAAA,EACA,SAAA,EACA,aAAA,EACA,WAAA,EACA,uBAAA,EACF,GAIM,CAAC,CAAA,EAAa;QAClB,OAAO,IAAI,SACT,IAAA,CAAK,YAAA,CAAa;YAChB;YACA,iBAAAA;YACA;YACA;YACA;YACA;QACF,CAAC,GACD;YACE;YACA;YACA,SAAS,uBAAuB,SAAS;gBACvC,aAAa;gBACb,mBAAmB;YACrB,CAAC;QACH;IAEJ;IAEA,qBAAqB,IAAA,EAA+B;QA33DtD,IAAAT;QA43DI,OAAO,IAAI,SAAS,IAAA,CAAK,UAAA,CAAW,WAAA,CAAY,IAAI,kBAAkB,CAAC,GAAG;YACxE,QAAA,CAAQA,OAAA,QAAA,OAAA,KAAA,IAAA,KAAM,MAAA,KAAN,OAAAA,OAAgB;YACxB,SAAS,uBAAuB,QAAA,OAAA,KAAA,IAAA,KAAM,OAAA,EAAS;gBAC7C,aAAa;YACf,CAAC;QACH,CAAC;IACH;AACF;;AK73DO,IAAM,yBAAN,0KAAqCW,aAAAA,CAAW;IAGrD,YAAY,OAAA,CAA4D;QACtE,KAAA,CAAM;YACJ,MAAM;YACN,SAAS;QACX,CAAC;QAED,IAAA,CAAK,SAAA,GAAY,QAAQ,SAAA;IAC3B;AACF;;ACFO,IAAM,4BAAN,cACG,qBAEV;IAGE,YAAY,EACV,IAAA,EACA,QAAA,EACF,CAGG;QACD,KAAA,CAAM;YAAE;YAAM;QAAS,CAAC;QACxB,IAAI,SAAS;QAGb,IAAI,UAAU;YACZ,MAAM,gBAAgB,SAAS,KAAA,CAAM,GAAG;YAExC,IAAI,cAAc,MAAA,KAAW,GAAG;gBAE9B,IAAI,aAAa,cAAc;oBAC7B,SAAS,aAAA,CAAc,CAAC,CAAA;gBAC1B;YACF;QACF;QAEA,IAAI,CAAC,QAAQ;YACX,MAAM,IAAI,MACR;QAEJ;QAEA,IAAA,CAAK,MAAA,GAAS;IAChB;AACF;;AClBA,eAAsB,eAAe,EACnC,KAAA,EACA,MAAAC,KAAAA,EACA,KAAA,EACA,YAAA,EACA,YAAA,EACA,KAAA,EACA,kBAAkB,CAAC,CAAA,EACnB,YAAY,aAAA,EACZ,WAAA,EACA,OAAA,EACF,EA8D0B;IA1G1B,IAAAC;IA2GE,MAAM,EAAE,KAAA,CAAM,CAAA,GAAI,eAAe;QAAE,YAAY;IAAc,CAAC;IAE9D,MAAM,SAAS,MAAM,MAAM,IACzB,MAAM,UAAA,CAAW;YACf,MAAAD;YACA;YACA;YACA;YACA;YACA;YACA;YACA;QACF,CAAC;IAGH,IAAI,CAAC,OAAO,KAAA,IAAS,OAAO,KAAA,CAAM,MAAA,KAAW,GAAG;QAC9C,MAAM,IAAI,uBAAuB;YAAE,WAAW;gBAAC,OAAO,QAAQ;aAAA;QAAE,CAAC;IACnE;IAEA,OAAO,IAAI,oBAAoB;QAC7B,OAAO,IAAI,0BAA0B;YACnC,MAAM,OAAO,KAAA;YACb,UAAA,CACEC,OAAA,eAAe;gBACb,MAAM,OAAO,KAAA;gBACb,YAAY;YACd,CAAC,CAAA,KAHD,OAAAA,OAGM;QACV,CAAC;QACD,UAAU,OAAO,QAAA;QACjB,WAAW;YAAC,OAAO,QAAQ;SAAA;QAC3B,kBAAkB,OAAO,gBAAA;IAC3B,CAAC;AACH;AAEA,IAAM,sBAAN,MAAkD;IAMhD,YAAY,OAAA,CAKT;QAxJL,IAAAA;QAyJI,IAAA,CAAK,KAAA,GAAQ,QAAQ,KAAA;QACrB,IAAA,CAAK,QAAA,GAAW,QAAQ,QAAA;QACxB,IAAA,CAAK,SAAA,GAAY,QAAQ,SAAA;QACzB,IAAA,CAAK,gBAAA,GAAA,CAAmBA,OAAA,QAAQ,gBAAA,KAAR,OAAAA,OAA4B,CAAC;IACvD;AACF;;ACxJO,IAAM,6BAAN,0KAAyCC,aAAAA,CAAW;IAGzD,YAAY,OAAA,CAET;QACD,KAAA,CAAM;YACJ,MAAM;YACN,SAAS;QACX,CAAC;QAED,IAAA,CAAK,SAAA,GAAY,QAAQ,SAAA;IAC3B;AACF;;ACSA,eAAsB,WAAW,EAC/B,KAAA,EACA,KAAA,EACA,kBAAkB,CAAC,CAAA,EACnB,YAAY,aAAA,EACZ,WAAA,EACA,OAAA,EACF,EA4CiC;IAC/B,MAAM,EAAE,KAAA,CAAM,CAAA,GAAI,eAAe;QAAE,YAAY;IAAc,CAAC;IAC9D,MAAM,YACJ,iBAAiB,MAAA,CACZ,MAAM,SAAS;QAAE,KAAK;IAAM,CAAC,CAAA,EAAG,IAAA,GACjC,+BAA+B,KAAK;IAE1C,MAAM,SAAS,MAAM,MAAM,MAAG;QAtFhC,IAAAC;QAuFI,OAAA,MAAM,UAAA,CAAW;YACf,OAAO;YACP;YACA;YACA;YACA,WAAA,CACEA,OAAA,eAAe;gBACb,MAAM;gBACN,YAAY;YACd,CAAC,CAAA,KAHD,OAAAA,OAGM;QACV,CAAC;IAAA;IAGH,IAAI,CAAC,OAAO,IAAA,EAAM;QAChB,MAAM,IAAI,2BAA2B;YAAE,WAAW;gBAAC,OAAO,QAAQ;aAAA;QAAE,CAAC;IACvE;IAEA,OAAO,IAAI,2BAA2B;QACpC,MAAM,OAAO,IAAA;QACb,UAAU,OAAO,QAAA;QACjB,UAAU,OAAO,QAAA;QACjB,mBAAmB,OAAO,iBAAA;QAC1B,UAAU,OAAO,QAAA;QACjB,WAAW;YAAC,OAAO,QAAQ;SAAA;QAC3B,kBAAkB,OAAO,gBAAA;IAC3B,CAAC;AACH;AAEA,IAAM,6BAAN,MAAgE;IAa9D,YAAY,OAAA,CAYT;QA5IL,IAAAA;QA6II,IAAA,CAAK,IAAA,GAAO,QAAQ,IAAA;QACpB,IAAA,CAAK,QAAA,GAAW,QAAQ,QAAA;QACxB,IAAA,CAAK,QAAA,GAAW,QAAQ,QAAA;QACxB,IAAA,CAAK,iBAAA,GAAoB,QAAQ,iBAAA;QACjC,IAAA,CAAK,QAAA,GAAW,QAAQ,QAAA;QACxB,IAAA,CAAK,SAAA,GAAY,QAAQ,SAAA;QACzB,IAAA,CAAK,gBAAA,GAAA,CAAmBA,OAAA,QAAQ,gBAAA,KAAR,OAAAA,OAA4B,CAAC;IACvD;AACF;;ACxIO,SAAS,aACd,MAAA,EACA,MAAA,EAC6B;IAE7B,IAAI,WAAW,KAAA,KAAa,WAAW,KAAA,GAAW;QAChD,OAAO,KAAA;IACT;IAGA,IAAI,WAAW,KAAA,GAAW;QACxB,OAAO;IACT;IAGA,IAAI,WAAW,KAAA,GAAW;QACxB,OAAO;IACT;IAGA,MAAM,SAAS;QAAE,GAAG,MAAA;IAAO;IAG3B,IAAA,MAAW,OAAO,OAAQ;QACxB,IAAI,OAAO,SAAA,CAAU,cAAA,CAAe,IAAA,CAAK,QAAQ,GAAG,GAAG;YACrD,MAAM,cAAc,MAAA,CAAO,GAAG,CAAA;YAG9B,IAAI,gBAAgB,KAAA,GAAW;YAG/B,MAAM,cACJ,OAAO,SAAS,MAAA,CAAO,GAAyB,CAAA,GAAI,KAAA;YAGtD,MAAM,iBACJ,gBAAgB,QAChB,OAAO,gBAAgB,YACvB,CAAC,MAAM,OAAA,CAAQ,WAAW,KAC1B,CAAA,CAAE,uBAAuB,IAAA,KACzB,CAAA,CAAE,uBAAuB,MAAA;YAE3B,MAAM,iBACJ,gBAAgB,QAChB,gBAAgB,KAAA,KAChB,OAAO,gBAAgB,YACvB,CAAC,MAAM,OAAA,CAAQ,WAAW,KAC1B,CAAA,CAAE,uBAAuB,IAAA,KACzB,CAAA,CAAE,uBAAuB,MAAA;YAG3B,IAAI,kBAAkB,gBAAgB;gBACpC,MAAA,CAAO,GAAoB,CAAA,GAAI,aAC7B,aACA;YAEJ,OAAO;gBAGL,MAAA,CAAO,GAAoB,CAAA,GAAI;YACjC;QACF;IACF;IAEA,OAAO;AACT;;ACpEO,SAAS,0BAA0B,EACxC,QAAA,EACF,EAM8B;IAC5B,OAAO;QACL,mBAAmB;QACnB,iBAAiB,OAAO,EAAE,MAAA,CAAO,CAAA,KAAM;YArB3C,IAAAC;YAsBM,OAAO;gBACL,GAAG,QAAA;gBACH,GAAG,MAAA;gBACH,kBAAkB,aAChB,SAAS,gBAAA,EACT,OAAO,gBAAA;gBACT,iCAAA;gBAAA,qDAAA;gBAIA,aACE,OAAO,WAAA,KAAgB,KAAK,OAAO,WAAA,IAAe,OAAA,CAC7CA,OAAA,SAAS,WAAA,KAAT,OAAAA,OAAwB,IACzB,OAAO,WAAA;YACf;QACF;IACF;AACF;;ACnCO,SAAS,uBACdC,KAAAA,EACA,YAAA,EACe;IAEf,IAAI,aAAa,MAAA,KAAW,GAAG;QAC7B,OAAO;IACT;IAGA,MAAM,cAAcA,MAAK,OAAA,CAAQ,YAAY;IAC7C,IAAI,gBAAgB,CAAA,GAAI;QACtB,OAAO;IACT;IAIA,IAAA,IAAS,IAAIA,MAAK,MAAA,GAAS,GAAG,KAAK,GAAG,IAAK;QACzC,MAAM,SAASA,MAAK,SAAA,CAAU,CAAC;QAC/B,IAAI,aAAa,UAAA,CAAW,MAAM,GAAG;YACnC,OAAO;QACT;IACF;IAEA,OAAO;AACT;;ACjBO,SAAS,2BAA2B,EACzC,OAAA,EACA,YAAY,IAAA,EACZ,qBAAqB,KAAA,EACvB,EAI8B;IAC5B,MAAM,aAAa,CAAA,CAAA,EAAI,OAAO,CAAA,CAAA,CAAA;IAC9B,MAAM,aAAa,CAAA,EAAA,EAAM,OAAO,CAAA,CAAA,CAAA;IAEhC,OAAO;QACL,mBAAmB;QACnB,cAAc,OAAO,EAAE,UAAA,CAAW,CAAA,KAAM;YACtC,MAAM,EAAE,MAAM,OAAA,EAAS,GAAG,KAAK,CAAA,GAAI,MAAM,WAAW;YAEpD,IAAI,WAAW,MAAM;gBACnB,OAAO;oBAAE,MAAM;oBAAS,GAAG,IAAA;gBAAK;YAClC;YAEA,MAAMC,QAAO,qBAAqB,aAAa,UAAU;YAEzD,MAAM,SAAS,IAAI,OAAO,GAAG,UAAU,CAAA,KAAA,EAAQ,UAAU,EAAA,EAAI,IAAI;YACjE,MAAM,UAAU,MAAM,IAAA,CAAKA,MAAK,QAAA,CAAS,MAAM,CAAC;YAEhD,IAAI,CAAC,QAAQ,MAAA,EAAQ;gBACnB,OAAO;oBAAE,MAAAA;oBAAM,GAAG,IAAA;gBAAK;YACzB;YAEA,MAAM,YAAY,QAAQ,GAAA,CAAI,CAAA,QAAS,KAAA,CAAM,CAAC,CAAC,EAAE,IAAA,CAAK,SAAS;YAE/D,IAAI,uBAAuBA;YAC3B,IAAA,IAAS,IAAI,QAAQ,MAAA,GAAS,GAAG,KAAK,GAAG,IAAK;gBAC5C,MAAM,QAAQ,OAAA,CAAQ,CAAC,CAAA;gBAEvB,MAAM,cAAc,qBAAqB,KAAA,CAAM,GAAG,MAAM,KAAK;gBAC7D,MAAM,aAAa,qBAAqB,KAAA,CACtC,MAAM,KAAA,GAAS,KAAA,CAAM,CAAC,CAAA,CAAE,MAAA;gBAG1B,uBACE,cAAA,CACC,YAAY,MAAA,GAAS,KAAK,WAAW,MAAA,GAAS,IAAI,YAAY,EAAA,IAC/D;YACJ;YAEA,OAAO;gBAAE,GAAG,IAAA;gBAAM,MAAM;gBAAsB;YAAU;QAC1D;QAEA,YAAY,OAAO,EAAE,QAAA,CAAS,CAAA,KAAM;YAClC,MAAM,EAAE,MAAA,EAAQ,GAAG,KAAK,CAAA,GAAI,MAAM,SAAS;YAE3C,IAAI,mBAAmB;YACvB,IAAI,cAAc;YAClB,IAAI,cAAc;YAClB,IAAI,cAAc;YAClB,IAAI,SAAS;YAEb,OAAO;gBACL,QAAQ,OAAO,WAAA,CACb,IAAI,gBAGF;oBACA,WAAW,CAAC,OAAO,eAAe;wBAChC,IAAI,MAAM,IAAA,KAAS,cAAc;4BAC/B,WAAW,OAAA,CAAQ,KAAK;4BACxB;wBACF;wBAEA,UAAU,MAAM,SAAA;wBAEhB,SAAS,QAAQA,KAAAA,EAAc;4BAC7B,IAAIA,MAAK,MAAA,GAAS,GAAG;gCACnB,MAAM,SACJ,eAAA,CACC,cAAc,CAAC,mBAAmB,CAAC,WAAA,IAChC,YACA;gCAEN,WAAW,OAAA,CAAQ;oCACjB,MAAM,cAAc,cAAc;oCAClC,WAAW,SAASA;gCACtB,CAAC;gCACD,cAAc;gCAEd,IAAI,aAAa;oCACf,mBAAmB;gCACrB,OAAO;oCACL,cAAc;gCAChB;4BACF;wBACF;wBAEA,GAAG;4BACD,MAAM,UAAU,cAAc,aAAa;4BAC3C,MAAM,aAAa,uBAAuB,QAAQ,OAAO;4BAGzD,IAAI,cAAc,MAAM;gCACtB,QAAQ,MAAM;gCACd,SAAS;gCACT;4BACF;4BAGA,QAAQ,OAAO,KAAA,CAAM,GAAG,UAAU,CAAC;4BAEnC,MAAM,iBACJ,aAAa,QAAQ,MAAA,IAAU,OAAO,MAAA;4BAExC,IAAI,gBAAgB;gCAClB,SAAS,OAAO,KAAA,CAAM,aAAa,QAAQ,MAAM;gCACjD,cAAc,CAAC;gCACf,cAAc;4BAChB,OAAO;gCACL,SAAS,OAAO,KAAA,CAAM,UAAU;gCAChC;4BACF;wBACF,QAAS,KAAA;oBACX;gBACF,CAAC;gBAEH,GAAG,IAAA;YACL;QACF;IACF;AACF;;ACtIO,SAAS,8BAAyD;IACvE,OAAO;QACL,mBAAmB;QACnB,YAAY,OAAO,EAAE,UAAA,CAAW,CAAA,KAAM;YACpC,MAAM,SAAS,MAAM,WAAW;YAEhC,MAAM,kBAAkB,IAAI,eAA0C;gBACpE,OAAM,UAAA,EAAY;oBAChB,WAAW,OAAA,CAAQ;wBAAE,MAAM;wBAAqB,GAAG,OAAO,QAAA;oBAAS,CAAC;oBAEpE,IAAI,OAAO,SAAA,EAAW;wBACpB,IAAI,OAAO,OAAO,SAAA,KAAc,UAAU;4BACxC,WAAW,OAAA,CAAQ;gCACjB,MAAM;gCACN,WAAW,OAAO,SAAA;4BACpB,CAAC;wBACH,OAAO;4BACL,KAAA,MAAW,aAAa,OAAO,SAAA,CAAW;gCACxC,OAAQ,UAAU,IAAA,EAAM;oCACtB,KAAK;wCAAQ;4CACX,WAAW,OAAA,CAAQ;gDACjB,MAAM;gDACN,WAAW,UAAU,IAAA;4CACvB,CAAC;4CACD,IAAI,UAAU,SAAA,IAAa,MAAM;gDAC/B,WAAW,OAAA,CAAQ;oDACjB,MAAM;oDACN,WAAW,UAAU,SAAA;gDACvB,CAAC;4CACH;4CACA;wCACF;oCACA,KAAK;wCAAY;4CACf,WAAW,OAAA,CAAQ;gDACjB,MAAM;gDACN,MAAM,UAAU,IAAA;4CAClB,CAAC;4CACD;wCACF;gCACF;4BACF;wBACF;oBACF;oBAEA,IAAI,OAAO,IAAA,EAAM;wBACf,WAAW,OAAA,CAAQ;4BACjB,MAAM;4BACN,WAAW,OAAO,IAAA;wBACpB,CAAC;oBACH;oBAEA,IAAI,OAAO,SAAA,EAAW;wBACpB,KAAA,MAAW,YAAY,OAAO,SAAA,CAAW;4BACvC,WAAW,OAAA,CAAQ;gCACjB,MAAM;gCACN,cAAc;gCACd,YAAY,SAAS,UAAA;gCACrB,UAAU,SAAS,QAAA;gCACnB,eAAe,SAAS,IAAA;4BAC1B,CAAC;4BAED,WAAW,OAAA,CAAQ;gCACjB,MAAM;gCACN,GAAG,QAAA;4BACL,CAAC;wBACH;oBACF;oBAEA,WAAW,OAAA,CAAQ;wBACjB,MAAM;wBACN,cAAc,OAAO,YAAA;wBACrB,OAAO,OAAO,KAAA;wBACd,UAAU,OAAO,QAAA;wBACjB,kBAAkB,OAAO,gBAAA;oBAC3B,CAAC;oBAED,WAAW,KAAA,CAAM;gBACnB;YACF,CAAC;YAED,OAAO;gBACL,QAAQ;gBACR,SAAS,OAAO,OAAA;gBAChB,aAAa,OAAO,WAAA;gBACpB,UAAU,OAAO,QAAA;YACnB;QACF;IACF;AACF;;AC9EO,IAAM,oBAAoB,CAAC,EAChC,KAAA,EACA,YAAY,aAAA,EACZ,OAAA,EACA,UAAA,EACF,KAKuB;IACrB,OAAO,QAAQ,aAAa,EACzB,OAAA,CAAQ,EACR,MAAA,CAAO,CAAC,cAAc,eAAe;QACpC,OAAO,OAAO;YAAE,OAAO;YAAc;YAAY;YAAS;QAAW,CAAC;IACxE,GAAG,KAAK;AACZ;AAEA,IAAM,SAAS,CAAC,EACd,KAAA,EACA,YAAY,EAAE,eAAA,EAAiB,YAAA,EAAc,UAAA,CAAW,CAAA,EACxD,OAAA,EACA,UAAA,EACF,KAKuB;IA5CvB,IAAAC;IA6CE,eAAe,YAAY,EACzB,MAAA,EACA,IAAA,EACF,EAGG;QACD,OAAO,kBAAkB,MAAM,gBAAgB;YAAE;YAAQ;QAAK,CAAC,IAAI;IACrE;IAEA,OAAO;QACL,sBAAsB;QAEtB,UAAU,cAAA,OAAA,aAAc,MAAM,QAAA;QAC9B,SAAS,WAAA,OAAA,UAAW,MAAM,OAAA;QAE1B,6BAA6B,MAAM,2BAAA;QACnC,mBAAmB,MAAM,iBAAA;QACzB,aAAA,CAAaA,OAAA,MAAM,WAAA,KAAN,OAAA,KAAA,IAAAA,KAAmB,IAAA,CAAK;QACrC,2BAA2B,MAAM,yBAAA;QAEjC,MAAM,YACJ,MAAA,EAC6D;YAC7D,MAAM,oBAAoB,MAAM,YAAY;gBAAE;gBAAQ,MAAM;YAAW,CAAC;YACxE,MAAM,aAAa,UAAY,MAAM,UAAA,CAAW,iBAAiB;YACjE,MAAM,WAAW,UAAY,MAAM,QAAA,CAAS,iBAAiB;YAC7D,OAAO,eACH,aAAa;gBACX;gBACA;gBACA,QAAQ;gBACR;YACF,CAAC,IACD,WAAW;QACjB;QAEA,MAAM,UACJ,MAAA,EAC2D;YAC3D,MAAM,oBAAoB,MAAM,YAAY;gBAAE;gBAAQ,MAAM;YAAS,CAAC;YACtE,MAAM,aAAa,UAAY,MAAM,UAAA,CAAW,iBAAiB;YACjE,MAAM,WAAW,UAAY,MAAM,QAAA,CAAS,iBAAiB;YAC7D,OAAO,aACH,WAAW;gBAAE;gBAAY;gBAAU,QAAQ;gBAAmB;YAAM,CAAC,IACrE,SAAS;QACf;IACF;AACF;AAMO,IAAM,iCAAiC;;AC5FvC,SAAS,oBAAoB,EAClC,QAAA,EACA,OAAA,EACF,EAGG;IACD,OAAO;WACD,SAAS,MAAA,GAAS,KAAK,QAAA,CAAS,SAAS,MAAA,GAAS,CAAC,CAAA,CAAE,EAAA,KAAO,QAAQ,EAAA,GACpE,SAAS,KAAA,CAAM,GAAG,CAAA,CAAE,IACpB;QACJ;KACF;AACF;;;ACCO,SAAS,uBAAuB,EACrC,QAAA,EACA,gBAAA,EACA,WAAW,EAAE,cAAc,IAAM,aAAA,GAAA,IAAI,KAAK,CAAA,CAAE,CAAA,GAAI,CAAC,CAAA,EACnD,EAUc;IAnCd,IAAAE,MAAA,IAAA,IAAA;IAoCE,MAAM,iBAAiB,gBAAgB,QAAQ;IAE/C,KAAA,MAAW,WAAW,iBAAkB;QACtC,MAAM,OAAO,QAAQ,IAAA;QAGrB,MAAM,cAAc,cAAA,CAAe,eAAe,MAAA,GAAS,CAAC,CAAA;QAC5D,MAAM,yBAAyB,YAAY,IAAA,KAAS;QAEpD,OAAQ,MAAM;YACZ,KAAK;gBAAa;oBAChB,IAASC,sBAAT,SAA4B,IAAA,EAAc;wBACxC,OAAA,CACE,OAAO,QAAQ,OAAA,KAAY,WACvB,CAAC,CAAA,GACD,QAAQ,OAAA,CAAQ,MAAA,CAAO,CAAA,OAAQ,KAAK,IAAA,KAAS,WAAW,CAAA,EAC5D,GAAA,CAAI,CAAA,OAAA,CAAS;gCACb,OAAO;gCACP;gCACA,MAAM,KAAK,IAAA;gCACX,YAAY,KAAK,UAAA;gCACjB,UAAU,KAAK,QAAA;4BACjB,CAAA,CAAE;oBACJ;oBAZS,IAAA,qBAAAA;oBAcT,MAAM,QAMF;wBAAC;4BAAE,MAAM;wBAAsB,CAAC;qBAAA;oBACpC,IAAI,cAAc;oBAClB,IAAI,uBAAuB,KAAA;oBAE3B,IAAI,OAAO,QAAQ,OAAA,KAAY,UAAU;wBACvC,cAAc,QAAQ,OAAA;wBACtB,MAAM,IAAA,CAAK;4BACT,MAAM;4BACN,MAAM,QAAQ,OAAA;wBAChB,CAAC;oBACH,OAAO;wBACL,IAAI,gBAA6C,KAAA;wBACjD,KAAA,MAAW,QAAQ,QAAQ,OAAA,CAAS;4BAClC,OAAQ,KAAK,IAAA,EAAM;gCACjB,KAAK;oCAAQ;wCACX,gBAAgB,KAAA;wCAEhB,eAAe,KAAK,IAAA;wCACpB,MAAM,IAAA,CAAK;4CACT,MAAM;4CACN,MAAM,KAAK,IAAA;wCACb,CAAC;wCACD;oCACF;gCACA,KAAK;oCAAa;wCAChB,IAAI,iBAAiB,MAAM;4CACzB,gBAAgB;gDACd,MAAM;gDACN,WAAW;gDACX,SAAS,CAAC,CAAA;4CACZ;4CACA,MAAM,IAAA,CAAK,aAAa;wCAC1B;wCAEA,uBAAA,CAAwB,wBAAA,OAAA,uBAAwB,EAAA,IAAM,KAAK,IAAA;wCAC3D,cAAc,SAAA,IAAa,KAAK,IAAA;wCAChC,cAAc,OAAA,CAAQ,IAAA,CAAK;4CACzB,MAAM;4CACN,MAAM,KAAK,IAAA;4CACX,WAAW,KAAK,SAAA;wCAClB,CAAC;wCACD;oCACF;gCACA,KAAK;oCAAsB;wCACzB,IAAI,iBAAiB,MAAM;4CACzB,gBAAgB;gDACd,MAAM;gDACN,WAAW;gDACX,SAAS,CAAC,CAAA;4CACZ;4CACA,MAAM,IAAA,CAAK,aAAa;wCAC1B;wCAEA,cAAc,OAAA,CAAQ,IAAA,CAAK;4CACzB,MAAM;4CACN,MAAM,KAAK,IAAA;wCACb,CAAC;wCACD;oCACF;gCACA,KAAK;oCACH;gCACF,KAAK;oCACH,IAAI,KAAK,IAAA,YAAgB,KAAK;wCAC5B,MAAM,gKAAIF,aAAAA,CAAW;4CACnB,MAAM;4CACN,SAAS;wCACX,CAAC;oCACH;oCACA,MAAM,IAAA,CAAK;wCACT,MAAM;wCACN,UAAU,KAAK,QAAA;wCACf,MAAM,iCAAiC,KAAK,IAAI;oCAClD,CAAC;oCACD;4BACJ;wBACF;oBACF;oBAEA,IAAI,wBAAwB;wBAC1B,MAAM,6LAAU,+BAAA,EACd,YAAY,eAAA;wBAGd,CAAAC,OAAA,YAAY,KAAA,KAAZ,OAAAA,OAAA,YAAY,KAAA,GAAU,CAAC,CAAA;wBAEvB,YAAY,OAAA,GAAU;wBACtB,YAAY,SAAA,GAAY;wBACxB,YAAY,KAAA,CAAM,IAAA,CAAK,GAAG,KAAK;wBAE/B,YAAY,eAAA,GAAkB;+BAC5B,CAAI,KAAA,YAAY,eAAA,KAAZ,OAAA,KAA+B,CAAC,CAAA;+BACjCC,oBAAmB,YAAY,KAAA,IAAY,IAAI,UAAU,CAAC;yBAC/D;wBAEAA,oBAAmB,YAAY,KAAA,IAAY,IAAI,UAAU,CAAC,EACvD,GAAA,CAAI,CAAA,OAAA,CAAS;gCACZ,MAAM;gCACN,gBAAgB;4BAClB,CAAA,CAAE,EACD,OAAA,CAAQ,CAAA,SAAQ;4BACf,YAAY,KAAA,CAAO,IAAA,CAAK,IAAI;wBAC9B,CAAC;oBACL,OAAO;wBAEL,eAAe,IAAA,CAAK;4BAClB,MAAM;4BACN,IAAI,QAAQ,EAAA;4BACZ,WAAW,YAAY;4BAAA,8EAAA;4BACvB,SAAS;4BACT,WAAW;4BACX,iBAAiBA,oBAAmB,CAAC;4BACrC,OAAO;mCACF;mCACAA,oBAAmB,CAAC,EAAE,GAAA,CAAI,CAAA,OAAA,CAAS;wCACpC,MAAM;wCACN,gBAAgB;oCAClB,CAAA,CAAE;6BACJ;wBACF,CAAC;oBACH;oBAEA;gBACF;YAEA,KAAK;gBAAQ;oBAEX,CAAA,KAAA,YAAY,eAAA,KAAZ,OAAA,KAAA,YAAY,eAAA,GAAoB,CAAC,CAAA;oBAEjC,IAAI,YAAY,IAAA,KAAS,aAAa;wBACpC,MAAM,IAAI,MACR,CAAA,8CAAA,EAAiD,YAAY,IAAI,EAAA;oBAErE;oBAEA,CAAA,KAAA,YAAY,KAAA,KAAZ,OAAA,KAAA,YAAY,KAAA,GAAU,CAAC,CAAA;oBAEvB,KAAA,MAAW,eAAe,QAAQ,OAAA,CAAS;wBAEzC,MAAM,WAAW,YAAY,eAAA,CAAgB,IAAA,CAC3C,CAAA,OAAQ,KAAK,UAAA,KAAe,YAAY,UAAA;wBAE1C,MAAM,eACJ,YAAY,KAAA,CAAM,IAAA,CAChB,CAAC,OACC,KAAK,IAAA,KAAS,qBACd,KAAK,cAAA,CAAe,UAAA,KAAe,YAAY,UAAA;wBAGrD,IAAI,CAAC,UAAU;4BACb,MAAM,IAAI,MAAM,yCAAyC;wBAC3D;wBAGA,SAAS,KAAA,GAAQ;wBACjB,MAAM,aAAa;wBACnB,WAAW,MAAA,GAAS,YAAY,MAAA;wBAEhC,IAAI,cAAc;4BAChB,aAAa,cAAA,GAAiB;wBAChC,OAAO;4BACL,YAAY,KAAA,CAAM,IAAA,CAAK;gCACrB,MAAM;gCACN,gBAAgB;4BAClB,CAAC;wBACH;oBACF;oBAEA;gBACF;YAEA;gBAAS;oBACP,MAAM,mBAA0B;oBAChC,MAAM,IAAI,MAAM,CAAA,0BAAA,EAA6B,gBAAgB,EAAE;gBACjE;QACF;IACF;IAEA,OAAO;AACT;;ACtOO,SAAS,eAId,EACA,cAAA,EACA,mBAAA,EACA,WAAA,EACA,gBAAA,EACF,EAWE;IACA,OAAO;QACL,eAAc,OAAA,EAAyD;YACrE,IAAI,kBAAkB,QAAQ,WAAW,gBAAgB;gBACvD,OAAO,cAAA,CAAe,OAAO,CAAA;YAC/B;YAEA,IAAI,kBAAkB;gBACpB,OAAO,iBAAiB,aAAA,CAAc,OAAO;YAC/C;YAEA,MAAM,+JAAIC,oBAAAA,CAAiB;gBAAE;gBAAS,WAAW;YAAgB,CAAC;QACpE;QAEA,oBACE,OAAA,EACwB;YACxB,IAAI,uBAAuB,QAAQ,WAAW,qBAAqB;gBACjE,OAAO,mBAAA,CAAoB,OAAO,CAAA;YACpC;YAEA,IAAI,kBAAkB;gBACpB,OAAO,iBAAiB,kBAAA,CAAmB,OAAO;YACpD;YAEA,MAAM,gKAAIA,mBAAAA,CAAiB;gBAAE;gBAAS,WAAW;YAAqB,CAAC;QACzE;QAEA,YAAW,OAAA,EAAmD;YAC5D,IAAI,eAAe,QAAQ,WAAW,aAAa;gBACjD,OAAO,WAAA,CAAY,OAAO,CAAA;YAC5B;YAEA,IAAI,oBAAA,OAAA,KAAA,IAAA,iBAAkB,UAAA,EAAY;gBAChC,OAAO,iBAAiB,UAAA,CAAW,OAAO;YAC5C;YAEA,MAAM,gKAAIA,mBAAAA,CAAiB;gBAAE;gBAAS,WAAW;YAAa,CAAC;QACjE;IACF;AACF;AAKO,IAAM,8BAA8B;;AC9E3C,IAAMG,SAAO;AACb,IAAMC,WAAS,CAAA,gBAAA,EAAmBD,MAAI,EAAA;AACtC,IAAME,WAAS,OAAO,GAAA,CAAID,QAAM;AAJhC,IAAAE;AAMO,IAAM,sBAAN,0KAAkCJ,mBAAAA,CAAiB;IAMxD,YAAY,EACV,OAAA,EACA,SAAA,EACA,UAAA,EACA,kBAAA,EACA,UAAU,CAAA,kBAAA,EAAqB,UAAU,CAAA,uBAAA,EAA0B,mBAAmB,IAAA,CAAK,CAAC,CAAA,CAAA,CAAA,EAC9F,CAMG;QACD,KAAA,CAAM;YAAE,WAAWC;YAAM;YAAS;YAAW;QAAQ,CAAC;QAlBxD,IAAA,CAAkBG,KAAAA,GAAU;QAoB1B,IAAA,CAAK,UAAA,GAAa;QAClB,IAAA,CAAK,kBAAA,GAAqB;IAC5B;IAEA,OAAO,WAAW,KAAA,EAA8C;QAC9D,mKAAOL,aAAAA,CAAW,SAAA,CAAU,OAAOG,QAAM;IAC3C;AACF;AA3BoBE,OAAAD;;ACsCb,SAAS,uBAId,SAAA,EACA,EACE,YAAY,GAAA,EACd,GAEI,CAAC,CAAA,EAC2C;IAChD,MAAM,WAAW,IAAI,wBAA8C;QACjE;IACF,CAAC;IAED,KAAA,MAAW,CAAC,IAAI,QAAQ,CAAA,IAAK,OAAO,OAAA,CAAQ,SAAS,EAAG;QACtD,SAAS,gBAAA,CAAiB;YAAE;YAAI;QAAS,CAGxC;IACH;IAEA,OAAO;AACT;AAKO,IAAM,sCAAsC;AAEnD,IAAM,0BAAN,MAIA;IAIE,YAAY,EAAE,SAAA,CAAU,CAAA,CAA6B;QAHrD,IAAA,CAAQ,SAAA,GAAuB,CAAC;QAI9B,IAAA,CAAK,SAAA,GAAY;IACnB;IAEA,iBAA4C,EAC1C,EAAA,EACA,QAAA,EACF,EAGS;QACP,IAAA,CAAK,SAAA,CAAU,EAAE,CAAA,GAAI;IACvB;IAEQ,YAAY,EAAA,EAAwB;QAC1C,MAAM,WAAW,IAAA,CAAK,SAAA,CAAU,EAAqB,CAAA;QAErD,IAAI,YAAY,MAAM;YACpB,MAAM,IAAI,oBAAoB;gBAC5B,SAAS;gBACT,WAAW;gBACX,YAAY;gBACZ,oBAAoB,OAAO,IAAA,CAAK,IAAA,CAAK,SAAS;YAChD,CAAC;QACH;QAEA,OAAO;IACT;IAEQ,QACN,EAAA,EACA,SAAA,EACkB;QAClB,MAAM,QAAQ,GAAG,OAAA,CAAQ,IAAA,CAAK,SAAS;QAEvC,IAAI,UAAU,CAAA,GAAI;YAChB,MAAM,gKAAIG,mBAAAA,CAAiB;gBACzB,SAAS;gBACT;gBACA,SACE,CAAA,QAAA,EAAW,SAAS,CAAA,kBAAA,EAAqB,EAAE,CAAA,mCAAA,EACN,IAAA,CAAK,SAAS,CAAA,SAAA,CAAA;YACvD,CAAC;QACH;QAEA,OAAO;YAAC,GAAG,KAAA,CAAM,GAAG,KAAK;YAAG,GAAG,KAAA,CAAM,QAAQ,IAAA,CAAK,SAAA,CAAU,MAAM,CAAC;SAAA;IACrE;IAEA,cACE,EAAA,EACe;QArInB,IAAAC,MAAA;QAsII,MAAM,CAAC,YAAY,OAAO,CAAA,GAAI,IAAA,CAAK,OAAA,CAAQ,IAAI,eAAe;QAC9D,MAAM,QAAA,CAAQ,KAAA,CAAAA,OAAA,IAAA,CAAK,WAAA,CAAY,UAAU,CAAA,EAAE,aAAA,KAA7B,OAAA,KAAA,IAAA,GAAA,IAAA,CAAAA,MAA6C;QAE3D,IAAI,SAAS,MAAM;YACjB,MAAM,gKAAID,mBAAAA,CAAiB;gBAAE,SAAS;gBAAI,WAAW;YAAgB,CAAC;QACxE;QAEA,OAAO;IACT;IAEA,mBACE,EAAA,EACwB;QAlJ5B,IAAAC;QAmJI,MAAM,CAAC,YAAY,OAAO,CAAA,GAAI,IAAA,CAAK,OAAA,CAAQ,IAAI,oBAAoB;QACnE,MAAM,WAAW,IAAA,CAAK,WAAA,CAAY,UAAU;QAE5C,MAAM,QAAA,CAAQA,OAAA,SAAS,kBAAA,KAAT,OAAA,KAAA,IAAAA,KAAA,IAAA,CAAA,UAA8B;QAE5C,IAAI,SAAS,MAAM;YACjB,MAAM,gKAAID,mBAAAA,CAAiB;gBACzB,SAAS;gBACT,WAAW;YACb,CAAC;QACH;QAEA,OAAO;IACT;IAEA,WACE,EAAA,EACY;QApKhB,IAAAC;QAqKI,MAAM,CAAC,YAAY,OAAO,CAAA,GAAI,IAAA,CAAK,OAAA,CAAQ,IAAI,YAAY;QAC3D,MAAM,WAAW,IAAA,CAAK,WAAA,CAAY,UAAU;QAE5C,MAAM,QAAA,CAAQA,OAAA,SAAS,UAAA,KAAT,OAAA,KAAA,IAAAA,KAAA,IAAA,CAAA,UAAsB;QAEpC,IAAI,SAAS,MAAM;YACjB,MAAM,gKAAID,mBAAAA,CAAiB;gBAAE,SAAS;gBAAI,WAAW;YAAa,CAAC;QACrE;QAEA,OAAO;IACT;AACF;;;AEjDO,SAAS,KACdE,KAAAA,EAC0B;IAC1B,OAAOA;AACT;;;;AG3HO,IAAM,0BAA0B;AAChC,IAAM,8BAA8B;IACzC;IACA;CACF;AA6BA,IAAM,yNAAqCE,IAAAA,CACxC,MAAA,CAAO;IACN,0LAAMA,IAAAA,CAAE,MAAA,CAAO;IACf,4LAASA,KAAAA,CAAE,MAAA,CAAO;AACpB,CAAC,EACA,WAAA,CAAY;AAGR,IAAM,uMAAmBA,IAAAA,CAC7B,MAAA,CAAO;IACN,2LAAOA,IAAAA,CAAE,QAAA,qLAASA,IAAAA,CAAE,MAAA,CAAO,CAAC,CAAC,EAAE,WAAA,CAAY,CAAC;AAC9C,CAAC,EACA,WAAA,CAAY;AAER,IAAM,eAAe;AAErB,IAAM,oMAAgBA,IAAAA,CAAE,MAAA,CAAO;IACpC,4LAAQA,IAAAA,CAAE,MAAA,CAAO;IACjB,4LAAQA,IAAAA,CAAE,QAAA,CAAS,gBAAgB;AACrC,CAAC;AAUD,IAAM,+MAA2BA,IAAAA,CAC9B,MAAA,CAAO;IACN,cAAcA,wLAAAA,CAAE,QAAA,qLAASA,IAAAA,CAAE,MAAA,CAAO,CAAC,CAAC,EAAE,WAAA,CAAY,CAAC;IACnD,6LAASA,IAAAA,CAAE,QAAA,qLAASA,IAAAA,CAAE,MAAA,CAAO,CAAC,CAAC,EAAE,WAAA,CAAY,CAAC;IAC9C,6LAASA,IAAAA,CAAE,QAAA,qLACTA,IAAAA,CACG,MAAA,CAAO;QACN,aAAaA,wLAAAA,CAAE,QAAA,qLAASA,IAAAA,CAAE,OAAA,CAAQ,CAAC;IACrC,CAAC,EACA,WAAA,CAAY;IAEjB,+LAAWA,IAAAA,CAAE,QAAA,qLACXA,IAAAA,CACG,MAAA,CAAO;QACN,+LAAWA,IAAAA,CAAE,QAAA,qLAASA,IAAAA,CAAE,OAAA,CAAQ,CAAC;QACjC,gMAAaA,KAAAA,CAAE,QAAA,qLAASA,IAAAA,CAAE,OAAA,CAAQ,CAAC;IACrC,CAAC,EACA,WAAA,CAAY;IAEjB,2LAAOA,IAAAA,CAAE,QAAA,qLACPA,IAAAA,CACG,MAAA,CAAO;QACN,iMAAaA,IAAAA,CAAE,QAAA,qLAASA,IAAAA,CAAE,OAAA,CAAQ,CAAC;IACrC,CAAC,EACA,WAAA,CAAY;AAEnB,CAAC,EACA,WAAA,CAAY;AAGR,IAAM,yBAAyB,aAAa,MAAA,CAAO;IACxD,qMAAiBA,IAAAA,CAAE,MAAA,CAAO;IAC1B,cAAc;IACd,YAAY;IACZ,kMAAcA,IAAAA,CAAE,QAAA,qLAASA,IAAAA,CAAE,MAAA,CAAO,CAAC;AACrC,CAAC;AASD,IAAM,wBAAwB,aAAa,MAAA,CAAO;IAChD,gMAAYA,IAAAA,CAAE,QAAA,qLAASA,IAAAA,CAAE,MAAA,CAAO,CAAC;AACnC,CAAC;AAED,IAAM,aAAaA,wLAAAA,CAChB,MAAA,CAAO;IACN,0LAAMA,IAAAA,CAAE,MAAA,CAAO;IACf,iMAAaA,IAAAA,CAAE,QAAA,qLAASA,IAAAA,CAAE,MAAA,CAAO,CAAC;IAClC,iMAAaA,IAAAA,CACV,MAAA,CAAO;QACN,0LAAMA,IAAAA,CAAE,OAAA,CAAQ,QAAQ;QACxB,YAAYA,wLAAAA,CAAE,QAAA,qLAASA,IAAAA,CAAE,MAAA,CAAO,CAAC,CAAC,EAAE,WAAA,CAAY,CAAC;IACnD,CAAC,EACA,WAAA,CAAY;AACjB,CAAC,EACA,WAAA,CAAY;AAER,IAAM,wBAAwB,sBAAsB,MAAA,CAAO;IAChE,OAAOA,wLAAAA,CAAE,KAAA,CAAM,UAAU;AAC3B,CAAC;AAGD,IAAM,wMAAoBA,IAAAA,CACvB,MAAA,CAAO;IACN,0LAAMA,IAAAA,CAAE,OAAA,CAAQ,MAAM;IACtB,0LAAMA,IAAAA,CAAE,MAAA,CAAO;AACjB,CAAC,EACA,WAAA,CAAY;AACf,IAAM,qBAAqBA,wLAAAA,CACxB,MAAA,CAAO;IACN,0LAAMA,IAAAA,CAAE,OAAA,CAAQ,OAAO;IACvB,0LAAMA,IAAAA,CAAE,MAAA,CAAO,EAAE,MAAA,CAAO;IACxB,8LAAUA,IAAAA,CAAE,MAAA,CAAO;AACrB,CAAC,EACA,WAAA,CAAY;AACf,IAAM,yBAAyBA,wLAAAA,CAC5B,MAAA,CAAO;IAAA;;GAAA,GAIN,yLAAKA,IAAAA,CAAE,MAAA,CAAO;IAAA;;GAAA,GAId,8LAAUA,IAAAA,CAAE,QAAA,qLAASA,IAAAA,CAAE,MAAA,CAAO,CAAC;AACjC,CAAC,EACA,WAAA,CAAY;AACf,IAAM,6BAA6B,uBAAuB,MAAA,CAAO;IAC/D,0LAAMA,IAAAA,CAAE,MAAA,CAAO;AACjB,CAAC;AACD,IAAM,6BAA6B,uBAAuB,MAAA,CAAO;IAC/D,0LAAMA,IAAAA,CAAE,MAAA,CAAO,EAAE,MAAA,CAAO;AAC1B,CAAC;AACD,IAAM,6MAAyBA,IAAAA,CAC5B,MAAA,CAAO;IACN,0LAAMA,IAAAA,CAAE,OAAA,CAAQ,UAAU;IAC1B,UAAUA,wLAAAA,CAAE,KAAA,CAAM;QAAC;QAA4B,0BAA0B;KAAC;AAC5E,CAAC,EACA,WAAA,CAAY;AAER,IAAM,uBAAuB,aAAa,MAAA,CAAO;IACtD,6LAASA,IAAAA,CAAE,KAAA,qLACTA,IAAAA,CAAE,KAAA,CAAM;QAAC;QAAmB;QAAoB,sBAAsB;KAAC;IAEzE,4LAASA,KAAAA,CAAE,OAAA,CAAQ,EAAE,OAAA,CAAQ,KAAK,EAAE,QAAA,CAAS;AAC/C,CAAC,EAAE,EAAA,CACD,aAAa,MAAA,CAAO;IAClB,gMAAYA,IAAAA,CAAE,OAAA,CAAQ;AACxB,CAAC;;ADnLH,IAAM,kBAAkB;AAExB,IAAM,2MAAuBC,IAAAA,CAC1B,MAAA,CAAO;IACN,6LAASA,IAAAA,CAAE,OAAA,CAAQ,eAAe;IAClC,wLAAIA,IAAAA,CAAE,KAAA,CAAM;4LAACA,IAAAA,CAAE,MAAA,CAAO;QAAGA,wLAAAA,CAAE,MAAA,CAAO,EAAE,GAAA,CAAI,CAAC;KAAC;AAC5C,CAAC,EACA,KAAA,CAAM,aAAa,EACnB,MAAA,CAAO;AAIV,IAAM,4MAAwBA,IAAAA,CAC3B,MAAA,CAAO;IACN,SAASA,wLAAAA,CAAE,OAAA,CAAQ,eAAe;IAClC,wLAAIA,IAAAA,CAAE,KAAA,CAAM;4LAACA,IAAAA,CAAE,MAAA,CAAO;4LAAGA,IAAAA,CAAE,MAAA,CAAO,EAAE,GAAA,CAAI,CAAC;KAAC;IAC1C,QAAQ;AACV,CAAC,EACA,MAAA,CAAO;AAIV,IAAM,yMAAqBA,IAAAA,CACxB,MAAA,CAAO;IACN,6LAASA,IAAAA,CAAE,OAAA,CAAQ,eAAe;IAClC,uLAAIA,KAAAA,CAAE,KAAA,CAAM;4LAACA,IAAAA,CAAE,MAAA,CAAO;QAAGA,wLAAAA,CAAE,MAAA,CAAO,EAAE,GAAA,CAAI,CAAC;KAAC;IAC1C,2LAAOA,IAAAA,CAAE,MAAA,CAAO;QACd,0LAAMA,IAAAA,CAAE,MAAA,CAAO,EAAE,GAAA,CAAI;QACrB,6LAASA,IAAAA,CAAE,MAAA,CAAO;QAClB,0LAAMA,IAAAA,CAAE,QAAA,qLAASA,IAAAA,CAAE,OAAA,CAAQ,CAAC;IAC9B,CAAC;AACH,CAAC,EACA,MAAA,CAAO;AAIV,IAAM,gNAA4BA,IAAAA,CAC/B,MAAA,CAAO;IACN,6LAASA,IAAAA,CAAE,OAAA,CAAQ,eAAe;AACpC,CAAC,EACA,KAAA,qLACCA,IAAAA,CAAE,MAAA,CAAO;IACP,2LAAQA,KAAAA,CAAE,MAAA,CAAO;IACjB,4LAAQA,IAAAA,CAAE,QAAA,CAAS,gBAAgB;AACrC,CAAC,GAEF,MAAA,CAAO;AAIH,IAAM,2MAAuBA,IAAAA,CAAE,KAAA,CAAM;IAC1C;IACA;IACA;IACA;CACD;;ADrDM,IAAM,kBAAN,MAA8C;IAcnD,YAAY,EACV,GAAA,EACA,OAAA,EACF,CAGG;QAhBH,IAAA,CAAQ,SAAA,GAAY;QAiBlB,IAAA,CAAK,GAAA,GAAM,IAAI,IAAI,GAAG;QACtB,IAAA,CAAK,OAAA,GAAU;IACjB;IAEA,MAAM,QAAuB;QAC3B,OAAO,IAAI,QAAc,CAAC,SAAS,WAAW;YAC5C,IAAI,IAAA,CAAK,SAAA,EAAW;gBAClB,OAAO,QAAQ;YACjB;YAEA,IAAA,CAAK,eAAA,GAAkB,IAAI,gBAAgB;YAE3C,MAAM,sBAAsB,YAAY;gBAtC9C,IAAAC,MAAA,IAAA;gBAuCQ,IAAI;oBACF,MAAM,UAAU,IAAI,QAAQ,IAAA,CAAK,OAAO;oBACxC,QAAQ,GAAA,CAAI,UAAU,mBAAmB;oBACzC,MAAM,WAAW,MAAM,MAAM,IAAA,CAAK,GAAA,CAAI,IAAA,EAAM;wBAC1C;wBACA,QAAA,CAAQA,OAAA,IAAA,CAAK,eAAA,KAAL,OAAA,KAAA,IAAAA,KAAsB,MAAA;oBAChC,CAAC;oBAED,IAAI,CAAC,SAAS,EAAA,IAAM,CAAC,SAAS,IAAA,EAAM;wBAClC,MAAM,QAAQ,IAAI,eAAe;4BAC/B,SAAS,CAAA,yBAAA,EAA4B,SAAS,MAAM,CAAA,CAAA,EAAI,SAAS,UAAU,EAAA;wBAC7E,CAAC;wBACD,CAAA,KAAA,IAAA,CAAK,OAAA,KAAL,OAAA,KAAA,IAAA,GAAA,IAAA,CAAA,IAAA,EAAe;wBACf,OAAO,OAAO,KAAK;oBACrB;oBAEA,MAAM,SAAS,SAAS,IAAA,CACrB,WAAA,CAAY,IAAI,kBAAkB,CAAC,EACnC,WAAA,KAAY,qMAAA,CAA8B,CAAC;oBAE9C,MAAM,SAAS,OAAO,SAAA,CAAU;oBAEhC,MAAM,gBAAgB,YAAY;wBA7D5C,IAAAA,MAAAC,KAAAC;wBA8DY,IAAI;4BACF,MAAO,KAAM;gCACX,MAAM,EAAE,IAAA,EAAM,KAAA,CAAM,CAAA,GAAI,MAAM,OAAO,IAAA,CAAK;gCAE1C,IAAI,MAAM;oCACR,IAAI,IAAA,CAAK,SAAA,EAAW;wCAClB,IAAA,CAAK,SAAA,GAAY;wCACjB,MAAM,IAAI,eAAe;4CACvB,SACE;wCACJ,CAAC;oCACH;oCACA;gCACF;gCAEA,MAAM,EAAE,KAAA,EAAO,IAAA,CAAK,CAAA,GAAI;gCAExB,IAAI,UAAU,YAAY;oCACxB,IAAA,CAAK,QAAA,GAAW,IAAI,IAAI,MAAM,IAAA,CAAK,GAAG;oCAEtC,IAAI,IAAA,CAAK,QAAA,CAAS,MAAA,KAAW,IAAA,CAAK,GAAA,CAAI,MAAA,EAAQ;wCAC5C,MAAM,IAAI,eAAe;4CACvB,SAAS,CAAA,2EAAA,EAA8E,IAAA,CAAK,QAAA,CAAS,MAAM,EAAA;wCAC7G,CAAC;oCACH;oCAEA,IAAA,CAAK,SAAA,GAAY;oCACjB,QAAQ;gCACV,OAAA,IAAW,UAAU,WAAW;oCAC9B,IAAI;wCACF,MAAM,UAAU,qBAAqB,KAAA,CACnC,KAAK,KAAA,CAAM,IAAI;wCAEjB,CAAAF,OAAA,IAAA,CAAK,SAAA,KAAL,OAAA,KAAA,IAAAA,KAAA,IAAA,CAAA,IAAA,EAAiB;oCACnB,EAAA,OAAS,OAAO;wCACd,MAAM,IAAI,IAAI,eAAe;4CAC3B,SACE;4CACF,OAAO;wCACT,CAAC;wCACD,CAAAC,MAAA,IAAA,CAAK,OAAA,KAAL,OAAA,KAAA,IAAAA,IAAA,IAAA,CAAA,IAAA,EAAe;oCAEjB;gCACF;4BACF;wBACF,EAAA,OAAS,OAAO;4BACd,IAAI,iBAAiB,SAAS,MAAM,IAAA,KAAS,cAAc;gCACzD;4BACF;4BAEA,CAAAC,MAAA,IAAA,CAAK,OAAA,KAAL,OAAA,KAAA,IAAAA,IAAA,IAAA,CAAA,IAAA,EAAe;4BACf,OAAO,KAAK;wBACd;oBACF;oBAEA,IAAA,CAAK,aAAA,GAAgB;wBACnB,OAAO,IAAM,OAAO,MAAA,CAAO;oBAC7B;oBAEA,cAAc;gBAChB,EAAA,OAAS,OAAO;oBACd,IAAI,iBAAiB,SAAS,MAAM,IAAA,KAAS,cAAc;wBACzD;oBACF;oBAEA,CAAA,KAAA,IAAA,CAAK,OAAA,KAAL,OAAA,KAAA,IAAA,GAAA,IAAA,CAAA,IAAA,EAAe;oBACf,OAAO,KAAK;gBACd;YACF;YAEA,oBAAoB;QACtB,CAAC;IACH;IAEA,MAAM,QAAuB;QAxI/B,IAAAF,MAAA,IAAA;QAyII,IAAA,CAAK,SAAA,GAAY;QACjB,CAAAA,OAAA,IAAA,CAAK,aAAA,KAAL,OAAA,KAAA,IAAAA,KAAoB,KAAA;QACpB,CAAA,KAAA,IAAA,CAAK,eAAA,KAAL,OAAA,KAAA,IAAA,GAAsB,KAAA;QACtB,CAAA,KAAA,IAAA,CAAK,OAAA,KAAL,OAAA,KAAA,IAAA,GAAA,IAAA,CAAA,IAAA;IACF;IAEA,MAAM,KAAK,OAAA,EAAwC;QA/IrD,IAAAA,MAAA,IAAA;QAgJI,IAAI,CAAC,IAAA,CAAK,QAAA,IAAY,CAAC,IAAA,CAAK,SAAA,EAAW;YACrC,MAAM,IAAI,eAAe;gBACvB,SAAS;YACX,CAAC;QACH;QAEA,IAAI;YACF,MAAM,UAAU,IAAI,QAAQ,IAAA,CAAK,OAAO;YACxC,QAAQ,GAAA,CAAI,gBAAgB,kBAAkB;YAC9C,MAAM,OAAO;gBACX,QAAQ;gBACR;gBACA,MAAM,KAAK,SAAA,CAAU,OAAO;gBAC5B,QAAA,CAAQA,OAAA,IAAA,CAAK,eAAA,KAAL,OAAA,KAAA,IAAAA,KAAsB,MAAA;YAChC;YAEA,MAAM,WAAW,MAAM,MAAM,IAAA,CAAK,QAAA,EAAU,IAAI;YAEhD,IAAI,CAAC,SAAS,EAAA,EAAI;gBAChB,MAAMG,QAAO,MAAM,SAAS,IAAA,CAAK,EAAE,KAAA,CAAM,IAAM,IAAI;gBACnD,MAAM,QAAQ,IAAI,eAAe;oBAC/B,SAAS,CAAA,mDAAA,EAAsD,SAAS,MAAM,CAAA,GAAA,EAAMA,KAAI,EAAA;gBAC1F,CAAC;gBACD,CAAA,KAAA,IAAA,CAAK,OAAA,KAAL,OAAA,KAAA,IAAA,GAAA,IAAA,CAAA,IAAA,EAAe;gBACf;YACF;QACF,EAAA,OAAS,OAAO;YACd,CAAA,KAAA,IAAA,CAAK,OAAA,KAAL,OAAA,KAAA,IAAA,GAAA,IAAA,CAAA,IAAA,EAAe;YACf;QACF;IACF;AACF;;AGxHO,SAAS,mBAAmB,MAAA,EAA0C;IAC3E,IAAI,OAAO,IAAA,KAAS,OAAO;QACzB,MAAM,IAAI,eAAe;YACvB,SACE;QACJ,CAAC;IACH;IAEA,OAAO,IAAI,gBAAgB,MAAM;AACnC;AAEO,SAAS,qBACd,SAAA,EAC2B;IAC3B,OACE,WAAW,aACX,OAAO,UAAU,KAAA,KAAU,cAC3B,UAAU,aACV,OAAO,UAAU,IAAA,KAAS,cAC1B,WAAW,aACX,OAAO,UAAU,KAAA,KAAU;AAE/B;;AL1CA,IAAM,iBAAiB;AAWvB,eAAsB,gBACpB,MAAA,EACoB;IACpB,MAAM,SAAS,IAAI,UAAU,MAAM;IACnC,MAAM,OAAO,IAAA,CAAK;IAClB,OAAO;AACT;AAmBA,IAAM,YAAN,MAAgB;IAYd,YAAY,EACV,WAAW,eAAA,EACX,MAAAC,SAAO,mBAAA,EACP,eAAA,EACF,CAAoB;QAZpB,IAAA,CAAQ,gBAAA,GAAmB;QAC3B,IAAA,CAAQ,gBAAA,GAGJ,aAAA,GAAA,IAAI,IAAI;QACZ,IAAA,CAAQ,kBAAA,GAAyC,CAAC;QAClD,IAAA,CAAQ,QAAA,GAAW;QAOjB,IAAA,CAAK,eAAA,GAAkB;QAEvB,IAAI,qBAAqB,eAAe,GAAG;YACzC,IAAA,CAAK,SAAA,GAAY;QACnB,OAAO;YACL,IAAA,CAAK,SAAA,GAAY,mBAAmB,eAAe;QACrD;QAEA,IAAA,CAAK,SAAA,CAAU,OAAA,GAAU,IAAM,IAAA,CAAK,OAAA,CAAQ;QAC5C,IAAA,CAAK,SAAA,CAAU,OAAA,GAAU,CAAC,QAAiB,IAAA,CAAK,OAAA,CAAQ,KAAK;QAC7D,IAAA,CAAK,SAAA,CAAU,SAAA,GAAY,CAAA,YAAW;YACpC,IAAI,YAAY,SAAS;gBAIvB,IAAA,CAAK,OAAA,CACH,IAAI,eAAe;oBACjB,SAAS;gBACX,CAAC;gBAEH;YACF;YAEA,IAAA,CAAK,UAAA,CAAW,OAAO;QACzB;QAEA,IAAA,CAAK,UAAA,GAAa;YAChB,MAAAA;YACA,SAAS;QACX;IACF;IAEA,MAAM,OAAsB;QAC1B,IAAI;YACF,MAAM,IAAA,CAAK,SAAA,CAAU,KAAA,CAAM;YAC3B,IAAA,CAAK,QAAA,GAAW;YAEhB,MAAM,SAAS,MAAM,IAAA,CAAK,OAAA,CAAQ;gBAChC,SAAS;oBACP,QAAQ;oBACR,QAAQ;wBACN,iBAAiB;wBACjB,cAAc,CAAC;wBACf,YAAY,IAAA,CAAK,UAAA;oBACnB;gBACF;gBACA,cAAc;YAChB,CAAC;YAED,IAAI,WAAW,KAAA,GAAW;gBACxB,MAAM,IAAI,eAAe;oBACvB,SAAS;gBACX,CAAC;YACH;YAEA,IAAI,CAAC,4BAA4B,QAAA,CAAS,OAAO,eAAe,GAAG;gBACjE,MAAM,IAAI,eAAe;oBACvB,SAAS,CAAA,4CAAA,EAA+C,OAAO,eAAe,EAAA;gBAChF,CAAC;YACH;YAEA,IAAA,CAAK,kBAAA,GAAqB,OAAO,YAAA;YAGjC,MAAM,IAAA,CAAK,YAAA,CAAa;gBACtB,QAAQ;YACV,CAAC;YAED,OAAO,IAAA;QACT,EAAA,OAAS,OAAO;YACd,MAAM,IAAA,CAAK,KAAA,CAAM;YACjB,MAAM;QACR;IACF;IAEA,MAAM,QAAuB;QAnK/B,IAAAC;QAoKI,IAAI,IAAA,CAAK,QAAA,EAAU;QACnB,MAAA,CAAA,CAAMA,OAAA,IAAA,CAAK,SAAA,KAAL,OAAA,KAAA,IAAAA,KAAgB,KAAA,EAAA;QACtB,IAAA,CAAK,OAAA,CAAQ;IACf;IAEQ,iBAAiB,MAAA,EAAsB;QAC7C,OAAQ,QAAQ;YACd,KAAK;gBACH;YACF,KAAK;YACL,KAAK;gBACH,IAAI,CAAC,IAAA,CAAK,kBAAA,CAAmB,KAAA,EAAO;oBAClC,MAAM,IAAI,eAAe;wBACvB,SAAS,CAAA,6BAAA,CAAA;oBACX,CAAC;gBACH;gBACA;YACF;gBACE,MAAM,IAAI,eAAe;oBACvB,SAAS,CAAA,oBAAA,EAAuB,MAAM,EAAA;gBACxC,CAAC;QACL;IACF;IAEA,MAAc,QAAmC,EAC/C,OAAA,EACA,YAAA,EACA,OAAA,EACF,EAIwB;QACtB,OAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;YACtC,IAAI,IAAA,CAAK,QAAA,EAAU;gBACjB,OAAO,OACL,IAAI,eAAe;oBACjB,SAAS;gBACX,CAAC;YAEL;YAEA,IAAA,CAAK,gBAAA,CAAiB,QAAQ,MAAM;YAEpC,MAAM,SAAS,WAAA,OAAA,KAAA,IAAA,QAAS,MAAA;YACxB,UAAA,OAAA,KAAA,IAAA,OAAQ,cAAA;YAER,MAAM,YAAY,IAAA,CAAK,gBAAA;YACvB,MAAM,iBAAiC;gBACrC,GAAG,OAAA;gBACH,SAAS;gBACT,IAAI;YACN;YAEA,MAAM,UAAU,MAAM;gBACpB,IAAA,CAAK,gBAAA,CAAiB,MAAA,CAAO,SAAS;YACxC;YAEA,IAAA,CAAK,gBAAA,CAAiB,GAAA,CAAI,WAAW,CAAA,aAAY;gBAC/C,IAAI,UAAA,OAAA,KAAA,IAAA,OAAQ,OAAA,EAAS;oBACnB,OAAO,OACL,IAAI,eAAe;wBACjB,SAAS;wBACT,OAAO,OAAO,MAAA;oBAChB,CAAC;gBAEL;gBAEA,IAAI,oBAAoB,OAAO;oBAC7B,OAAO,OAAO,QAAQ;gBACxB;gBAEA,IAAI;oBACF,MAAM,SAAS,aAAa,KAAA,CAAM,SAAS,MAAM;oBACjD,QAAQ,MAAM;gBAChB,EAAA,OAAS,OAAO;oBACd,MAAM,aAAa,IAAI,eAAe;wBACpC,SAAS;wBACT,OAAO;oBACT,CAAC;oBACD,OAAO,UAAU;gBACnB;YACF,CAAC;YAED,IAAA,CAAK,SAAA,CAAU,IAAA,CAAK,cAAc,EAAE,KAAA,CAAM,CAAA,UAAS;gBACjD,QAAQ;gBACR,OAAO,KAAK;YACd,CAAC;QACH,CAAC;IACH;IAEA,MAAc,UAAU,EACtB,MAAA,EACA,OAAA,EACF,GAGI,CAAC,CAAA,EAA6B;QAChC,IAAI;YACF,OAAO,IAAA,CAAK,OAAA,CAAQ;gBAClB,SAAS;oBAAE,QAAQ;oBAAc;gBAAO;gBACxC,cAAc;gBACd;YACF,CAAC;QACH,EAAA,OAAS,OAAO;YACd,MAAM;QACR;IACF;IAEA,MAAc,SAAS,EACrB,MAAAD,MAAAA,EACA,IAAA,EACA,OAAA,EACF,EAI4B;QAC1B,IAAI;YACF,OAAO,IAAA,CAAK,OAAA,CAAQ;gBAClB,SAAS;oBAAE,QAAQ;oBAAc,QAAQ;wBAAE,MAAAA;wBAAM,WAAW;oBAAK;gBAAE;gBACnE,cAAc;gBACd,SAAS;oBACP,QAAQ,WAAA,OAAA,KAAA,IAAA,QAAS,WAAA;gBACnB;YACF,CAAC;QACH,EAAA,OAAS,OAAO;YACd,MAAM;QACR;IACF;IAEA,MAAc,aAAa,YAAA,EAA2C;QACpE,MAAM,sBAA2C;YAC/C,GAAG,YAAA;YACH,SAAS;QACX;QACA,MAAM,IAAA,CAAK,SAAA,CAAU,IAAA,CAAK,mBAAmB;IAC/C;IAAA;;;GAAA,GAMA,MAAM,MAAsD,EAC1D,UAAU,WAAA,EACZ,GAEI,CAAC,CAAA,EAAsC;QAvT7C,IAAAC;QAwTI,MAAM,QAA8B,CAAC;QAErC,IAAI;YACF,MAAM,kBAAkB,MAAM,IAAA,CAAK,SAAA,CAAU;YAE7C,KAAA,MAAW,EAAE,MAAAD,MAAAA,EAAM,WAAA,EAAa,WAAA,CAAY,CAAA,IAAK,gBAAgB,KAAA,CAAO;gBACtE,IAAI,YAAY,eAAe,CAAA,CAAEA,UAAQ,OAAA,GAAU;oBACjD;gBACF;gBAEA,MAAM,aACJ,YAAY,iMACR,aAAA,EAAW;oBACT,GAAG,WAAA;oBACH,YAAA,CAAYC,OAAA,YAAY,UAAA,KAAZ,OAAAA,OAA0B,CAAC;oBACvC,sBAAsB;gBACxB,CAAgB,IAChB,OAAA,CAAQD,MAAI,CAAA,CAAE,UAAA;gBAEpB,MAAM,OAAO,IAAA;gBACb,MAAM,kBAAkB,KAAK;oBAC3B;oBACA;oBACA,SAAS,OACP,MACA,YAC4B;wBAlVxC,IAAAC;wBAmVY,CAAAA,OAAA,WAAA,OAAA,KAAA,IAAA,QAAS,WAAA,KAAT,OAAA,KAAA,IAAAA,KAAsB,cAAA;wBAEtB,OAAO,KAAK,QAAA,CAAS;4BACnB,MAAAD;4BACA;4BACA;wBACF,CAAC;oBACH;gBACF,CAAC;gBAED,KAAA,CAAMA,MAAI,CAAA,GAAI;YAChB;YAEA,OAAO;QACT,EAAA,OAAS,OAAO;YACd,MAAM;QACR;IACF;IAEQ,UAAgB;QACtB,IAAI,IAAA,CAAK,QAAA,EAAU;QAEnB,IAAA,CAAK,QAAA,GAAW;QAChB,MAAM,QAAQ,IAAI,eAAe;YAC/B,SAAS;QACX,CAAC;QAED,KAAA,MAAW,WAAW,IAAA,CAAK,gBAAA,CAAiB,MAAA,CAAO,EAAG;YACpD,QAAQ,KAAK;QACf;QAEA,IAAA,CAAK,gBAAA,CAAiB,KAAA,CAAM;IAC9B;IAEQ,QAAQ,KAAA,EAAsB;QACpC,IAAI,IAAA,CAAK,eAAA,EAAiB;YACxB,IAAA,CAAK,eAAA,CAAgB,KAAK;QAC5B;IACF;IAEQ,WAAW,QAAA,EAAgD;QACjE,MAAM,YAAY,OAAO,SAAS,EAAE;QACpC,MAAM,UAAU,IAAA,CAAK,gBAAA,CAAiB,GAAA,CAAI,SAAS;QAEnD,IAAI,YAAY,KAAA,GAAW;YACzB,MAAM,IAAI,eAAe;gBACvB,SAAS,CAAA,+DAAA,EAAkE,KAAK,SAAA,CAC9E,WACD;YACH,CAAC;QACH;QAEA,IAAA,CAAK,gBAAA,CAAiB,MAAA,CAAO,SAAS;QAEtC,QACE,YAAY,WACR,WACA,IAAI,eAAe;YACjB,SAAS,SAAS,KAAA,CAAM,OAAA;YACxB,OAAO,SAAS,KAAA;QAClB,CAAC;IAET;AACF;;AMjYO,SAAS,iBACd,OAAA,EACA,OAAA,EAEA,OAAA,EAMQ;IACR,IAAI,QAAQ,MAAA,KAAW,QAAQ,MAAA,EAAQ;QACrC,MAAM,IAAI,qBAAqB;YAC7B,WAAW;YACX,OAAO;gBAAE,eAAe,QAAQ,MAAA;gBAAQ,eAAe,QAAQ,MAAA;YAAO;YACtE,SAAS,CAAA,iCAAA,CAAA;QACX,CAAC;IACH;IAEA,MAAM,IAAI,QAAQ,MAAA;IAElB,IAAI,MAAM,GAAG;QACX,IAAI,WAAA,OAAA,KAAA,IAAA,QAAS,yBAAA,EAA2B;YACtC,MAAM,IAAI,qBAAqB;gBAC7B,WAAW;gBACX,OAAO;gBACP,SAAS;YACX,CAAC;QACH;QAEA,OAAO;IACT;IAEA,IAAI,oBAAoB;IACxB,IAAI,oBAAoB;IACxB,IAAI,aAAa;IAEjB,IAAA,IAAS,IAAI,GAAG,IAAI,GAAG,IAAK;QAC1B,MAAM,SAAS,OAAA,CAAQ,CAAC,CAAA;QACxB,MAAM,SAAS,OAAA,CAAQ,CAAC,CAAA;QAExB,qBAAqB,SAAS;QAC9B,qBAAqB,SAAS;QAC9B,cAAc,SAAS;IACzB;IAEA,OAAO,sBAAsB,KAAK,sBAAsB,IACpD,IACA,aAAA,CACG,KAAK,IAAA,CAAK,iBAAiB,IAAI,KAAK,IAAA,CAAK,iBAAiB,CAAA;AACnE;;ACxDO,SAAS,uBAA0B,EACxC,MAAA,EACA,mBAAmB,CAAA,EACnB,iBAAiB,CAAA,EACjB,SAAA,EACF,EAOsB;IAvBtB,IAAAE;IAwBE,MAAMC,SAAAA,CAAQD,OAAA,aAAA,OAAA,KAAA,IAAA,UAAW,KAAA,KAAX,OAAAA,4KAAoB,QAAA;IAElC,IAAI,QAAQ;IAEZ,OAAO,IAAI,eAAe;QACxB,MAAM,MAAK,UAAA,EAAY;YACrB,IAAI,QAAQ,OAAO,MAAA,EAAQ;gBACzB,MAAMC,OAAM,UAAU,IAAI,mBAAmB,cAAc;gBAC3D,WAAW,OAAA,CAAQ,MAAA,CAAO,OAAO,CAAC;YACpC,OAAO;gBACL,WAAW,KAAA,CAAM;YACnB;QACF;IACF,CAAC;AACH;;ACQO,SAAS,kBACd,EAAE,QAAA,EAAU,SAAA,CAAU,CAAA,EACtBE,QAAAA,EACU;IACV,MAAM,SAAS,IAAI,eAAe;QAChC,MAAM,OAAM,UAAA,EAAY;YAnD5B,IAAAC;YAoDM,MAAM,cAAc,IAAI,YAAY;YAEpC,MAAM,cAAc,CAAC,YAA8B;gBACjD,WAAW,OAAA,CACT,YAAY,MAAA,oLACVF,4BAAAA,EAA0B,qBAAqB,OAAO;YAG5D;YAEA,MAAM,kBAAkB,CAAC,YAAyB;gBAChD,WAAW,OAAA,CACT,YAAY,MAAA,oLACVA,4BAAAA,EAA0B,gBAAgB,OAAO;YAGvD;YAEA,MAAM,YAAY,CAAC,iBAAyB;gBAC1C,WAAW,OAAA,CACT,YAAY,MAAA,oLAAOA,4BAAAA,EAA0B,SAAS,YAAY,CAAC;YAEvE;YAEA,MAAM,gBAAgB,OAAOG,YAAgB;gBA5EnD,IAAAD,MAAA;gBA6EQ,IAAI,SAA0B,KAAA;gBAE9B,WAAA,MAAiB,SAASC,QAAQ;oBAChC,OAAQ,MAAM,KAAA,EAAO;wBACnB,KAAK;4BAA0B;gCAC7B,WAAW,OAAA,CACT,YAAY,MAAA,oLACVH,4BAAAA,EAA0B,qBAAqB;oCAC7C,IAAI,MAAM,IAAA,CAAK,EAAA;oCACf,MAAM;oCACN,SAAS;wCAAC;4CAAE,MAAM;4CAAQ,MAAM;gDAAE,OAAO;4CAAG;wCAAE,CAAC;qCAAA;gCACjD,CAAC;gCAGL;4BACF;wBAEA,KAAK;4BAAwB;gCAC3B,MAAM,UAAA,CAAUE,OAAA,MAAM,IAAA,CAAK,KAAA,CAAM,OAAA,KAAjB,OAAA,KAAA,IAAAA,IAAAA,CAA2B,EAAA;gCAE3C,IAAA,CAAI,WAAA,OAAA,KAAA,IAAA,QAAS,IAAA,MAAS,UAAA,CAAA,CAAU,KAAA,QAAQ,IAAA,KAAR,OAAA,KAAA,IAAA,GAAc,KAAA,KAAS,MAAM;oCAC3D,WAAW,OAAA,CACT,YAAY,MAAA,oLACVF,4BAAAA,EAA0B,QAAQ,QAAQ,IAAA,CAAK,KAAK;gCAG1D;gCAEA;4BACF;wBAEA,KAAK;wBACL,KAAK;4BAA8B;gCACjC,SAAS,MAAM,IAAA;gCACf;4BACF;oBACF;gBACF;gBAEA,OAAO;YACT;YAGA,WAAW,OAAA,CACT,YAAY,MAAA,CACVA,+MAAAA,EAA0B,0BAA0B;gBAClD;gBACA;YACF,CAAC;YAIL,IAAI;gBACF,MAAMC,SAAQ;oBACZ;oBACA;oBACA;gBACF,CAAC;YACH,EAAA,OAAS,OAAO;gBACd,UAAA,CAAWC,OAAA,MAAc,OAAA,KAAd,OAAAA,OAAyB,GAAG,KAAK,EAAE;YAChD,SAAE;gBACA,WAAW,KAAA,CAAM;YACnB;QACF;QACA,MAAK,UAAA,EAAY,CAAC;QAClB,SAAS,EAAC;IACZ,CAAC;IAED,OAAO,IAAI,SAAS,QAAQ;QAC1B,QAAQ;QACR,SAAS;YACP,gBAAgB;QAClB;IACF,CAAC;AACH;;ACvJA,IAAA,4BAAA,CAAA;AAAA,SAAA,2BAAA;IAAA,qBAAA,IAAA;IAAA,cAAA,IAAA;IAAA,sBAAA,IAAA;AAAA;;;AC8CO,SAAS,2BACd,YAAyC,CAAC,CAAA,EACL;IACrC,MAAM,cAAc,IAAI,YAAY;IACpC,IAAI,qBAAqB;IAEzB,OAAO,IAAI,gBAAgB;QACzB,MAAM,QAAuB;YAC3B,IAAI,UAAU,OAAA,EAAS,MAAM,UAAU,OAAA,CAAQ;QACjD;QAEA,MAAM,WAAU,OAAA,EAAS,UAAA,EAA2B;YAClD,WAAW,OAAA,CAAQ,YAAY,MAAA,CAAO,OAAO,CAAC;YAE9C,sBAAsB;YAEtB,IAAI,UAAU,OAAA,EAAS,MAAM,UAAU,OAAA,CAAQ,OAAO;YACtD,IAAI,UAAU,MAAA,IAAU,OAAO,YAAY,UAAU;gBACnD,MAAM,UAAU,MAAA,CAAO,OAAO;YAChC;QACF;QAEA,MAAM,QAAuB;YAC3B,IAAI,UAAU,YAAA,EAAc;gBAC1B,MAAM,UAAU,YAAA,CAAa,kBAAkB;YACjD;YACA,IAAI,UAAU,OAAA,EAAS;gBACrB,MAAM,UAAU,OAAA,CAAQ,kBAAkB;YAC5C;QACF;IACF,CAAC;AACH;;AD5BA,SAAS,qBACP,MAAA,EAIA,SAAA,EACA;IACA,OAAO,OACJ,WAAA,CACC,IAAI,gBAEF;QACA,WAAW,OAAO,OAAO,eAAe;YA7DhD,IAAAG;YA+DU,IAAI,OAAO,UAAU,UAAU;gBAC7B,WAAW,OAAA,CAAQ,KAAK;gBACxB;YACF;YAGA,IAAI,WAAW,OAAO;gBAEpB,IAAI,MAAM,KAAA,KAAU,wBAAwB;oBAC1C,sBAAA,CACEA,OAAA,MAAM,IAAA,KAAN,OAAA,KAAA,IAAAA,KAAY,KAAA,EACZ;gBAEJ;gBACA;YACF;YAGA,sBAAsB,OAAO,UAAU;QACzC;IACF,CAAC,GAEF,WAAA,CAAY,2BAA2B,SAAS,CAAC,EACjD,WAAA,CAAY,IAAI,kBAAkB,CAAC,EACnC,WAAA,CACC,IAAI,gBAAgB;QAClB,WAAW,OAAO,OAAO,eAAe;YACtC,WAAW,OAAA,oLAAQC,uBAAAA,EAAqB,QAAQ,KAAK,CAAC;QACxD;IACF,CAAC;AAEP;AASO,SAAS,aACd,MAAA,EAIA,SAAA,EACA;IACA,OAAO,qBAAqB,QAAQ,SAAS,EAAE,WAAA,CAC7C,IAAI,kBAAkB;AAE1B;AAEO,SAAS,qBACd,MAAA,EAIA,OAAA,EAKA;IA7HF,IAAAD;IA8HE,MAAM,aAAa,qBACjB,QACA,WAAA,OAAA,KAAA,IAAA,QAAS,SAAA,EACT,WAAA,CAAY,IAAI,kBAAkB,CAAC;IACrC,MAAM,OAAO,WAAA,OAAA,KAAA,IAAA,QAAS,IAAA;IACtB,MAAM,OAAO,WAAA,OAAA,KAAA,IAAA,QAAS,IAAA;IAEtB,MAAM,iBAAiB,OACnB,aAAa,KAAK,MAAA,EAAQ,UAAU,IACpC;IAEJ,OAAO,IAAI,SAAS,gBAAgB;QAClC,QAAA,CAAQA,OAAA,QAAA,OAAA,KAAA,IAAA,KAAM,MAAA,KAAN,OAAAA,OAAgB;QACxB,YAAY,QAAA,OAAA,KAAA,IAAA,KAAM,UAAA;QAClB,SAAS,uBAAuB,QAAA,OAAA,KAAA,IAAA,KAAM,OAAA,EAAS;YAC7C,aAAa;YACb,mBAAmB;QACrB,CAAC;IACH,CAAC;AACH;AAEO,SAAS,oBACd,MAAA,EAIA,OAAA,EACA;IACA,QAAQ,UAAA,CAAW,KAAA,CAAM,qBAAqB,QAAQ,QAAQ,SAAS,CAAC;AAC1E;AAEA,SAAS,sBACP,KAAA,EACA,UAAA,EACA;IACA,IAAI,OAAO,MAAM,OAAA,KAAY,UAAU;QACrC,WAAW,OAAA,CAAQ,MAAM,OAAO;IAClC,OAAO;QACL,MAAM,UAA4C,MAAM,OAAA;QACxD,KAAA,MAAW,QAAQ,QAAS;YAC1B,IAAI,KAAK,IAAA,KAAS,QAAQ;gBACxB,WAAW,OAAA,CAAQ,KAAK,IAAI;YAC9B;QACF;IACF;AACF;;AE3KA,IAAA,6BAAA,CAAA;AAAA,SAAA,4BAAA;IAAA,qBAAA,IAAAE;IAAA,cAAA,IAAAC;IAAA,sBAAA,IAAAC;AAAA;;;AAeA,SAASE,sBACP,MAAA,EACA,SAAA,EACA;IACA,MAAM,YAAY,kBAAkB;IAEpC,gLAAO,uCAAA,EAAqC,MAAA,CAAO,OAAO,aAAa,CAAA,CAAE,CAAC,EACvE,WAAA,CACC,IAAI,gBAAgB;QAClB,MAAM,WAAU,OAAA,EAAS,UAAA,EAA2B;YAClD,WAAW,OAAA,CAAQ,UAAU,QAAQ,KAAK,CAAC;QAC7C;IACF,CAAC,GAEF,WAAA,CAAY,2BAA2B,SAAS,CAAC,EACjD,WAAA,CAAY,IAAI,kBAAkB,CAAC,EACnC,WAAA,CACC,IAAI,gBAAgB;QAClB,WAAW,OAAO,OAAO,eAAe;YACtC,WAAW,OAAA,CAAQC,0MAAAA,EAAqB,QAAQ,KAAK,CAAC;QACxD;IACF,CAAC;AAEP;AAEO,SAASC,cACd,MAAA,EACA,SAAA,EACA;IACA,OAAOF,sBAAqB,QAAQ,SAAS,EAAE,WAAA,CAC7C,IAAI,kBAAkB;AAE1B;AAEO,SAASG,sBACd,MAAA,EACA,UAII,CAAC,CAAA,EACL;IAxDF,IAAAC;IAyDE,MAAM,EAAE,IAAA,EAAM,IAAA,EAAM,SAAA,CAAU,CAAA,GAAI;IAClC,MAAM,aAAaJ,sBAAqB,QAAQ,SAAS,EAAE,WAAA,CACzD,IAAI,kBAAkB;IAExB,MAAM,iBAAiB,OACnB,aAAa,KAAK,MAAA,EAAQ,UAAU,IACpC;IAEJ,OAAO,IAAI,SAAS,gBAAgB;QAClC,QAAA,CAAQI,OAAA,QAAA,OAAA,KAAA,IAAA,KAAM,MAAA,KAAN,OAAAA,OAAgB;QACxB,YAAY,QAAA,OAAA,KAAA,IAAA,KAAM,UAAA;QAClB,SAAS,uBAAuB,QAAA,OAAA,KAAA,IAAA,KAAM,OAAA,EAAS;YAC7C,aAAa;YACb,mBAAmB;QACrB,CAAC;IACH,CAAC;AACH;AAEO,SAASC,qBACd,MAAA,EACA,OAAA,EAIA;IACA,QAAQ,UAAA,CAAW,KAAA,CAAML,sBAAqB,QAAQ,QAAQ,SAAS,CAAC;AAC1E;AAEA,SAAS,oBAA8C;IACrD,IAAI,gBAAgB;IAEpB,OAAO,CAACM,UAAyB;QAC/B,IAAI,eAAe;YACjBA,QAAOA,MAAK,SAAA,CAAU;YACtB,IAAIA,OAAM,gBAAgB;QAC5B;QACA,OAAOA;IACT;AACF;;;AE3FO,IAAM,iCAAiC,KAAK;;ADI5C,IAAM,aAAN,MAAiB;IAStB,aAAc;QARd,IAAA,CAAQ,OAAA,GAAU,IAAI,YAAY;QAElC,IAAA,CAAQ,UAAA,GAA0D;QAGlE,IAAA,CAAQ,QAAA,GAAoB;QAC5B,IAAA,CAAQ,cAAA,GAAwC;QAG9C,MAAM,OAAO,IAAA;QAEb,IAAA,CAAK,MAAA,GAAS,IAAI,eAAe;YAC/B,OAAO,OAAM,eAAc;gBACzB,KAAK,UAAA,GAAa;gBAGlB,IAAI,QAAQ,IAAI,aAAa,WAAe;oBAC1C,KAAK,cAAA,GAAiB,WAAW,MAAM;wBACrC,QAAQ,IAAA,CACN;oBAEJ,GAAG,8BAA8B;gBACnC;YACF;YACA,MAAM,CAAA,cAEN,CAFoB;YAGpB,QAAQ,CAAA,WAAU;gBAChB,IAAA,CAAK,QAAA,GAAW;YAClB;QACF,CAAC;IACH;IAEA,MAAM,QAAuB;QAC3B,IAAI,IAAA,CAAK,QAAA,EAAU;YACjB,MAAM,IAAI,MAAM,sCAAsC;QACxD;QAEA,IAAI,CAAC,IAAA,CAAK,UAAA,EAAY;YACpB,MAAM,IAAI,MAAM,uCAAuC;QACzD;QAEA,IAAA,CAAK,UAAA,CAAW,KAAA,CAAM;QACtB,IAAA,CAAK,QAAA,GAAW;QAGhB,IAAI,IAAA,CAAK,cAAA,EAAgB;YACvB,aAAa,IAAA,CAAK,cAAc;QAClC;IACF;IAEA,OAAO,KAAA,EAAwB;QAC7B,IAAI,IAAA,CAAK,QAAA,EAAU;YACjB,MAAM,IAAI,MAAM,sCAAsC;QACxD;QAEA,IAAI,CAAC,IAAA,CAAK,UAAA,EAAY;YACpB,MAAM,IAAI,MAAM,uCAAuC;QACzD;QAEA,IAAA,CAAK,UAAA,CAAW,OAAA,CACd,IAAA,CAAK,OAAA,CAAQ,MAAA,oLAAOE,uBAAAA,EAAqB,QAAQ;YAAC,KAAK;SAAC,CAAC;IAE7D;IAEA,wBAAwB,KAAA,EAAwB;QAC9C,IAAI,IAAA,CAAK,QAAA,EAAU;YACjB,MAAM,IAAI,MAAM,sCAAsC;QACxD;QAEA,IAAI,CAAC,IAAA,CAAK,UAAA,EAAY;YACpB,MAAM,IAAI,MAAM,uCAAuC;QACzD;QAEA,IAAA,CAAK,UAAA,CAAW,OAAA,CACd,IAAA,CAAK,OAAA,CAAQ,MAAA,oLAAOA,uBAAAA,EAAqB,uBAAuB;YAAC,KAAK;SAAC,CAAC;IAE5E;AACF","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106],"debugId":null}}]
}